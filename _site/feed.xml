<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>非专业程序员</title>
    <description>Hello-World</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 07 Oct 2025 01:34:38 +0800</pubDate>
    <lastBuildDate>Tue, 07 Oct 2025 01:34:38 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>CoreText Font Fallback</title>
        <description>&lt;h1 id=&quot;一引言&quot;&gt;一、引言&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文基于Xcode 16.4，iOS 18.5模拟器分析，不同系统版本可能有区别。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;前面我们介绍了&lt;a href=&quot;https://mp.weixin.qq.com/s/fcL6if52qYQUTChEjntHJg&quot;&gt;自定义文字排版引擎的原理&lt;/a&gt;，其中有一个复杂部分是字体Fallback，本文将通过逆向手段分析CoreText中&lt;code class=&quot;highlighter-rouge&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/code&gt;的实现，通过了解系统的字体回退实现，可以帮助我们实现更好的生产级别的文字排版引擎。&lt;/p&gt;

&lt;p&gt;在开始之前，先介绍下&lt;code class=&quot;highlighter-rouge&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/code&gt; API，其完整的函数签名如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;官方文档：https://developer.apple.com/documentation/coretext/ctfontcopydefaultcascadelistforlanguages(&lt;em&gt;:&lt;/em&gt;:)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;languagePrefList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一个字体不可能支持所有的Unicode，比如Helvetica不支持中文，PingFang不支持韩文，在实际渲染时，往往是多个字体共同参与完成的，另外不同字体支持的Unicode有交集，那最终选择哪个字体也是有优先级的；&lt;code class=&quot;highlighter-rouge&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/code&gt;的作用就是：给定一个字体和语言列表，返回系统默认的Fallback列表（也叫级联列表，CascadeList），简单理解就是系统会按这个Fallabck列表进行优先级选择Fallback字体。&lt;/p&gt;

&lt;p&gt;在macOS/iOS中，我们也可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;kCTFontCascadeListAttribute&lt;/code&gt;显示指定Fallback链（如下），这样就能自定义Fallback，当然，如果不指定的话会系统也会启用默认Fallback，来尽量保证文本渲染正确。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeAttributedStringWithFallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;baseFontName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Helvetica&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;languages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zh-Hans&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ja&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ko&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSAttributedString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;baseFont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontCreateWithName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseFontName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fallbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;languages&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CTFontDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CFString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;kCTFontNameAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseFontName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;kCTFontSizeAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// 可以在这里修改fallbacks，来自定义回退&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCTFontCascadeListAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fallbacks&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newDescriptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontDescriptorCreateWithAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;finalFont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontCreateWithFontDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attributesDict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSAttributedString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finalFont&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSAttributedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributesDict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面，我们按如下调用Demo来实际研究下：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ctFont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;systemFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ofSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;languages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zh-Hans&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cascadeList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;languages&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;二调用链路&quot;&gt;二、调用链路&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/FontFallback/CTFontCopyDefaultCascadeListForLanguages.png&quot; alt=&quot;CTFontCopyDefaultCascadeListForLanguages&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上是&lt;code class=&quot;highlighter-rouge&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/code&gt;的调用链路，可以看出大致分为两条处理链路：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Preset Fallbacks&lt;/strong&gt;：系统预设Fallback，这是一个“快速通道”，系统内部维护了一个针对特定字体（如系统UI字体）的硬编码Fallback列表，如果请求的主字体在这个预设列表中，系统会直接使用这个列表，速度非常快。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;System Default Fallbacks&lt;/strong&gt;：系统默认Fallback，这是一个“通用通道”，如果预设列表没有命中，系统会启动默认Fallback流程，该流程会加载一个全局的、定义了完整回退规则的配置文件，根据用户的语言偏好设置，动态地为请求的字体生成一个Fallback列表，并进行缓存以提高后续调用效率。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;后文我们也将按这两个流程分开分析。&lt;/p&gt;

&lt;p&gt;完整的反汇编逻辑和注释可以参考：https://github.com/HusterYP/FontFallback&lt;/p&gt;

&lt;h1 id=&quot;三tbasefontcreatefallbacks&quot;&gt;三、TBaseFont::CreateFallbacks&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;/**
* 核心分发函数，决定是使用预设Fallback还是系统默认Fallback。
*
* @param result@&amp;lt;X0&amp;gt; (TBaseFont*) TBaseFont 实例。
* @param a2@&amp;lt;X1&amp;gt;     (int) 标志位，可能表示是否为系统UI字体。
* @param a3@&amp;lt;X2&amp;gt;     (int) 字体属性。
* @param a4@&amp;lt;X3&amp;gt;     (_QWORD*) 未知参数，可能是字符集。
* @param a5@&amp;lt;X4&amp;gt;     (CFArrayRef) 语言列表。
* @param a6@&amp;lt;X8&amp;gt;     (_QWORD*) 用于接收结果的输出指针。
*
* @return __int64 无实际意义。
 */
__int64 __usercall TBaseFont::CreateFallbacks@&amp;lt;X0&amp;gt;(__int64 result@&amp;lt;X0&amp;gt;, __int64 a2@&amp;lt;X1&amp;gt;, __int64 a3@&amp;lt;X2&amp;gt;, __int64 a4@&amp;lt;X3&amp;gt;, __int64 a5@&amp;lt;X4&amp;gt;, _QWORD *a6@&amp;lt;X8&amp;gt;)
{
	...
  // 保存参数
  v6 = a3;  // 字体特性标志
  v7 = a5;  // 语言数组指针
  v8 = a2;  // 系统UI字体标志
  v9 = (TBaseFont *)result;  // 基础字体对象
  ...
  // 如果系统UI字体标志不为 0，尝试创建预设字体回退
  if ( (_DWORD)a2 )
  {
    v11 = (_QWORD *)a4;
    // 从字体对象中获取字体名，如.SFUI-Regular
    v12 = (*(__int64 (**)(void))(*(_QWORD *)result + 560LL))();
    if ( v12 )
    {
      v13 = v12;
      // 初始化字体描述符源对象
      TDescriptorSource::TDescriptorSource((TDescriptorSource *)&amp;amp;v33);
      _X26 = &amp;amp;v34;
      // 创建预设字体回退列表
      _X0 = TDescriptorSource::CreatePresetFallbacks(v13, v11, v7, v6, &amp;amp;v34);
      ...
    }
  }
  // 检查预设字体回退是否成功创建
  v24 = objc_retain(_X0);
  if ( v24 )
  {
    v25 = v24;
    v26 = CFArrayGetCount(v24);
    result = objc_release(v25);
    // 如果预设字体回退不为空，直接返回
    if ( v26 )
      return result;
  }
  ...
  // 如果预设字体回退为空，创建系统默认字体回退
  v27 = TBaseFont::GetCSSFamily(v9);
  _X23 = &amp;amp;v34;

  // 创建系统默认字体回退列表
  _X0 = TBaseFont::CreateSystemDefaultFallbacks((__int64)v9, v27, v7, v8, &amp;amp;v34);
  ...
  return result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是处理预设Fallback和默认Fallback的入口函数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）&lt;code class=&quot;highlighter-rouge&quot;&gt;result@&amp;lt;X0&amp;gt;&lt;/code&gt;参数是什么&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先我们主要关注的是第一个入参&lt;code class=&quot;highlighter-rouge&quot;&gt;result@&amp;lt;X0&amp;gt;&lt;/code&gt;，我们先尝试反汇编x0，发现它其实指向的是类 &lt;code class=&quot;highlighter-rouge&quot;&gt;TTenuousComponentFont&lt;/code&gt; （CoreText 内部的一个私有类，继承自 &lt;code class=&quot;highlighter-rouge&quot;&gt;TBaseFont&lt;/code&gt;）的虚函数表，如下，下面的&lt;code class=&quot;highlighter-rouge&quot;&gt;udf&lt;/code&gt; 其实是因为LLDB尝试将数据当代码解读，但其实它是一个指针表，所以识别成了未定义。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/FontFallback/CreateFallbacks-1.png&quot; alt=&quot;CreateFallbacks-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CoreText 是由 C++ 和 Objective-C 混合实现的，C++类对象的方法调用是通过虚函数表（vtable）实现的，C++ 虚表是一个函数指针数组，对象里保存着一个 vptr（虚表指针），指向它所属类的 vtable。&lt;/p&gt;

&lt;p&gt;下面我们尝试将&lt;code class=&quot;highlighter-rouge&quot;&gt;result@&amp;lt;X0&amp;gt;&lt;/code&gt;按虚表指针解析，主要是&lt;code class=&quot;highlighter-rouge&quot;&gt;dis -c 5 -s xxx&lt;/code&gt;，可以通过这种方式索引各方法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/FontFallback/CreateFallbacks-2.png&quot; alt=&quot;CreateFallbacks&quot; /&gt;&lt;/p&gt;

&lt;p&gt;继续往上追溯，&lt;code class=&quot;highlighter-rouge&quot;&gt;result@&amp;lt;X0&amp;gt;&lt;/code&gt;其实来自原始入参CTFont中的一个属性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）什么情况下会触发Preset Fallbacks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;提取主要控制逻辑如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;// 如果系统UI字体标志不为 0，尝试创建预设字体回退
if ( (_DWORD)a2 )
{
  v11 = (_QWORD *)a4;
  // 从字体对象中获取字体名，如.SFUI-Regular
  v12 = (*(__int64 (**)(void))(*(_QWORD *)result + 560LL))();
  if ( v12 )
  {
  	...
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以发现当&lt;code class=&quot;highlighter-rouge&quot;&gt;a2&lt;/code&gt;非0时会触发Preset Fallbacks，继续往上追溯&lt;code class=&quot;highlighter-rouge&quot;&gt;a2&lt;/code&gt;来自于&lt;code class=&quot;highlighter-rouge&quot;&gt;TFont::IsSystemUIFontAndForShaping((TFont *)v5, &amp;amp;v14)&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;IsSystemUIFontAndForShaping&lt;/code&gt;不在本文重点，简单理解就是如果是系统UI字体且用于文本塑形的字体则返回true，比如典型的&lt;code class=&quot;highlighter-rouge&quot;&gt;UIFont.systemFont&lt;/code&gt;（&lt;code class=&quot;highlighter-rouge&quot;&gt;.SFUI-Regular&lt;/code&gt;：San Francisco (SF)字体家族中的字体）判定为true。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Q：为什么只有系统UI字体才有预设Fallback&lt;/p&gt;

  &lt;p&gt;简单理解就是只有系统UI字体是系统完全可控可感知的，所以可以提前构建Fallback列表&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;3）什么情况下会触发System Default Fallbacks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;从上面反汇编逻辑比较容易看出，当Preset Fallbacks的结果为空时，会继续走System Default Fallbacks兜底。&lt;/p&gt;

&lt;h1 id=&quot;四preset-fallbacks&quot;&gt;四、Preset Fallbacks&lt;/h1&gt;

&lt;h2 id=&quot;41-获取全局预设fallback列表ctpresetfallbacks&quot;&gt;4.1 获取全局预设Fallback列表CTPresetFallbacks&lt;/h2&gt;

&lt;p&gt;在分析系统是如何为特定字体构建预设Fallback（字体的级联列表）之前，我们需要先知道预设列表是从哪里读取的。&lt;/p&gt;

&lt;p&gt;系统是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;GetCTPresetFallbacksDictionary&lt;/code&gt;获取预设列表的，继续往下追溯预设列表最终来自&lt;code class=&quot;highlighter-rouge&quot;&gt;GSFontCacheGetData&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;/*
 * 函数: GSFontCacheGetData
 * -------------------------
 * @brief  从图形服务（GraphicsServices）的字体缓存中根据键名获取数据。
 * @param  a1 (void*)      String入参，实际是对应plist名称，比如预设列表的plist名称CTPresetFallbacks.plist
 * @param  a2 (const char*) 在此反汇编中未使用，可能是寄存器传参的残留。
 * @return (void*)         返回一个指向缓存数据的指针，如果找不到则可能返回NULL。
 */
void *__fastcall GSFontCacheGetData(void *a1, const char *a2)
{
  // =================================================================
  // 快速通道 1: 检查是否请求 &quot;DefaultFontFallbacks.plist&quot;
  // =================================================================
  // 调用 a1 的 isEqualToString: 方法，与字符串 &quot;DefaultFontFallbacks.plist&quot;（stru_6BEB8）比较
  if ( (unsigned int)objc_msgSend_isEqualToString_(a1, a2, &amp;amp;stru_6BEB8) )
  {
    // 如果是，直接返回全局变量 kDefaultFontFallbacks 的值。
    // 这是一个非常高效的硬编码路径，用于获取默认的后备字体规则。
    v4 = &amp;amp;kDefaultFontFallbacks;
    return (void *)*v4;
  }

  // =================================================================
  // 快速通道 2: 检查是否请求 &quot;CTPresetFallbacks.plist&quot;
  // =================================================================
  // 调用 a1 的 isEqualToString: 方法，与字符串 &quot;CTPresetFallbacks.plist&quot;（stru_6BED8）比较
  if ( (unsigned int)objc_msgSend_isEqualToString_(v2, v3, &amp;amp;stru_6BED8) )
  {
    // 如果是，直接返回全局变量 CTPresetFallbacks 的值。
    // 这正是我们之前分析的、包含了所有预设后备规则的那个.plist文件的内容。
    // 系统通过这个键来加载整个预设后备字典。
    v4 = &amp;amp;CTPresetFallbacks;
    return (void *)*v4;
  }

  // =================================================================
  // 快速通道 3: 检查是否请求某个特殊字典
  // =================================================================
  // 调用 a1 的 isEqualToString: 方法，与字符串 &quot;CTFontInfo.plist&quot;（stru_6BEF8）比较
  if ( !((unsigned __int64)objc_msgSend_isEqualToString_(v2, v5, &amp;amp;stru_6BEF8) &amp;amp; 1) )
  {
    // 如果键不是 stru_6BEF8，则进入下面的常规查询逻辑
    // =================================================================
    // 常规查询路径: 在一个全局字典 (unk_1EB8F0) 中查找
    // =================================================================
    // 检查键是否为 &quot;CTCharacterSets.plist&quot; (stru_6BF18)
    if ( (unsigned int)objc_msgSend_isEqualToString_(v2, v7, &amp;amp;stru_6BF18) )
    {
      // **键名转换/别名**: 如果是，则将要查询的键替换为另一个字符串 &quot;CTCharacterSets&quot; (stru_6BF38)
      v9 = &amp;amp;stru_6BF38;
    }
    // 检查键是否为 &quot;GSFontCache.plist&quot; (stru_6BF58)
    else if ( (unsigned int)objc_msgSend_isEqualToString_(v2, v8, &amp;amp;stru_6BF58) )
    {
      // **键名转换/别名**: 如果是，则将要查询的键替换为另一个字符串 &quot;GSFontCache&quot; (stru_6BF78)
      v9 = &amp;amp;stru_6BF78;
    }
    else
    {
      // 检查键是否为 &quot;CoreTextConfig.plist&quot; (stru_6BF98)
      if ( !(unsigned int)objc_msgSend_isEqualToString_(v2, v8, &amp;amp;stru_6BF98) )
        // 如果键不匹配上面任何一个需要转换的键，则使用原始的键 v2 在全局字典中查找
        return objc_msgSend_objectForKey_(&amp;amp;unk_1EB8F0, v8, v2);
      
      // **键名转换/别名**: 如果键是 stru_6BF98，则将其替换为 &quot;CoreTextConfig&quot; (stru_6BFB8)
      v9 = &amp;amp;stru_6BFB8;
    }
    
    // 对于所有经过“键名转换”的情况，使用转换后的新键 v9 在全局字典中查找
    // objectForKeyedSubscript: 是 OC 中字典下标语法 (dictionary[key]) 的底层实现
    return objc_msgSend_objectForKeyedSubscript_(&amp;amp;unk_1EB8F0, v8, v9);
  }

  // 如果快速通道3的检查为真 (键等于 stru_6BEF8)，则直接返回整个全局字典 unk_1EB8F0
  return &amp;amp;unk_1EB8F0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从反汇编逻辑不太容易看，可以结合LLDB Debug一起分析：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/FontFallback/CTPresetFallbacks-plist.png&quot; alt=&quot;CTPresetFallbacks-plist&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在查询预设列表时，入参是&lt;code class=&quot;highlighter-rouge&quot;&gt;CTPresetFallbacks.plist&lt;/code&gt;，系统会从&lt;strong&gt;全局变量CTPresetFallbacks&lt;/strong&gt;中读取预设列表，CTPresetFallbacks是全局共享的，是在CoreText服务启动时构建的一个全局常量，内容如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;完整列表见：https://github.com/HusterYP/FontFallback/blob/main/CTPresetFallbacks.plist&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.SFUI-Regular&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleSystemFallback-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleColorEmojiUI&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.SFGeorgian-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;HelveticaNeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleSymbolsFB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleArabicFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;如果系统语言是阿拉伯语(ar)，则使用此字体&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ur&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleUrduFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;如果是乌尔都语(ur)，则使用此字体&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleJapaneseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;如果是日语(ja)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleKoreanFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;如果是韩语(ko)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotoSansMyanmar-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-Qaag&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotoSansZawgyi-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-HK&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleHongKongChineseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;香港繁体中文&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-Hans&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleSimplifiedChineseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;简体中文&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-Hant&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleTraditionalChineseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;台湾繁体中文&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-MO&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleMacaoChineseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.ThonburiUI-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.SFHebrew-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.SFArmenian-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleIndicFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;KohinoorDevanagari-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Kailasa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;KohinoorBangla-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;KohinoorGujarati-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MuktaMahee-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotoSansKannada-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;KhmerSangamMN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;LaoSangamMN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;MalayalamSangamMN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;NotoSansOriya&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;SinhalaSangamMN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;TamilSangamMN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;KohinoorTelugu-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotoSansArmenian-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;EuphemiaUCAS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Menlo-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;AppleSymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ArialMT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;STIXTwoMath-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.HiraKakuInterface-W4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;HelveticaNeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Kefa-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Galvji&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.PhoneFallback&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;SystemWideFallbacks&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;887&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Charter-Roman&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;895&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;895&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;DINCondensed-Bold&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;975&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1315&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Charter-Roman&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1316&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1319&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.SFUI-Regular&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CTPresetFallbacks.plist中主要定义了两组内容：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）为特定字体定义Fallback列表/级联列表&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如我们这里要查询&lt;code class=&quot;highlighter-rouge&quot;&gt;.SFUI-Regular&lt;/code&gt;的Fallback列表，就用&lt;code class=&quot;highlighter-rouge&quot;&gt;.SFUI-Regular&lt;/code&gt;作为key去CTPresetFallbacks.plist中找到一组字典进行解析，解析逻辑后面会讲。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）SystemWideFallbacks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SystemWideFallbacks定义了一个全局级别的 Fallback 映射，和字体无关，按 Unicode code point 范围定义；每个元素是一个三元组，包括：起始 Unicode 码点 + 结束 Unicode 码点 + 指定 Fallback 字体。&lt;/p&gt;

&lt;p&gt;比如128～887范围优先用Charter-Roman。&lt;/p&gt;

&lt;h2 id=&quot;42-预设列表解析流程&quot;&gt;4.2 预设列表解析流程&lt;/h2&gt;

&lt;p&gt;获取到全局预设列表之后，我们再来看系统是如何针对特定字体（系统的UI字体）构建级联列表的，主要逻辑在&lt;code class=&quot;highlighter-rouge&quot;&gt;CreatePresetFallbacks&lt;/code&gt;中，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;/*
* 实现“快速通道”，从一个全局的、硬编码的字典中查找并创建预设列表。
*
* @param a1@&amp;lt;X1&amp;gt; (CFStringRef) 字体名称或标识符。
* @param a2@&amp;lt;X2&amp;gt; (_QWORD*)     输出参数，可能用于字符集。
* @param a3@&amp;lt;X3&amp;gt; (CFArrayRef)  语言列表。
* @param a4@&amp;lt;X4&amp;gt; (int)         标志位。
* @param a5@&amp;lt;X8&amp;gt; (_QWORD*)     用于接收结果的输出指针。
*
* @return __int64 返回创建的预设列表 (CFArrayRef)。
*/
__int64 __usercall TDescriptorSource::CreatePresetFallbacks@&amp;lt;X0&amp;gt;(__int64 a1@&amp;lt;X1&amp;gt;, _QWORD *a2@&amp;lt;X2&amp;gt;, __int64 a3@&amp;lt;X3&amp;gt;, __int64 a4@&amp;lt;X4&amp;gt;, _QWORD *a5@&amp;lt;X8&amp;gt;)
{
  ...
  _X19 = a5;
  // 1. 获取全局预设字典
  result = GetCTPresetFallbacksDictionary();
  v11 = result;
  // 2. 创建有序的语言列表
  v12 = CreateOrderedLanguages(v6);
  // 3. 使用字体名 a1 在预设字典中查找
  v13 = CFDictionaryGetValue(v11, v8);
  // 4. 如果找到匹配项，并且它是一个数组，则开始处理
  if ( v13 &amp;amp;&amp;amp; (v15 = v13, v16 = CFGetTypeID(v13), v16 == CFArrayGetTypeID()) )
  {
    // 创建一个可变数组用于存放结果
    v37 = CFArrayCreateMutable(*(_QWORD *)kCFAllocatorDefault_ptr, 0LL, kCFTypeArrayCallBacks_ptr);
    v17 = CFArrayGetCount(v15);
    if ( v17 )
    {
      // 5. 遍历预设数组中的每一项
      do
      {
        v20 = (__CFString *)CFArrayGetValueAtIndex(v15, v19);
        v21 = CFGetTypeID(v20);
				// 5a. 如果是字典类型，说明是按语言区分的后备字体
        if ( v21 == CFDictionaryGetTypeID() )
        {
          // 遍历上面构建的语言列表，在字典中查找匹配的后备字体
          do
          {
            v25 = CFArrayGetValueAtIndex(v12, v24);
            if ( v20 )
            {
              v26 = CFDictionaryGetValue(v20, v25);
              if ( v26 )
                TDescriptorSource::AppendFontDescriptorFromName(&amp;amp;v37, v26, 1024LL);
            }
          }
          while ( v23 != v24 );
        }
        // 5b. 如果是字符串类型，直接作为后备字体名
        else
        {
          // ... 对Emoji等特殊字体进行处理 ...
          TDescriptorSource::AppendFontDescriptorFromName(&amp;amp;v37, v20, 1024LL);
        }
        ++v19;
      }
      while ( v19 != v18 );
    }
  }
  // 将最终结果写入输出指针并返回
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码注释已经比较清晰，总结下来解析流程是：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）通过字体名从全局预设列表中查询Fallback数组&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如我们通过&lt;code class=&quot;highlighter-rouge&quot;&gt;.SFUI-Regular&lt;/code&gt;查询到的原始Fallback数组如下：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.SFUI-Regular&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleSystemFallback-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleColorEmojiUI&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.SFGeorgian-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;HelveticaNeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleSymbolsFB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleArabicFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;如果系统语言是阿拉伯语(ar)，则使用此字体&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ur&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleUrduFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;如果是乌尔都语(ur)，则使用此字体&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleJapaneseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;如果是日语(ja)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleKoreanFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;如果是韩语(ko)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotoSansMyanmar-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-Qaag&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotoSansZawgyi-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-HK&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleHongKongChineseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;香港繁体中文&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-Hans&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleSimplifiedChineseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;简体中文&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-Hant&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleTraditionalChineseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;台湾繁体中文&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-MO&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleMacaoChineseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	  	&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2）遍历Fallback数组，如果是字典类型，需要按语言区分Fallback字体&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;还记得最初&lt;code class=&quot;highlighter-rouge&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/code&gt;的函数签名中，第二个参数支持传语言列表：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;languagePrefList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;系统会通过&lt;code class=&quot;highlighter-rouge&quot;&gt;CreateOrderedLanguages&lt;/code&gt;创建一个有序的语言数组，具体做法是将调用者想要的语言（languagePrefList）、App自身想要的语言、以及用户在整个系统中设置的语言偏好合并成一个有序的语言数组。&lt;/p&gt;

&lt;p&gt;然后遍历语言数组，从字典中筛选出对应语言的Fallback字体添加到结果中。&lt;/p&gt;

&lt;p&gt;从这里可以看出，&lt;strong&gt;同一字体的Fallback列表，还会受语言影响&lt;/strong&gt;，比如：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;zh-Hans&lt;/th&gt;
      &lt;th&gt;zh-HK&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/FontFallback/zh-Hans.png&quot; alt=&quot;zh-Hans&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/FontFallback/zh-HK.png&quot; alt=&quot;zh-HK&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;Q：为什么Fallback字体还跟语言设置相关?&lt;/p&gt;

  &lt;p&gt;参考&lt;a href=&quot;https://mp.weixin.qq.com/s/fcL6if52qYQUTChEjntHJg&quot;&gt;自定义文字排版引擎的原理&lt;/a&gt;一文中针对「相同Script的字符如果使用了不同的Font，会有什么问题」的回答&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;3）遍历Fallback数组，如果是字符串类型，「直接」作为Fallback字体&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;「直接」加引号，因为还会处理Emoji字体等特殊情况。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4）Fallback数组遍历完成之后，构建完成该字体最终的预设Fallabck列表/级联列表&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;42-preset-fallbacks小结&quot;&gt;4.2 Preset Fallbacks小结&lt;/h2&gt;

&lt;p&gt;总结下Preset Fallbacks流程：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）系统从全局常量CTPresetFallbacks中读取预设列表&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）根据用户指定主字体名从全局预设列表中查询Fallback数组&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3）遍历Fallback数组，如果为字典类型，根据用户指定语言、App偏好语言、系统设置偏好语言来选择Fallback字体&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4）遍历Fallback数组，如果为字符串类型，「直接」作为Fallback字体&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5）Fallback数组遍历完后，对应字体的级联列表构建完成&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;五system-default-fallbacks&quot;&gt;五、System Default Fallbacks&lt;/h1&gt;

&lt;p&gt;如果系统预设Fallback没有查到结果，则会兜底到系统默认Fallback逻辑，为字体动态构建级联列表。&lt;/p&gt;

&lt;h2 id=&quot;51-cssfamily分类&quot;&gt;5.1 CSSFamily分类&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;__int64 __usercall TBaseFont::CreateFallbacks@&amp;lt;X0&amp;gt;(__int64 result@&amp;lt;X0&amp;gt;, __int64 a2@&amp;lt;X1&amp;gt;, __int64 a3@&amp;lt;X2&amp;gt;, __int64 a4@&amp;lt;X3&amp;gt;, __int64 a5@&amp;lt;X4&amp;gt;, _QWORD *a6@&amp;lt;X8&amp;gt;)
{
  ...
  // 如果预设字体回退为空，创建系统默认字体回退
  v27 = TBaseFont::GetCSSFamily(v9);
  _X23 = &amp;amp;v34;

  // 创建系统默认字体回退列表
  _X0 = TBaseFont::CreateSystemDefaultFallbacks((__int64)v9, v27, v7, v8, &amp;amp;v34);
  ...
  return result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;系统默认Fallback，会先通过&lt;code class=&quot;highlighter-rouge&quot;&gt;TBaseFont::GetCSSFamily&lt;/code&gt;将用户指定主字体分类，这是后续查表的关键；GetCSSFamily会读取字体特征进行分类，主要分为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sans-serif&lt;/code&gt; (无衬线体)&lt;/strong&gt;：字体笔画的末端没有额外的装饰性“脚”，如Helvetica、Arial、San Francisco (SF Pro)、PingFang SC (苹方)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;serif&lt;/code&gt; (衬线体)&lt;/strong&gt;：字体笔画的末端有装饰性的“脚”（衬线），如Times New Roman、Georgia、New York、宋体&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;monospace&lt;/code&gt; (等宽体)&lt;/strong&gt;：所有字符占据相同的宽度，如Menlo、Courier、Monaco、SF Mono&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cursive&lt;/code&gt; (手写体)&lt;/strong&gt;：如Snell Roundhand&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fantasy&lt;/code&gt; (装饰体)&lt;/strong&gt;：如Papyrus&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除此外，苹果在UI上下文中，还有几个扩展的CSSFamily分类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ui-serif&lt;/code&gt;&lt;/strong&gt;：用于 UI 的衬线字体，主要指 &lt;code class=&quot;highlighter-rouge&quot;&gt;New York&lt;/code&gt; 家族&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ui-sans-serif&lt;/code&gt;&lt;/strong&gt;：用于 UI 的无衬线字体，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;San Francisco&lt;/code&gt; 家族&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ui-monospace&lt;/code&gt;&lt;/strong&gt;：用于 UI 的等宽字体，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;SF Mono&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ui-rounded&lt;/code&gt;&lt;/strong&gt;：用于 UI 的圆体字体。如 &lt;code class=&quot;highlighter-rouge&quot;&gt;SF Pro Rounded&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;SF Compact Rounded&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;52-获取系统默认fallback列表kdefaultfontfallbacks&quot;&gt;5.2 获取系统默认Fallback列表kDefaultFontFallbacks&lt;/h2&gt;

&lt;p&gt;和全局预设列表一样，系统默认Fallback列表也是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;GSFontCacheGetData&lt;/code&gt;读取配置文件。&lt;/p&gt;

&lt;p&gt;调用链路是：&lt;code class=&quot;highlighter-rouge&quot;&gt;CreateSystemDefaultFallbacks -&amp;gt; CopyDefaultSubstitutionListForLanguages -&amp;gt; CopyFontFallbacksForLanguages -&amp;gt; CopyFontFallbacks -&amp;gt; CopyDefaultFontFallbacks -&amp;gt; GSFontCacheGetData&lt;/code&gt;；通过GSFontCacheGetData读取系统默认Fallback列表时，入参是&lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultFontFallbacks.plist&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/FontFallback/DefaultFontFallbacks.plist.png&quot; alt=&quot;DefaultFontFallbacks.plist&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也是从一个全局常量&lt;code class=&quot;highlighter-rouge&quot;&gt;kDefaultFontFallbacks&lt;/code&gt;中获取的，内容如下：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;cursive&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;fantasy&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;monospace&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sans-serif&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;AppleColorEmoji&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleSymbolsFB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;GeezaPro;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HiraginoSans-W3&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AppleSDGothicNeo-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotoSansMyanmar-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-Qaag&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotoSansZawgyi-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ur&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;NotoNastaliqUrdu;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-HK&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PingFangHK-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-Hans&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PingFangSC-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-Hant&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PingFangTC-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-MO&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PingFangMO-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Thonburi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ArialHebrew&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;serif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ui-monospace&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ui-rounded&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ui-serif&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultFontFallbacks.plist&lt;/code&gt;的格式基本和&lt;code class=&quot;highlighter-rouge&quot;&gt;CTPresetFallbacks.plist&lt;/code&gt;类似，也是KV结构，Value部分也分为字符串和字典类型，字典类型也会根据用户指定语言来择优选取。&lt;/p&gt;

&lt;h2 id=&quot;53-解析并缓存系统默认fallback列表&quot;&gt;5.3 解析并缓存系统默认Fallback列表&lt;/h2&gt;

&lt;p&gt;解析和缓存逻辑主要由&lt;code class=&quot;highlighter-rouge&quot;&gt;CopyFontFallbacks&lt;/code&gt;处理，主逻辑如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;/**
 * CoreText 字体回退 - 复制字体回退列表函数
 * 功能: 根据字体描述符和语言信息复制相应的字体回退列表
 * 
 * 参数:
 *   a1 (_QWORD *): 输出参数指针，用于接收生成的字体回退数组
 *   a2 (__int64): 字体描述符对象指针
 *   a3 (__CFString *): 主要语言代码字符串
 *   a4 (__CFString *): 次要语言代码字符串（可选）
 *   a5 (__int64): 语言数组指针（可选）
 * 
 * 返回值:
 *   __int64: 操作结果
 */
__int64 __fastcall TFontFallbacks::CopyFontFallbacks(_QWORD *a1, __int64 a2, __CFString *a3, __CFString *a4, __int64 a5)
{
	...
  // 保存参数到局部变量和寄存器
  _X22 = a5;  // 语言数组指针
  v6 = a4;    // 次要语言代码
  v7 = a3;    // 主要语言代码
  v8 = a2;    // 字体描述符对象
  v9 = a1;    // 输出参数指针
  // 先在Font实例成员变量字典中查找Fallback缓存
  v16 = CFDictionaryGetValue(_X0, a3);
  ...
  // 如果没有找到缓存，则动态构建
  if ( !_X9 )
  {
  	...
    // 获取系统默认Fallback列表
    CopyDefaultFontFallbacks();
    v22 = objc_retain(_X0);
    if ( v22 )
    {
      // 用cssfamliy从系统默认Fallback列表中查找映射
      v24 = CFDictionaryGetValue(v22, v6);      
      // 检查是否找到了有效的字体列表
      if ( v24 &amp;amp;&amp;amp; CFArrayGetCount(v24) &amp;gt;= 1 )
      {
      	...
      	// 解析列表
        // 根据用户指定语言、App偏好语言、系统设置偏好语言创建有序语言数组
        v29 = CreateOrderedLanguages(_X22);
        // 处理字体回退列表
        TDescriptorSource::ProcessFallbackList(v24, (__int64)&amp;amp;v59, v31, v29);

        // 解析通用（common）字体回退列表
        v34 = CFDictionaryGetValue(_X25, &amp;amp;stru_1F69C8);
        TDescriptorSource::ProcessFallbackList(v36, (__int64)&amp;amp;v59, v31, v29);

				// 缓存结果到Font实例
        v44 = objc_retain(_X0);
        if ( v44 )
        {
        	...
        	CFDictionarySetValue(_X0, v7, _X2);
        }
      }
    }
  // 处理特定语言的回退逻辑
  ...
  return objc_release(v57);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意CopyFontFallbacks中一共调了两次ProcessFallbackList，逻辑是先取对应CSSFamily的（比如sans-serif）Fallback列表，再取common的Fallback列表，最终将二者合并起来作为对应字体的Fallback结果。&lt;/p&gt;

&lt;p&gt;ProcessFallbackList解析字体列表的逻辑和预设Fallback类似，也是根据Value是字符串类型还是字典类型来区分解析，此处不再赘述。&lt;/p&gt;

&lt;p&gt;最后，CopyFontFallbacks还会将Fallback结果缓存到Font实例的字典变量中，key是&lt;code class=&quot;highlighter-rouge&quot;&gt;cssfamily + languages&lt;/code&gt;（逗号分隔开），比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;sans-serif,zh-HK&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/FontFallback/CopyFontFallbacks.png&quot; alt=&quot;CopyFontFallbacks&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CopyFontFallbacks逻辑比较清晰，总结下来是：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）先从Font实例中获取Fallback缓存，如果已经构建过则直接使用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）缓存获取失败，走动态构建，将对应CSSFamily的Fallback列表和common的Fallback列表合并成最终Fallback结果&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3）缓存Fallback结果到Font实例，key是&lt;code class=&quot;highlighter-rouge&quot;&gt;cssfamily + languages&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;54-语言处理与线程安全&quot;&gt;5.4 语言处理与线程安全&lt;/h2&gt;

&lt;p&gt;CopyFontFallbacksForLanguages在调用CopyFontFallbacks之前，会对用户指定的语言（即&lt;code class=&quot;highlighter-rouge&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;languagePrefList&lt;/code&gt;参数）进行处理：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;__int64 __usercall TFontFallbacks::CopyFontFallbacksForLanguages@&amp;lt;X0&amp;gt;(__int64 a1@&amp;lt;X0&amp;gt;, __int64 a2@&amp;lt;X1&amp;gt;, __int64 a3@&amp;lt;X2&amp;gt;, __int64 a4@&amp;lt;X8&amp;gt;)
{
  // 如果没有提供语言数组，直接调用单语言版本
  if ( !a3 )
    return TFontFallbacks::CopyFontFallbacks((_QWORD *)a4, a1, (__CFString *)a2, 0LL, 0LL);
	...
  // 获取系统有序语言数组
  v7 = GetOrderedLanguages;
  // 遍历输入的语言代码数组
  do
  {
    // 检查规范化后的语言代码是否在系统支持的语言列表中
    __asm { LDAPR           X3, [X22], [X22] }
    if ( (unsigned int)CFArrayContainsValue(v7, 0LL, v8, _X3) )
    {
      // 如果支持，添加到有效语言数组中
      CFArrayAppendValue(v6, v21);

    }
    ++v12;
  }
  while ( v11 != v12 );
  ...
  // 如果找到了有效的语言代码
  if ( CFArrayGetCount(v6) )
  {
      TFontFallbacks::CopyFontFallbacks(v24, v25, _X2, v4, v6);
  }
  else
  {
    // 如果没有找到有效语言，使用单语言版本
    TFontFallbacks::CopyFontFallbacks(v24, v25, v4, 0LL, 0LL);
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大致逻辑是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;languagePrefList&lt;/code&gt;传nil（注意空数组不算nil），则直接用cssfamily查询CopyFontFallbacks&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;languagePrefList&lt;/code&gt;不为nil，会将用户指定的languages通过GetOrderedLanguages过滤一遍，去除系统不支持的language，然后使用cssfamily + languages查询CopyFontFallbacks&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外，&lt;code class=&quot;highlighter-rouge&quot;&gt;CopyFontFallbacks&lt;/code&gt;会有对字典的读写操作，为了线程安全，CopyDefaultSubstitutionListForLanguages会对整个流程加一把大锁：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;__int64 __usercall TDescriptorSource::CopyDefaultSubstitutionListForLanguages@&amp;lt;X0&amp;gt;(__int64 a1@&amp;lt;X0&amp;gt;, __int64 a2@&amp;lt;X1&amp;gt;, __int64 a3@&amp;lt;X8&amp;gt;)
{
  TDescriptorSource *v6; // 锁对象指针
  // 这个锁确保字体回退缓存的线程安全访问
  v6 = (TDescriptorSource *)os_unfair_lock_lock_with_options(&amp;amp;TDescriptorSource::sFontFallbacksLock, 327680LL);
  ...
  TFontFallbacks::CopyFontFallbacksForLanguages(TDescriptorSource::sFontFallbacksCache, v4, v3, v5);
  // 释放字体回退缓存锁并返回
  return os_unfair_lock_unlock(&amp;amp;TDescriptorSource::sFontFallbacksLock);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;55-结果处理与返回&quot;&gt;5.5 结果处理与返回&lt;/h2&gt;

&lt;p&gt;最后&lt;code class=&quot;highlighter-rouge&quot;&gt;CreateSystemDefaultFallbacks&lt;/code&gt;会对&lt;code class=&quot;highlighter-rouge&quot;&gt;CopyDefaultSubstitutionListForLanguages&lt;/code&gt;中获取到的字体描述符进行处理，即排除用户指定字体，防止自己Fallback自己。&lt;/p&gt;

&lt;h1 id=&quot;六总结&quot;&gt;六、总结&lt;/h1&gt;

&lt;p&gt;至此，我们通过逆向的手段梳理完了&lt;code class=&quot;highlighter-rouge&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/code&gt;的完整流程，最后整理下结论如下：&lt;/p&gt;

&lt;p&gt;整体分为两个大流程：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、Preset Fallbacks：预设Fallback&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.1 系统从全局常量CTPresetFallbacks中读取预设列表&lt;/p&gt;

&lt;p&gt;1.2 根据用户指定主字体名从全局预设列表中查询Fallback数组&lt;/p&gt;

&lt;p&gt;1.3 遍历Fallback数组，如果为字典类型，根据用户指定语言、App偏好语言、系统设置偏好语言来选择Fallback字体&lt;/p&gt;

&lt;p&gt;1.4 遍历Fallback数组，如果为字符串类型，「直接」作为Fallback字体&lt;/p&gt;

&lt;p&gt;1.5 Fallback数组遍历完后，对应字体的级联列表构建完成&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、System Default Fallbacks：系统默认Fallback&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.1 获取主字体的CSSFamily分类&lt;/p&gt;

&lt;p&gt;1.2 从全局常量kDefaultFontFallbacks中读取默认Fallback列表&lt;/p&gt;

&lt;p&gt;1.3 用&lt;code class=&quot;highlighter-rouge&quot;&gt;cssfamily + languages&lt;/code&gt;从字体实例中获取Fallback缓存，如果已经构建则直接使用&lt;/p&gt;

&lt;p&gt;1.4 缓存缺失则动态构建，根据CSSFamily获取对应字体的Fallback列表并解析，获取common类型的Fallback列表并解析，合并二者结果作为最终Fallback结果&lt;/p&gt;

&lt;p&gt;1.5 用&lt;code class=&quot;highlighter-rouge&quot;&gt;cssfamily + languages&lt;/code&gt;将Fallback结果缓存到Font实例&lt;/p&gt;

&lt;p&gt;1.6 处理并返回Fallback结果&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Oct 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/10/03/CoreText-Font-Fallback/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/10/03/CoreText-Font-Fallback/</guid>
        
        <category>跨端渲染</category>
        
        <category>Font</category>
        
        
      </item>
    
      <item>
        <title>从0到1自定义文字排版引擎：原理篇</title>
        <description>&lt;h1 id=&quot;引言&quot;&gt;引言&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;前面我们讲解了&lt;a href=&quot;https://mp.weixin.qq.com/s/EYPO3sSjtIstD3RmlRCs9w&quot;&gt;字符与编码&lt;/a&gt;，知道了Character与Unicode的关系和区别，也介绍了&lt;a href=&quot;https://mp.weixin.qq.com/s/96YJGYKLoxENC4qT9tYNoQ&quot;&gt;字符（Character）、字形（Glyph）、字体的区别&lt;/a&gt;，并通过实际解析一个Font文件，真正了解到了&lt;a href=&quot;https://mp.weixin.qq.com/s/D0A8HAQaQNart7KAdWXyJg&quot;&gt;Font文件中有什么&lt;/a&gt;；如果你对这些概念还熟悉，推荐先阅读前面几篇文章打好基础。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;作为程序员，日常和文本打交道肯定最多，不知道你是否深入想过这样一个问题：&lt;/p&gt;

&lt;p&gt;一段中英日等多国混排的文字，系统（排版引擎）是如何知道怎么排布每个文字的，特别是不同国家的语言排版规则不同，比如中文、英文是从左向右排列，阿拉伯文是从右向左排列的；阿拉伯文会有连字（ligature），中文没有连字；更细节的，为了增强文本的可读性和美观性，系统一般还会将文字紧凑处理（kerning）、连字处理（ligature）等，排版引擎在其中到底做了哪些事情，每一步的基本原理又是怎么样的，本文将带你逐步揭开排版引擎的神秘面纱。&lt;/p&gt;

&lt;p&gt;通过本文，或许你也能自定义一个文字排版引擎了。&lt;/p&gt;

&lt;h1 id=&quot;一文本预处理unicode归一化&quot;&gt;一、文本预处理/Unicode归一化&lt;/h1&gt;

&lt;p&gt;在&lt;a href=&quot;https://mp.weixin.qq.com/s/EYPO3sSjtIstD3RmlRCs9w&quot;&gt;字符与编码&lt;/a&gt;一文中，我们知道同一个字符可能对应多个code point，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;👨‍👩‍👧&lt;/code&gt;对应&lt;code class=&quot;highlighter-rouge&quot;&gt;U+1F468 + U+200D + U+1F469 + U+200D + U+1F467&lt;/code&gt; ；甚至Unicode为了兼容历史编码，也允许一个字符有多种表示方法，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;可以表示为：单一code point（U+00E9），组合code point（&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0065 + U+0301&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;预处理就是保证字符串在进行排版/字形选择（shaping）之前是稳定、唯一、可预测的，避免因为 Unicode 的多种表示方法导致排版不一致，比如避免&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;被分开成&lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;́&lt;/code&gt;排版渲染。&lt;/p&gt;

&lt;p&gt;预处理一般步骤是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;编码转换&lt;/strong&gt;：将字符统一成UTF-32编码&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;规范化（Normalization）&lt;/strong&gt;：NFC/NFD/NFKC/NFKD等，Web 标准和绝大多数现代系统都默认使用NFC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Q：NFC/NFD/NFKC/NFKD是什么&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这些是Unicode标准里定义的几种规范化形式，区别是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/文字排版引擎/归一化标准.png&quot; alt=&quot;归一化标准&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;二分段&quot;&gt;二、分段&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;为什么要分段：不同国家、语言的排版规则不同，比如阿拉伯文有连字、中文没有，阿拉伯文从右到左排，中文从左往右排，分段之后方便后续的字体选择和shaping，比如HarfBuzz 这样的 shaping 引擎一次只能处理一个 Script run&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;分段就是把字符串按 Unicode Script (Latin, Han, Hiragana, Katakana 等) 划分成 run（分组）。&lt;/p&gt;

&lt;p&gt;原理比较简单，Unicode 为每个 code point 定义了一个 Script 属性，遍历字符串，按 Script 属性连续分段即可。&lt;/p&gt;

&lt;p&gt;比如对于&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello世界あい&lt;/code&gt;，从左往右扫描字符串，每遇到 Script 改变，就切分出一个 run，最后会被划分成：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt;” → Latin&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;世界&lt;/code&gt; → Han&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;あい&lt;/code&gt; → Hiragana&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;特殊情况：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有些字符的 Script = Common（标点、数字、空格）或 Inherited（音调符号、声调标记），这些字符分段时需要特殊处理，规则一般是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果是 Common → 继承相邻 run 的 Script（如果左右run都有Script，一般跟随左边；如果左边没有run，比如开头就是空格，那就跟随右边；如果左右都没有run，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;!!!&lt;/code&gt;，那整体就是一个Common run）。&lt;/li&gt;
  &lt;li&gt;如果是 Inherited → 附着到前一个 base 字符的 Script。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;世界!&lt;/code&gt; → “世界” (Han) + “!” (也归 Han run)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt; (e + 重音符) → 整体算 Latin&lt;/p&gt;

&lt;h1 id=&quot;三双向文本处理bidi&quot;&gt;三、双向文本处理（BiDi）&lt;/h1&gt;

&lt;p&gt;BiDi就是将字符从&lt;strong&gt;逻辑顺序&lt;/strong&gt;处理成&lt;strong&gt;视觉顺序&lt;/strong&gt;，计算机里字符串总是按逻辑顺序存储（用户输入顺序），但在渲染时，不同语言有不同的书写方向，比如中文、英文从左往右排列，阿拉伯文、希伯来文从右往左排列，如果一段文本中既有中文、英文，又有阿拉伯文、希伯来文，那还得处理混排时的顺序，BiDi就是处理混排情况下文本的实际显示顺序的。&lt;/p&gt;

&lt;p&gt;在后续的例子中，为了方便演示，我们假设以小写字母作为LTR，以大写字母作为RTL，比如：&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;abc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ABC&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：表示&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;LTR&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（从左往右排）书写方向&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;ABC&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：表示&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;RTL&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（从右往左排）书写方向&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unicode有一套完整的BiDi算法（细节可&lt;a href=&quot;https://www.unicode.org/reports/tr9/&quot;&gt;参考链接&lt;/a&gt;），在介绍原理之前需要先了解几个基本概念：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）字符类型（Character Types）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unicode给每个code point定义了一个Bidi_Class的属性（Unicode的方向属性）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt; = Left-to-Right（中文、英文…）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; = Right-to-Left（希伯来文）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AL&lt;/code&gt; = Arabic Letter（阿拉伯文）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EN&lt;/code&gt; = European Number（欧洲数字）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AN&lt;/code&gt; = Arabic Number（阿拉伯数字）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ON&lt;/code&gt; = Other Neutral（标点符号）&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些方向属性会有一个隐含的分类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;强类型&lt;/strong&gt;：这类字符具有明确的方向性，如英文字母是从左往右（LTR），阿拉伯文是从右往左（RLT）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;弱类型&lt;/strong&gt;：这类字符方向性不明确，比如数字和一些符号（如出现在数字之间的符号&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;、 &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;等），比如阿拉伯数字&lt;code class=&quot;highlighter-rouge&quot;&gt;123&lt;/code&gt;，&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;中性类型&lt;/strong&gt;：这类字符完全没有方向性，如空格、标点符号（&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;、 &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;、 &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;等），它们的方向完全由周围的强类型字符决定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/文字排版引擎/BiDi_Class.png&quot; alt=&quot;BiDi_Class&quot; /&gt;&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 如下为计算机中存储的逻辑顺序&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;abc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ABC&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;WS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2）段落基本方向（Base Direction）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在没有明确指定段落方向时，会采用默认规则来确定段落基本方向，即选择段落中&lt;strong&gt;第一个强类型字符&lt;/strong&gt;的方向作为段落基本方向，段落开头的弱/中性字符会被忽略，直到遇到第一个强类型字符；如果整段都没有强类型字符，则默认LTR。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 如下为计算机中存储的逻辑顺序&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// case-1&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;abc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ABC&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;WS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;段落方向为&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;LTR&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;case-2&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;123abc&quot;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;EN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;EN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;EN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;段落方向为&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;LTR&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;case-3&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;123&quot;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;EN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;EN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;EN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;段落方向为默认&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;LTR&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;段落基本方向主要有三个作用：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;确定初始的嵌套等级（见下），如果基本方向为LTR，则嵌套等级从0开始；如果基本方向为RTL，则嵌套等级从1开始&lt;/li&gt;
  &lt;li&gt;决定中性字符的方向，如果中性字符左右都没有强类型字符，那就会跟随段落方向，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello !&lt;/code&gt;中&lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;会跟随段落方向LTR&lt;/li&gt;
  &lt;li&gt;决定段落中文档流方向，如果基本方向为LTR，文本将从容器左侧开始向右排；如果基本方向为RTL，文本将从容器右侧开始向左排&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3）嵌套等级（Embedding Levels）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;BiDi算法中用偶数等级（0, 2, 4…）代表LTR方向，奇数等级（1, 3, 5…）代表RTL方向；如前所述，段落基本方向决定了初始的嵌套等级（0级为LTR，1级为RTL），当文本中出现方向变化时，算法会相应地提升嵌套等级。&lt;/p&gt;

&lt;p&gt;从段落初始等级开始，当遇到方向变化时，就提升一个等级；对于强类型字符等级比较容易确定，对于弱类型与中性类型字符则需要结合上下文来共同确定。&lt;/p&gt;

&lt;p&gt;对于弱类型字符：比如AN/EN数字及其之间的标点符号，这些字符即使在 RTL 文本中也通常按 LTR 书写。&lt;/p&gt;

&lt;p&gt;对于中性字符：假设中性字符&lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;左右字符（逻辑顺序）分别为&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;如果b、d都为强类型字符，且&lt;code class=&quot;highlighter-rouge&quot;&gt;direction(b) = direction(d) = D&lt;/code&gt;，则&lt;code class=&quot;highlighter-rouge&quot;&gt;direction(c) = D&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;如果b是强类型字符，且&lt;code class=&quot;highlighter-rouge&quot;&gt;direction(b) = RTL&lt;/code&gt;，且d是AN或EN，则&lt;code class=&quot;highlighter-rouge&quot;&gt;direction(c) = RTL&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;如果b是AN或EN，且d是强类型字符，且&lt;code class=&quot;highlighter-rouge&quot;&gt;direction(d) = RTL&lt;/code&gt;，则&lt;code class=&quot;highlighter-rouge&quot;&gt;direction(c) = RTL&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;如果b是AN或EN，且d是AN或EN，则&lt;code class=&quot;highlighter-rouge&quot;&gt;direction(c) = RTL&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;否则&lt;code class=&quot;highlighter-rouge&quot;&gt;direction(c) = direction(EL(c))&lt;/code&gt;（即其嵌套级别的方向，如果没有控制符明确限制则为段落基本方向）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 段落基本方向是LTR，初始等级0&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;逻辑顺序：&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;means&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;CAR&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;嵌套等级：&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;00000000001110&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;解释：&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;CAR&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;为&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;RTL&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，方向变化所以从&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;提升到&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;；中性字符&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;在段落首尾时遵循&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;段落基本方向是&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;RTL&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，初始等级&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;逻辑顺序：&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;CAR&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;means&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;嵌套等级：&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;11112222222221&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;解释：第一个空格左右分别时&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;RTL&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;和&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;LTR&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，会遵循段落方向；第二个空格左右都是&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;LTR&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，被提升为&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;LTR&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Q：为什么需要2、3、4等更高等级的嵌套呢？&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unicode中有一些嵌套控制符，可以显示提升嵌套等级，比如LRE（U+202A），RLE（U+202B）等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/文字排版引擎/嵌套控制符.png&quot; alt=&quot;嵌套控制符&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BiDi算法会从最高嵌套等级逐级反转字符，如果没有多级嵌套，遇到复杂结构时（比如 RTL 内嵌 LTR，再内嵌数字），就无法只反转某一层而保持其他层次稳定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;理解上面概念后，我们来简述BiDi算法的基本过程：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）分段并确定段落基本方向&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;BiDi算法是针对段落生效的，拿到一篇文档后，需要先将文档拆分成段落，并为段落确定基本方向。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）为每个字符分配嵌套等级&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3）在奇数层做镜像字符替换&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在奇数级别（即 RTL 层级）中，对称字符（如括号、尖括号、引号等）要“镜像”替换。&lt;/p&gt;

&lt;p&gt;例如在 RTL 层中，一个 “(” 应该显示为 “)”，一个 “)” 应该显示为 “(”。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4）阿拉伯连字处理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;用一个新字符替换相邻的阿拉伯字符，并确定每个阿拉伯字符的位置和形状。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5）按嵌入级别反转子串以生成视觉顺序&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对每行（line）分别处理（因为段落可能跨多行），假设最高嵌套等级为&lt;code class=&quot;highlighter-rouge&quot;&gt;EL_h&lt;/code&gt;，&lt;strong&gt;最低奇数级别&lt;/strong&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;EL_l&lt;/code&gt;，从EL_h递减到EL_l，在每一级别就地反转子串&lt;/p&gt;

&lt;p&gt;递归处理完后，由高层级到低层级反转嵌套子串，就能得到最终每行的视觉顺序。&lt;/p&gt;

&lt;p&gt;详细逻辑可以参考：https://cs.uwaterloo.ca/~dberry/ATEP/Slides/UnicodeBiDiAlgorithm.pdf&lt;/p&gt;

&lt;p&gt;下面以几个例子说明：&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// case-1&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;逻辑顺序：&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;means&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CAR&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.
段落等级：&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（第一个强字符为&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LTR&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，所以段落等级为&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）
嵌套等级：&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;00000000001110&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
反转&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;means&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RAC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;case-2&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;逻辑顺序：&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MEANS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;段落等级：&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RLT&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;开启一个新的嵌套等级，嵌套等级提升到&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，段落等级为&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;；&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PDF&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;为表示嵌套终止）&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;嵌套等级：&lt;/span&gt;     &lt;span class=&quot;m&quot;&gt;22211111111111&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;反转&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rac&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MEANS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;反转&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RAC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SNAEM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;case-3&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;逻辑顺序：&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;he&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;said&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[RLE]car MEANS CAR[PDF].&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;段落等级：&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;嵌套等级：&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;000000000&lt;/span&gt;     &lt;span class=&quot;m&quot;&gt;2221111111111&lt;/span&gt;     &lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;反转&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;he&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;said&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rac MEANS CAR.&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;反转&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;he&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;said&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;RAC SNAEM car.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;四字体匹配与fallback&quot;&gt;四、字体匹配与Fallback&lt;/h1&gt;

&lt;p&gt;字体匹配与Fallback是一个复杂的过程，我们后续的塑形与测量都依赖字体文件。&lt;/p&gt;

&lt;p&gt;由于任何一个字体都不可能覆盖 Unicode 的所有字符，比如：Times New Roman 渲染拉丁字母没问题，但遇到中文 “你” 就会变成“豆腐块”（小方块：是操作系统在没找到合适字体来显示字符时，会兜底到占位符，比如☐或�等）；所以排版系统实际要做的就是：确保每个字符都有合适的字体来渲染，同时尽量保持风格一致。&lt;/p&gt;

&lt;p&gt;每个字符都有对应的code point，在&lt;a href=&quot;https://mp.weixin.qq.com/s/D0A8HAQaQNart7KAdWXyJg&quot;&gt;Font文件中有什么&lt;/a&gt;一文中，我们知道了字体文件中有各种各样的表，其中cmap表存储了code point与glyphID的映射，通过cmap表我们可以精确的查到该Font是否支持某个code point，但是仅通过cmap查询是不够的，主要有两个原因：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;操作系统一般安装了成百上千种字体，如果对每个code point都去遍历所有Font的cmap表，那开销会非常大&lt;/li&gt;
  &lt;li&gt;不同Font支持的Unicode范围是有交集的，一个code point可能匹配出多个Font，为了渲染风格的统一，我们期望相同Script的字符尽量用同一种Font&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Q：相同Script的字符如果使用了不同的Font，会有什么问题&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unicode 为了节省码点空间，将许多中、日、韩来源相同但字形有细微差异的汉字合并到了同一个码点上，也就是所谓的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%B8%AD%E6%97%A5%E9%9F%93%E7%B5%B1%E4%B8%80%E8%A1%A8%E6%84%8F%E6%96%87%E5%AD%97&quot;&gt;中日韩统一表意文字&lt;/a&gt;（CJK Unified Ideographs）；如下，同一个code point在不同语言下样式不同，如果不处理Script，那可能会在一个日文段落里显示出中文的“房”字形，这在专业排版上是不可接受的。另外，不同的Font格设计风格（字宽、基线、形态）也不同，如果一个段落里穿插不同的Font，那最终排版看起来也会很奇怪。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/文字排版引擎/CJK Unifined.png&quot; alt=&quot;CJK Unifined&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现代操作系统做字体匹配与Fallback的方式一般是：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）通过前面的分段，将一段字符串按Script分成不同的run&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）检查用户指定的主字体是否支持&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;检查用户指定字体（主字体）的cmap是否支持对应字符（code point），如果支持则命中主字体，如果不支持则进入Fallback流程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3）Fallback时按OS_2表中的ulUnicodeRange掩码初步筛选支持的Unicode范围&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;注意OS_2表只是一个大概范围，并不代表完全支持该范围的Unicode，如果要精确查询是否支持还是要查cmap表。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4）通过&lt;code class=&quot;highlighter-rouge&quot;&gt;GSUB&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;GPOS&lt;/code&gt; 表精确查找支持哪些Script&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GSUB&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;GPOS&lt;/code&gt;中定义了&lt;code class=&quot;highlighter-rouge&quot;&gt;ScriptList&lt;/code&gt;，明确声明字体为哪些Script提供了shaping规则；排版引擎通过&lt;code class=&quot;highlighter-rouge&quot;&gt;GSUB&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;GPOS&lt;/code&gt;表来处理复杂的排版规则，比如字形替换、连字、上下标对齐等，排版引擎会优先选择明确支持对应Script的Font。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5）通过cmap表验证支持的code point&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果匹配出多个Fallback字体，那系统可能会根据用户设置的主字体风格，系统语言、字体优先级等来选择最优的字体。&lt;/p&gt;

&lt;p&gt;当然，操作系统中一般会对Script的Fallback字体表有缓存，上面的3、4步骤一般不用每次都做，Fallback表类似于：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hans&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Microsoft YaHei&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SimSun&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Source Han Sans SC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hant&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Microsoft JhengHei&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Source Han Sans TC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;latn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Arial&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Times New Roman&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Verdana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Microsoft YaHei&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Meiryo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Yu Gothic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Source Han Sans JP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;families&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Arial&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arial.ttf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bold&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arialbd.ttf&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们后续也会逆向探究下CoreText中的字体级联（Fallback）机制，更细节的这里不再展开。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Q：像&lt;code class=&quot;highlighter-rouge&quot;&gt;👨‍👩‍👧&lt;/code&gt;这种由多个code point组成的字符，是怎么匹配Font的&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;像&lt;code class=&quot;highlighter-rouge&quot;&gt;👨‍👩‍👧&lt;/code&gt;这种由多个code point组成的字符（如下），一般称之为Grapheme Cluster（字素簇）：&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;👨&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;1F468&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;MAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;200D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ZWJ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Zero&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Width&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;👩&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;1F469&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;WOMAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;200D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ZWJ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Zero&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Width&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;👧&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;1F467&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;GIRL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unicode Emoji 标准里规定了哪些序列可以组合成单个 emoji（如 👨‍👩‍👧、👩‍❤️‍👩 等），排版引擎会根据Emoji data（来自Unicode数据表）来判断这是不是一个合法的ZWJ Sequence，识别成功会将其视为一个不可分割的单元，在匹配字体时会做如下处理：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）用组合序列的第一个非ZWJ code point 去查找字体&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ZWJ：Zero Width Joiner，零宽度连接符，它的作用就像“胶水”，告诉排版引擎两侧字符不可分割。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于&lt;code class=&quot;highlighter-rouge&quot;&gt;👨‍👩‍👧&lt;/code&gt;来说，就是用 &lt;code class=&quot;highlighter-rouge&quot;&gt;U+1F468&lt;/code&gt; (👨)，去查找字体，查找和Fallback过程同上。一般而言会匹配到系统内置的彩色表情符号字体：macOS/iOS上一般是&lt;code class=&quot;highlighter-rouge&quot;&gt;Apple Color Emoji&lt;/code&gt;，Windows上是&lt;code class=&quot;highlighter-rouge&quot;&gt;Segoe UI Emoji&lt;/code&gt;，Android上一般是&lt;code class=&quot;highlighter-rouge&quot;&gt;Noto Color Emoji&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）用匹配的字体进行字形替换&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这一步其实发生在下面的塑性阶段，在查到的字体表中通过 GSUB表把多个 code point 映射成一个彩色的glyph，也就是字形替换。&lt;/p&gt;

&lt;p&gt;如果这一步没找到合法的可替换字形，那就Fallback到单独显示&lt;code class=&quot;highlighter-rouge&quot;&gt;👨 👩 👧&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;五字形选择与shaping&quot;&gt;五、字形选择与Shaping&lt;/h1&gt;

&lt;p&gt;这一步的目标是将抽象的字符转换成具体的glyphIDs和布局信息，以供下一步排版使用；输入是一段单一 Script、单一字体的文本 run和上面匹配出的字体，输出是一个字形序列，包括glyphIDs、x_advance、y_advance、x_offset、y_offset等。&lt;/p&gt;

&lt;p&gt;大致分为两步：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）code point映射到glyphID&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;每个code point会通过字体的cmap表映射成一个glyphID。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）文本塑形：应用GSUB、GPOS规则&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Shaping引擎会读取字体文件中的GSUB表，进行字形替换，比如连字，emoji替换等；读取GPOS表，调整字形的位置，比如上下标位置、字间距（kerning）、阿拉伯文的连写等。&lt;/p&gt;

&lt;h1 id=&quot;六测量与排版&quot;&gt;六、测量与排版&lt;/h1&gt;

&lt;p&gt;这一步的目标是将字形序列按自定义布局规则排版到二维坐标系下，简单讲就是确定每个glyph的位置、大小信息，以供下一步绘制使用。&lt;/p&gt;

&lt;p&gt;大致分为两步：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）获取字形的metrics&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;从字体文件的hhea/OS_2表中读取出每个glyph的ascent、descent等信息，用于确定baseline、lineHeight等信息。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）自定义布局确定每个glyph位置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;从上面得到的baseline、lineHeight等信息，以及第六步得到的advance宽度（glyph前进量）等，可以计算出每个glyph的宽高、对齐基线，这样我们就能像前端一样自定义文档流布局（Inline、Inline-Block、Block）来精确的排版每个glyph的位置。&lt;/p&gt;

&lt;h1 id=&quot;七渲染上屏&quot;&gt;七、渲染上屏&lt;/h1&gt;

&lt;p&gt;经过上面的塑形、排版过程，我们已经能得到按显示顺序排列且带有精确位置的glyph序列，绘制阶段就是将这些抽象的glyph序列上屏显示出来。&lt;/p&gt;

&lt;p&gt;这一步一般有软光栅、硬光栅等多种选型，在macOS/iOS上，可以通过CoreText来绘制字形序列，比如：&lt;a href=&quot;https://developer.apple.com/documentation/coretext/ctfontdrawglyphs(_:_:_:_:_:)&quot;&gt;CTFontDrawGlyphs&lt;/a&gt;；本文主要讲解排版引擎流程，渲染部分不再展开，后续有时间再单独开篇研究。&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;至此，我们自定义文字排版引擎的原理篇告一段落；相信通过以上讲解，我们对文字排版的流程有了一个大致了解，下一步我们将结合ICU、HarfBuzz等来实战实现一个小型的自定义文字排版引擎。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;更多精彩内容，欢迎关注🌍公众号：非专业程序员Ping&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 01 Oct 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/10/01/%E6%96%87%E5%AD%97%E6%8E%92%E7%89%88%E5%BC%95%E6%93%8E/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/10/01/%E6%96%87%E5%AD%97%E6%8E%92%E7%89%88%E5%BC%95%E6%93%8E/</guid>
        
        <category>跨端渲染</category>
        
        <category>Font</category>
        
        
      </item>
    
      <item>
        <title>一文读懂Font文件</title>
        <description>&lt;h1 id=&quot;一引言&quot;&gt;一、引言&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;在开始阅读本文之前，推荐先阅读&lt;a href=&quot;https://mp.weixin.qq.com/s/96YJGYKLoxENC4qT9tYNoQ&quot;&gt;字符（Character）、字形（Glyph）、字体的区别&lt;/a&gt;理解基本概念。&lt;/p&gt;

  &lt;p&gt;如果你对字符与Unicode的相关概念还不理解，推荐阅读&lt;a href=&quot;https://mp.weixin.qq.com/s/EYPO3sSjtIstD3RmlRCs9w&quot;&gt;字符与编码&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;前文，我们介绍了&lt;a href=&quot;https://mp.weixin.qq.com/s/96YJGYKLoxENC4qT9tYNoQ&quot;&gt;字符（Character）、字形（Glyph）、字体的区别&lt;/a&gt;，这里我们再来实际分析一个字体文件中到底有什么，这有利于我们后续理解文字排版引擎的工作原理和流程。&lt;/p&gt;

&lt;p&gt;macOS上系统字体路径一般为&lt;code class=&quot;highlighter-rouge&quot;&gt;/System/Library/Fonts/&lt;/code&gt;，可以看到有文件后缀有&lt;code class=&quot;highlighter-rouge&quot;&gt;ttc&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ttf&lt;/code&gt;，二者有什么区别呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）&lt;code class=&quot;highlighter-rouge&quot;&gt;.ttf&lt;/code&gt; (TrueType Font)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ttf&lt;/code&gt;表示这是一个单字体文件，每个 &lt;code class=&quot;highlighter-rouge&quot;&gt;.ttf&lt;/code&gt; 文件通常只对应一个字体样式（例如 &lt;em&gt;Microsoft YaHei Regular&lt;/em&gt;）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）&lt;code class=&quot;highlighter-rouge&quot;&gt;.ttc&lt;/code&gt; (TrueType Collection)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ttc&lt;/code&gt;表示这是一个字体集合文件，内部可以包含多个 TrueType 字体（多个 &lt;code class=&quot;highlighter-rouge&quot;&gt;.ttf&lt;/code&gt; 打包在一起），这些字体通常共享某些表（比如 glyph 轮廓、cmap），减少冗余，提高存储效率，常用于一个 Typeface 的多个变体（Regular, Bold, Italic, Light…）&lt;/p&gt;

&lt;p&gt;上面提到了TrueType，与之对应的还有OpenType，二者其实都是字体类型标准，简单理解就是OpenType是TrueType的扩展，OpenType支持更多的特性，比如：连字、RTL、上下标等。&lt;/p&gt;

&lt;p&gt;OpenType一般以&lt;code class=&quot;highlighter-rouge&quot;&gt;otf&lt;/code&gt;为后缀，但也不能简单的根据文件名后缀区分二者，文件扩展名只是习惯，并不能完全说明内部格式，真正的区别还是要看字体表结构，比如OpenType有GSUB、GPOS、GDEF等扩展表。&lt;/p&gt;

&lt;p&gt;下面，我们来真正解析一个字体文件，看里面有什么，可以通过如下命令行将字体解析成XML。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 对于ttf文件&lt;/span&gt;
ttx NewYork.ttf
&lt;span class=&quot;c&quot;&gt;# ttc文件是个字体集合，需要明确指明要提取哪个index的字体&lt;/span&gt;
ttx &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; 0 Times.ttc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;二font文件解析&quot;&gt;二、Font文件解析&lt;/h1&gt;

&lt;p&gt;我们以NewYork.ttf文件为例，如下是NewYork.ttf中的表&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/一文读懂Font文件/NewYork-ttf.png&quot; alt=&quot;NewYork-ttf&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;21-glyphorder&quot;&gt;2.1 GlyphOrder&lt;/h2&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;GlyphOrder&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;GlyphID&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.notdef&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;GlyphID&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.null&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;GlyphID&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nonmarkingreturn&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;GlyphID&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;space&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;GlyphID&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/GlyphOrder&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;GlyphOrder定义glyphID与glyphName的映射。&lt;/p&gt;

&lt;h2 id=&quot;22-head&quot;&gt;2.2 head&lt;/h2&gt;

&lt;p&gt;Font Header，存储一些全局信息；关注几个值：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;unitsPerEm&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2048&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;1）unitsPerEm&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;字体表里的数值一般都很大（见后文），其单位并不是像素值，而是 &lt;code class=&quot;highlighter-rouge&quot;&gt;em unit&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;unitsPerEm value=&quot;2048&quot;/&amp;gt;&lt;/code&gt;表示&lt;code class=&quot;highlighter-rouge&quot;&gt;2048 units = 1 em = 设计的字高&lt;/code&gt;，比如当字体在屏幕上以 16px 渲染时，1 em = 16px，其他数值可按比例换算&lt;/p&gt;

&lt;h2 id=&quot;23-hhea&quot;&gt;2.3 hhea&lt;/h2&gt;

&lt;p&gt;Horizontal Typesetting Header，横向排版信息，关注几个值&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;hhea&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- MacOS一般使用hhea里的ascent、descent；OS_2表里还有几个ascent、descent，一般在Windows或专业设计上使用 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ascent&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1950&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;descent&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-494&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;lineGap&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;advanceWidthMax&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2818&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;minLeftSideBearing&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-693&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;minRightSideBearing&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-693&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/hhea&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;1）ascent &amp;amp; descent&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;假设字体大小16，unitsPerEm如上为2048，则按比例换算：&lt;code class=&quot;highlighter-rouge&quot;&gt;ascent = 1950/2048 * 16 ≈ 15.2&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;descent ≈ 494/2048 * 16 ≈ 3.8&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;需要注意，OS_2表中也有ascent、descent的定义，这是因为不同平台会读取不同表中的ascent、descent，比如macOS、iOS一般使用hhea中的值，Windows一般使用OS_2表中的usWinAscent、usWinDescent，专业排版软件（如InDesign）一般用OS_2表中的sTypoAscender、sTypoDescender。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q：对于同一个Font，ascent、descent的值是固定的吗？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个问题的答案需要加定语，对于同一个Font，在同一个平台上，ascent、descent是固定的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q：为什么descent值是负数？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;可以理解成规范，TrueType/OpenType的规范里，descent是负数，表示基线（baseline）以下延伸的高度。&lt;/p&gt;

&lt;h2 id=&quot;24-maxp&quot;&gt;2.4 maxp&lt;/h2&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;maxp&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;numGlyphs&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1811&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maxp&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;定义字体里 glyph 的数量，以及一些最大值参数。&lt;/p&gt;

&lt;h2 id=&quot;25-os_2&quot;&gt;2.5 OS_2&lt;/h2&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;OS_2&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 下标的大小和偏移 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ySubscriptXSize&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;650&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ySubscriptYSize&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;600&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ySubscriptXOffset&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ySubscriptYOffset&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;75&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 上标的大小和偏移 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ySuperscriptXSize&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;650&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ySuperscriptYSize&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;600&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ySuperscriptXOffset&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ySuperscriptYOffset&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;350&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 删除线的粗细和垂直位置 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;yStrikeoutSize&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;yStrikeoutPosition&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;620&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 
  ulUnicodeRange表示字体支持的Unicode范围，用ulUnicodeRange1 … ulUnicodeRange4 这 4 个 32 位字段来表示，总共 128 个 bit，对应 128 个 Unicode Block，如果某 bit = 1，表示字体支持该区块中的至少一些字符，
  映射表见：https://learn.microsoft.com/en-us/typography/opentype/spec/os2#ur
  --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ulUnicodeRange1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10100001 00000000 00000010 11111111&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ulUnicodeRange2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;00000010 00000000 00100000 01011110&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ulUnicodeRange3&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;00000000 00000000 00000000 00000000&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ulUnicodeRange4&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;00000000 00000000 00000000 00000000&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 专业排版（比如 InDesign）一般使用sTypoAscender、sTypoDescender --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sTypoAscender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1950&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sTypoDescender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-494&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sTypoLineGap&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Windows一般使用sTypoAscender、sTypoDescender --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;usWinAscent&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1950&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;usWinDescent&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;494&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/OS_2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参见&lt;a href=&quot;https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6OS2.html&quot;&gt;Apple文档&lt;/a&gt;，关注几个值：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）ySubscriptXSize &amp;amp; ySubscriptYSize &amp;amp; ySubscriptXOffset &amp;amp; ySubscriptYOffset&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下标的大小和偏移&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）ySuperscriptXSize &amp;amp; ySuperscriptYSize &amp;amp; ySuperscriptXOffset &amp;amp; ySuperscriptYOffset&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;上标的大小和偏移&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3）yStrikeoutSize &amp;amp; yStrikeoutPosition&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;删除线的粗细和垂直位置&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4）ulUnicodeRange1 &amp;amp; ulUnicodeRange2 &amp;amp; ulUnicodeRange3 &amp;amp; ulUnicodeRange4&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ulUnicodeRange表示该字体支持的Unicode范围，用ulUnicodeRange1 … ulUnicodeRange4 这 4 个 32 位字段来表示，总共 128 个 bit，对应 128 个 Unicode Block，如果某 bit = 1，表示字体支持该区块中的至少一些字符，映射表见：https://learn.microsoft.com/en-us/typography/opentype/spec/os2#ur 。&lt;/p&gt;

&lt;p&gt;Windows系统通常用 ulUnicodeRange 来看一个字体是否支持某Unicode；macOS/iOS系统一般用 cmap 表（精确的字符映射），ulUnicodeRange只作为辅助信息；浏览器排版一般直接查 cmap，但 ulUnicodeRange 有时也用于字体 fallback 策略。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5）sTypoAscender &amp;amp; sTypoDescender &amp;amp; usWinAscent &amp;amp; usWinDescent&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如前文所述，不同系统会取不同的值作为ascent、descent&lt;/p&gt;

&lt;h2 id=&quot;26-hmtx&quot;&gt;2.6 hmtx&lt;/h2&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;hmtx&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;mtx&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.notdef&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2048&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lsb=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;199&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;mtx&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.null&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lsb=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;mtx&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1244&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lsb=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-16&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/hmtx&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Horizontal Metrics，记录每个 glyph 的 advance width 和left side bearing。&lt;/p&gt;

&lt;p&gt;简单理解排版引擎绘制字形的流程是：将字形放在当前点 + lsb 偏移位置进行绘制，画完后，将光标向右移动 &lt;code class=&quot;highlighter-rouge&quot;&gt;advanceWidth&lt;/code&gt;，准备绘制下一个字形。&lt;/p&gt;

&lt;h2 id=&quot;27-cmap&quot;&gt;2.7 cmap&lt;/h2&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;cmap&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tableVersion&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;cmap_format_4&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platformID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platEncID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- A的Unicode code point是0x41 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x41&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- LATIN CAPITAL LETTER A --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x42&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- LATIN CAPITAL LETTER B --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x43&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- LATIN CAPITAL LETTER C --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x44&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- LATIN CAPITAL LETTER D --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x45&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- LATIN CAPITAL LETTER E --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x46&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;F&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- LATIN CAPITAL LETTER F --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x47&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;G&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- LATIN CAPITAL LETTER G --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x48&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;H&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- LATIN CAPITAL LETTER H --&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/cmap_format_4&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/cmap&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Character to Glyph Mapping，定义 Unicode code point → glyph ID 的映射，cmap表中能精确的查到该Font支持哪些Unicode。&lt;/p&gt;

&lt;h2 id=&quot;28-glyf&quot;&gt;2.8 glyf&lt;/h2&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;glyf&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TTGlyph&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xMin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-16&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;yMin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xMax=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1260&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;yMax=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1444&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;contour&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1086&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;213&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1113&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;137&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1161&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;50&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1219&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;9&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1260&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1260&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;793&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;793&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;845&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;7&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;897&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;54&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;899&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;143&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;874&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;213&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;528&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;528&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;220&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;292&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;184&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;186&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;170&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;66&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;224&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;11&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;290&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;290&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-16&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-16&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;27&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;9&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;89&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;59&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;151&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;181&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;193&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;297&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;614&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1444&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;648&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1444&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/contour&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;contour&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;290&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;532&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;294&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;544&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;859&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;544&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;860&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;532&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/contour&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;instructions/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/TTGlyph&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/glyf&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Glyph Data，真正的字形轮廓（矢量点、轮廓、控制点）；cmap 表负责把 Unicode 字符映射到 glyphID，而 glyf 表告诉渲染系统该 glyph 的具体形状。&lt;/p&gt;

&lt;h2 id=&quot;29-name&quot;&gt;2.9 name&lt;/h2&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;namerecord&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nameID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platformID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platEncID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;langID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x409&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    © 2017-2024 Apple Inc. All rights reserved.
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/namerecord&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;namerecord&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nameID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platformID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platEncID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;langID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x409&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    .New York
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/namerecord&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;namerecord&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nameID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platformID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platEncID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;langID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x409&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    Regular
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/namerecord&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;namerecord&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nameID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platformID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platEncID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;langID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x409&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    .New York; 20.0d1e1; 2024-05-06
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/namerecord&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;namerecord&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nameID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platformID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platEncID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;langID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x409&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    .New York
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/namerecord&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;namerecord&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nameID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platformID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platEncID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;langID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x409&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    20.0d1e1
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/namerecord&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;namerecord&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nameID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platformID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platEncID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;langID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x409&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    .NewYork-Regular
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/namerecord&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;name表中定义的是字体名称、字体家族、PostScript Name、厂商信息等。&lt;/p&gt;

&lt;p&gt;nameID对应的含义如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;nameID&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Copyright notice&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Font Family name（字体家族名，比如 &lt;em&gt;New York&lt;/em&gt;）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Font Subfamily name（字重/样式，比如 &lt;em&gt;Regular&lt;/em&gt;、&lt;em&gt;Bold&lt;/em&gt;）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Unique font identifier（唯一ID，通常包含厂商名+版本号）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Full font name（family + subfamily，比如 &lt;em&gt;New York Regular&lt;/em&gt;）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Version string&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;PostScript name（唯一的、无空格的名字）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这里需要重点介绍下PostScript Name：PostScript Name是字体在一个系统里的&lt;strong&gt;唯一标识&lt;/strong&gt;，是单个字符串，不允许有空格，一般是 FamilyName-StyleName 形式，比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;.NewYork-Regular&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Helvetica-Bold&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;NotoSansCJKsc-Regular&lt;/code&gt;等。&lt;/p&gt;

&lt;p&gt;在CoreText的API里，一般都要求传PostScript Name，比如：&lt;a href=&quot;https://developer.apple.com/documentation/coretext/ctfontcreatewithname(_:_:_:)&quot;&gt;CTFontCreateWithName&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;210-gdef&quot;&gt;2.10 GDEF&lt;/h2&gt;

&lt;p&gt;Glyph Definition Table，简单理解GDEF表就是是GPOS / GSUB的辅助表，比如GPOS和 GSUB需要知道「哪些字形是 mark、哪些能连接、哪些有变体」等信息，这些元数据就是放在GDEF 表里的。&lt;/p&gt;

&lt;h2 id=&quot;211-gpos&quot;&gt;2.11 GPOS&lt;/h2&gt;

&lt;p&gt;Glyph Positioning Table，控制字形的相对位置（如kerning、上下标等），比如「A + V」之间要减少间距，或者音标放在元音正上方等。&lt;/p&gt;

&lt;h2 id=&quot;212-gsub&quot;&gt;2.12 GSUB&lt;/h2&gt;

&lt;p&gt;Glyph Substitution Table，控制字形替换（连字、、阿拉伯文变体、直角引号换弯引号等），比如&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; → &lt;code class=&quot;highlighter-rouge&quot;&gt;ﬁ&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;'quoteleft'&lt;/code&gt; → &lt;code class=&quot;highlighter-rouge&quot;&gt;‘&lt;/code&gt;等。&lt;/p&gt;

&lt;h2 id=&quot;213-hvar--mvar--avar--fvar--gvar&quot;&gt;2.13 HVAR &amp;amp; MVAR &amp;amp; avar &amp;amp; fvar &amp;amp; gvar…&lt;/h2&gt;

&lt;p&gt;这几个表是用于转换可变字体的，可变字体不在本文范围内，不再详述。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;更多精彩内容欢迎关注🌍公众号：非专业程序员Ping&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 17 Sep 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/09/17/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82Font%E6%96%87%E4%BB%B6/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/09/17/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82Font%E6%96%87%E4%BB%B6/</guid>
        
        <category>跨端渲染</category>
        
        <category>Font</category>
        
        
      </item>
    
      <item>
        <title>Typora激活</title>
        <description>&lt;p&gt;参考了网上关于Typora的激活方式，修改&lt;code class=&quot;highlighter-rouge&quot;&gt;hasActivated=&quot;true&quot;==e.hasActivated&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;hasActivated=&quot;true&quot;==&quot;true&quot;&lt;/code&gt;，在新版本（V1.11.7）已经不生效，研究了下发现另外一种规避方式，本文记录下。&lt;/p&gt;

&lt;p&gt;MacOS上找到：&lt;code class=&quot;highlighter-rouge&quot;&gt;/Applications/Typora.app/Contents/Resources/TypeMark/page-dist/static/js/LicenseIndex.180dd4c7.54684560.chunk.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Typora/dir.png&quot; alt=&quot;dir&quot; /&gt;&lt;/p&gt;

&lt;p&gt;文本编辑器打开该文件，修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;quit:function(){window.Setting.invoke(&quot;quit&quot;)}&lt;/code&gt;中的quit为close即可，即：&lt;code class=&quot;highlighter-rouge&quot;&gt;quit:function(){window.Setting.invoke(&quot;close&quot;)}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Typora/quit.png&quot; alt=&quot;quit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;修改完后保存，再次打开Typora，点击退出就不会再退出应用程序了。&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Sep 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/09/14/Typora%E6%BF%80%E6%B4%BB/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/09/14/Typora%E6%BF%80%E6%B4%BB/</guid>
        
        <category>其他</category>
        
        
      </item>
    
      <item>
        <title>一文读懂字符、字形、字体</title>
        <description>&lt;h1 id=&quot;一引言&quot;&gt;一、引言&lt;/h1&gt;

&lt;p&gt;什么是Character？什么是Glyph？Character和Glyph是否一一对应？我们常说的Font又包含哪些东西？如果要自己实现一套文本的分词、测量和布局，又需要理清楚哪些概念？ascent、descent、lineHeight之间的关系是怎么样的？&lt;/p&gt;

&lt;p&gt;本文将尽量以简洁易懂的方式来解释以上问题，也可以提前Mark起来，作为日后的速查手册。&lt;/p&gt;

&lt;h1 id=&quot;二character&quot;&gt;二、Character&lt;/h1&gt;

&lt;p&gt;Character也叫字符，是一个抽象概念，比如字母&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;、中文&lt;code class=&quot;highlighter-rouge&quot;&gt;你&lt;/code&gt;等都可以视为一个字符，它只是一个语义单位，不关心具体长什么样。&lt;/p&gt;

&lt;h1 id=&quot;三glpyh&quot;&gt;三、Glpyh&lt;/h1&gt;

&lt;p&gt;Glpyh也叫字形，表示字符的绘制方式；一个字符可以有多种方式绘制，比如字母A，可以有不同的大小、粗细、斜体、衬线等，但都是同一个字符；这些不同的绘制方式，都叫字形。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/一文读懂字符、字形、字体/glyph_A.png&quot; alt=&quot;glyph_A&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;31-character与glyph的关系&quot;&gt;3.1 Character与Glyph的关系&lt;/h2&gt;

&lt;p&gt;字符与字形并非一一对应关系，一个字符可以由多个字形表示，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;可以是&lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;和重音符号&lt;code class=&quot;highlighter-rouge&quot;&gt;´&lt;/code&gt;的组合，在一些连字情况下，一个字形也可以代表多个字符，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/一文读懂字符、字形、字体/ligatures.png&quot; alt=&quot;ligatures&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;四font&quot;&gt;四、Font&lt;/h1&gt;

&lt;h2 id=&quot;41-typeface&quot;&gt;4.1 Typeface&lt;/h2&gt;

&lt;p&gt;指一套具有统一设计风格的Font集合，它是一种设计概念，而不是具体的文件&lt;/p&gt;

&lt;h2 id=&quot;42-font&quot;&gt;4.2 Font&lt;/h2&gt;

&lt;p&gt;Font可以理解成Typeface的某个具体实现。&lt;/p&gt;

&lt;p&gt;以Helvetica为例：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Typeface：Helvetica&lt;/li&gt;
  &lt;li&gt;Font：
    &lt;ul&gt;
      &lt;li&gt;Helvetica Regular.ttf&lt;/li&gt;
      &lt;li&gt;Helvetica Bold.ttf&lt;/li&gt;
      &lt;li&gt;Helvetica Italic.ttf&lt;/li&gt;
      &lt;li&gt;Helvetica Bold Italic.ttf&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;43-font-family&quot;&gt;4.3 Font Family&lt;/h2&gt;

&lt;p&gt;Font Family是一组属于同一个Typeface的字体（Fonts），它们共享设计风格，只是字重/宽度/样式不同。&lt;/p&gt;

&lt;p&gt;比如：Helvetica是一个Font Family，里面包含字体：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Helvetica Regular&lt;/li&gt;
  &lt;li&gt;Helvetica Bold&lt;/li&gt;
  &lt;li&gt;Helvetica Italic&lt;/li&gt;
  &lt;li&gt;Helvetica Bold Italic&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;44-font-descriptor&quot;&gt;4.4 Font Descriptor&lt;/h2&gt;

&lt;p&gt;Font Descriptor（字体描述符）是一种属性集合（Font Family、Font Weight、样式 (italic/oblique)、大小等），用来描述或查询一个字体；它不是字体文件，而是一个“过滤条件”或“配置对象”，在 CoreText 里对应 &lt;code class=&quot;highlighter-rouge&quot;&gt;CTFontDescriptor&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;Font Descriptor可以用于匹配系统中符合条件的字体，也可以用它来派生一个具体的CTFont，如：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 这里的 descriptor 只是描述条件，真正的字体对象是 font&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;descriptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontDescriptorCreateWithAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;kCTFontFamilyNameAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Microsoft YaHei&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;kCTFontWeightTrait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontCreateWithFontDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;45-font-collections&quot;&gt;4.5 Font Collections&lt;/h2&gt;

&lt;p&gt;Font Collections是一组字体的集合，通常用于检索和筛选，在 CoreText 里对应CTFontCollection。&lt;/p&gt;

&lt;p&gt;它可以包含系统中所有可用字体，也可以按条件过滤出子集，主要用途有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;枚举系统安装的字体&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;根据 &lt;code class=&quot;highlighter-rouge&quot;&gt;Font Descriptor&lt;/code&gt; 找到所有匹配的字体&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;做字体选择器 UI（比如 Word 里的字体下拉框）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;46-小结&quot;&gt;4.6 小结&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/一文读懂字符、字形、字体/Font.png&quot; alt=&quot;Font&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;47-glyph与font的关系&quot;&gt;4.7 Glyph与Font的关系&lt;/h2&gt;

&lt;p&gt;简单理解，Font里存储了Glyph的绘制样式，Glyph与Unicode的映射关系等。&lt;/p&gt;

&lt;p&gt;Font里有各种各样的表，存储了Unicode code point与GlyphID的映射关系，每个Glyph绘制时的advance width 和left side bearing等，后续会有单独的文章详细解析Font文件内容，这里先理解二者的概念。&lt;/p&gt;

&lt;h1 id=&quot;五文字排版的基本概念&quot;&gt;五、文字排版的基本概念&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;基本概念&lt;/th&gt;
      &lt;th&gt;解释&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics&lt;/td&gt;
      &lt;td&gt;由字体设计师提供，用于描述每个Glyph周围的间距&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;advance width&lt;/td&gt;
      &lt;td&gt;前进宽度，基线方向到下一个Glyph origin的距离，或者理解为字形绘制完后，光标应该前进多少距离&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;left-side bearing&lt;/td&gt;
      &lt;td&gt;Glyph origin与Glyph左侧的间距&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;right-side bearing&lt;/td&gt;
      &lt;td&gt;Glyph右侧与advance width终点的距离&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ascent&lt;/td&gt;
      &lt;td&gt;Glyph origin到Font中最高Glyph的顶部距离&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;descent&lt;/td&gt;
      &lt;td&gt;Glyph origin到Font中最低Glyph的底部距离&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bounding box&lt;br /&gt;bounding rectangle&lt;/td&gt;
      &lt;td&gt;包含Glyph可视区域（注意非advance width）最小rect&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;kerning&lt;/td&gt;
      &lt;td&gt;通常，Glyph一般按advance width排列，但为了提高可读性，通常会引入kerning来扩大或缩小两个glyph之间的间距，比如W和A：&lt;br /&gt;&lt;img src=&quot;/img/post/一文读懂字符、字形、字体/kerning.png&quot; alt=&quot;kerning&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;leading/linegap&lt;/td&gt;
      &lt;td&gt;line之间的添加的距离&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lineHeight&lt;/td&gt;
      &lt;td&gt;lineHeight = ascent + descent + leading&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;一图胜过千言，贴两张经典的图：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;图一&lt;/th&gt;
      &lt;th&gt;图二&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/一文读懂字符、字形、字体/glyph_1.png&quot; alt=&quot;glyph_1&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/一文读懂字符、字形、字体/glyph_2.png&quot; alt=&quot;glyph_2&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;更多精彩内容欢迎关注🌍公众号：非专业程序员Ping&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 13 Sep 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/09/13/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%E5%AD%97%E7%AC%A6-%E5%AD%97%E5%BD%A2-%E5%AD%97%E4%BD%93/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/09/13/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%E5%AD%97%E7%AC%A6-%E5%AD%97%E5%BD%A2-%E5%AD%97%E4%BD%93/</guid>
        
        <category>跨端渲染</category>
        
        <category>Font</category>
        
        
      </item>
    
      <item>
        <title>第一个Flutter应用</title>
        <description>&lt;h1 id=&quot;一环境搭建&quot;&gt;一、环境搭建&lt;/h1&gt;

&lt;p&gt;添加Flutter镜像：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PUB_HOSTED_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://pub.flutter-io.cn
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FLUTTER_STORAGE_BASE_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://storage.flutter-io.cn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下载Flutter SDK：https://docs.flutter.cn/install/archive&lt;/p&gt;

&lt;p&gt;添加Flutter SDK环境变量：&lt;code class=&quot;highlighter-rouge&quot;&gt;export PATH=&quot;$PWD/flutter/bin:$PATH&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;运行&lt;code class=&quot;highlighter-rouge&quot;&gt;flutter doctor&lt;/code&gt;验证安装是否成功：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Flutter/Flutter Doctor.png&quot; alt=&quot;Flutter Doctor&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我使用的是iOS开发环境，没装Android环境，也OK&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;二构建第一个flutter应用&quot;&gt;二、构建第一个Flutter应用&lt;/h1&gt;

&lt;p&gt;VSCode安装flutter插件，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;command + shift + p&lt;/code&gt;选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Flutter: New Project&lt;/code&gt;，之后按需选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt;（自带一个计数器的App）或者&lt;code class=&quot;highlighter-rouge&quot;&gt;Empty Application&lt;/code&gt;：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;New Project&lt;/th&gt;
      &lt;th&gt;Project Template&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/Flutter/New Project.png&quot; alt=&quot;New Project&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/Flutter/Project Template.png&quot; alt=&quot;Project Template&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;我这里选的Application，点击main.dart下的run：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Flutter/run.png&quot; alt=&quot;run&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到运行效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Flutter/FlutterDemo.png&quot; alt=&quot;FlutterDemo&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 31 Aug 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/08/31/%E7%AC%AC%E4%B8%80%E4%B8%AAFlutter%E5%BA%94%E7%94%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/08/31/%E7%AC%AC%E4%B8%80%E4%B8%AAFlutter%E5%BA%94%E7%94%A8/</guid>
        
        <category>跨端渲染</category>
        
        <category>Flutter</category>
        
        
      </item>
    
      <item>
        <title>一文读懂字符与编码</title>
        <description>&lt;h1 id=&quot;一字符character&quot;&gt;一、字符/Character&lt;/h1&gt;

&lt;p&gt;对用户可见的“一个字符”，通常是我们在屏幕上看到的一个字母、数字、emoji 或组合字符。&lt;/p&gt;

&lt;p&gt;比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;👨‍👩‍👧‍👦&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;二字符编码标准字符集&quot;&gt;二、字符编码标准/字符集&lt;/h1&gt;

&lt;p&gt;字符编码标准定义的是如何将字符映射到唯一编码，常见的字符编码标准比如&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;GBK&lt;/code&gt;等&lt;/p&gt;

&lt;h2 id=&quot;21-ascii&quot;&gt;2.1 ASCII&lt;/h2&gt;

&lt;p&gt;ASCII（7位）定义了 128 个字符的唯一编码，包括数字0到9、小写字母a到z、大写字母A到Z以及常用标点符号等。&lt;/p&gt;

&lt;h2 id=&quot;22-unicode&quot;&gt;2.2 Unicode&lt;/h2&gt;

&lt;p&gt;Unicode又叫万国码，目标是为所有字符定义唯一编码（Code Point）。为了解决ASCII/GBK不能定义全部字符的问题。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;U+0061&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;👨&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;U+1F468&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;Unicode只负责分配码位（Code Point），并不决定具体的存储形式。&lt;/p&gt;

&lt;p&gt;Unicode的前 128 个码点与ASCII相同。&lt;/p&gt;

&lt;h3 id=&quot;221-code-point&quot;&gt;2.2.1 Code Point&lt;/h3&gt;

&lt;p&gt;Code Point也叫码位，Unicode中为每个字符分配的唯一编码。&lt;/p&gt;

&lt;p&gt;一个字符可以对应一个或多个Code Point，比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0061&lt;/code&gt;，对应 1 个Code Point&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;👨‍👩‍👧‍👦&lt;/code&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;U+1F468 (👨) + U+200D (ZWJ) + U+1F469 (👩) + U+200D (ZWJ) + U+1F467 (👧) + U+200D (ZWJ) + U+1F466 (👦)&lt;/code&gt;对应 7 个Code Point&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;U+00E9&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0065 + U+0301&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;备注：&lt;/p&gt;

  &lt;p&gt;在Unicode中，&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;实际上有两种表示方式：&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;单一字符表示法&lt;/strong&gt;：即直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;U+00E9&lt;/code&gt;这个单独的Unicode码位表示&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;。&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;组合字符表示法&lt;/strong&gt;：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0065&lt;/code&gt;（字母&lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;）和&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0301&lt;/code&gt;（重音符号）两个Unicode码位来表示一个&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;字符。&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;为什么会有这两种表示法？&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;历史原因&lt;/strong&gt;：Unicode设计时考虑到了不同语言的需求，许多语言（如法语、西班牙语等）使用带有重音符号的字符，因此，Unicode同时支持这两种表示方式。&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;兼容性&lt;/strong&gt;：一些旧的系统或字体可能只支持分解字符表示法，因此，Unicode也保留了这种组合字符的方式，以提高兼容性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;222-code-unit&quot;&gt;2.2.2 Code Unit&lt;/h3&gt;

&lt;p&gt;Code Unit也叫码元（代码单元），表示计算机中实际存储Unicode的基本单位，取决于编码方式。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;： &lt;code class=&quot;highlighter-rouge&quot;&gt;Code Unit&lt;/code&gt;是 1 字节（8 Bit）；比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;在UTF-8编码下占 1 个字节，表示为&lt;code class=&quot;highlighter-rouge&quot;&gt;0x61&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-16&lt;/code&gt;： &lt;code class=&quot;highlighter-rouge&quot;&gt;Code Unit&lt;/code&gt;是 2 字节（16 Bit）；比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;在UTF-16编码下占 2 个字节，表示为&lt;code class=&quot;highlighter-rouge&quot;&gt;0x0061&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-32&lt;/code&gt;： &lt;code class=&quot;highlighter-rouge&quot;&gt;Code Unit&lt;/code&gt;是 4 字节（32 Bit）；比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;在UTF-32编码下占 4 个字节，表示为&lt;code class=&quot;highlighter-rouge&quot;&gt;0x00000061&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;三字符编码方式&quot;&gt;三、字符编码方式&lt;/h1&gt;

&lt;p&gt;字符编码方式决定了字符如何存储、传输和解码；常见的编码方式有：UTF-8、UTF-16、UTF-32等&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;：可变长度，用 1 到 4 个字节来存储 Unicode 字符；为了节省存储资源。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-16&lt;/code&gt;：可变长度，用 2 或 4 个字节存储字符。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-32&lt;/code&gt;：固定长度，每个字符始终使用 4 字节存储。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;的Code Point是：&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0065 + U+0301&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当以&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-32&lt;/code&gt;方式编码时，每个Code Point未超过4字节，所以表示为：0x00000065，0x00000301&lt;/p&gt;

&lt;p&gt;当以&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-16&lt;/code&gt;方式编码时，每个Code Point未超过2字节，所以表示为：0x0065，0x0301&lt;/p&gt;

&lt;p&gt;当以&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;方式编码时，0x0301值超过了128，需要按&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;格式拆分为0xCC，0x81，所以表示为：0x65，0xCC，0x81&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Q：&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;编码为什么是按128做比较，按理说1字节（0xFF）表示的最大值是255？&lt;/p&gt;

  &lt;p&gt;A：有两个原因：一是为了与&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;兼容，&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;只支持了128个字符编码，在&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;编码中，前128位与&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;编码相同；二是&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;编码中，会将第一个字节的高位部分用来标识这个字符的编码长度，具体为：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0xxxxxxx&lt;/code&gt;：表示 1 字节字符（&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt; 范围）&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;110xxxxx&lt;/code&gt;：表示 2 字节字符&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1110xxxx&lt;/code&gt;：表示 3 字节字符&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;11110xxx&lt;/code&gt;：表示 4 字节字符&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;img src=&quot;/img/post/Font/UTF-8编码规则.png&quot; alt=&quot;UTF-8编码规则&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 30 Aug 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/08/30/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%E5%AD%97%E7%AC%A6%E4%B8%8E%E7%BC%96%E7%A0%81/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/08/30/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%E5%AD%97%E7%AC%A6%E4%B8%8E%E7%BC%96%E7%A0%81/</guid>
        
        <category>跨端渲染</category>
        
        <category>Font</category>
        
        
      </item>
    
      <item>
        <title>虚拟内存</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;虚拟内存算是操作系统中比较重要的一部分了，内容也很多，早在看操作系统相关书籍的时候就有想要总结这一部分，但是功力不够，总感觉串不起来；经过秋招这几个月对基础知识的回顾，感觉对虚拟内存这一部分有了自己的一个认识和体系，遂趁这个机会述以成文。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;一-背景&quot;&gt;一. 背景&lt;/h2&gt;

&lt;p&gt;在计算机硬件体系结构中，总有这样一种规律：性能越好，价格越高；为了中和性价比，在计算机硬件体系中多采用逐级缓存的结构，通过软件算法实现访问性能与价格成本的平衡，这在计算机的存储体系中体现的尤为明显。&lt;/p&gt;

&lt;h3 id=&quot;11-dram-vs-sram&quot;&gt;1.1 DRAM vs SRAM&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DRAM&lt;/strong&gt;：动态随机访问存储器；价格低，访问速度较慢，耗电量较大，一般用于做主存。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SRAM&lt;/strong&gt;：静态随机访问存储器；价格高，访问速度快，耗电量低，一般用于做高速缓存。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;12-存储器层次结构&quot;&gt;1.2 存储器层次结构&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/VirtualMemory/存储器层次结构.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图，存储器的层次结构实际上是一个金字塔形状，从上到下，表示价格越来越低，容量越来越大；从上到下依次是：寄存器，L1，L2，L3三级高速缓存，主存，磁盘缓存，网络缓存。存储器的层次结构实际上也是一个逐级缓存的结构，其中，虚拟内存主要作用于主存与磁盘缓存之间，负责主存与磁盘之间的页面交换。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;二-虚拟内存的目的&quot;&gt;二. 虚拟内存的目的&lt;/h2&gt;

&lt;p&gt;虚拟内存有三个目的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将主存视为磁盘的高速缓存，在主存中只保留活动区域，提高主存利用率&lt;/li&gt;
  &lt;li&gt;为进程提供统一的地址空间，简化内存管理&lt;/li&gt;
  &lt;li&gt;保护进程地址空间不被其他进程破坏&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虚拟内存如何达到这三个目的，将在后文讲解。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;三-虚拟内存的原理&quot;&gt;三. 虚拟内存的原理&lt;/h2&gt;

&lt;h3 id=&quot;31-基本概念&quot;&gt;3.1 基本概念&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;页表：可以理解为位于主存中的一个大数组，由页表项组成&lt;/li&gt;
  &lt;li&gt;页表项：页表的基本组成单元，页表项分为两个部分：标志位和地址位&lt;/li&gt;
  &lt;li&gt;虚拟页：主存与磁之间的基本传送单元，磁盘地址空间被视为一个个的虚拟页&lt;/li&gt;
  &lt;li&gt;物理页：缓存在主存中的实际单元&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;32-寻址的基本过程&quot;&gt;3.2 寻址的基本过程&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;因为页表其实也是很占内存空间的，所以实际中会采用多级页表和动态创建页表的方式来减小页表大小，这里为了方便了解寻址的整体过程，就以单级页表为例；另外，页表项的高速缓存这里也没有考虑，高速缓存将在下一节介绍。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;主存中有一个页表，页表由页表项组成，将虚拟页映射到物理页；处理器（CPU）进行一次寻址的过程是：处理器生成一个虚拟地址，交给MMU（地址翻译器）进行地址翻译，MMU将虚拟地址转换为页表索引，然后去主存中查找对应的页表项，如果主存中缓存该虚拟页，则主存将虚拟页对应的页表项传送给MMU，之后MMU从页表项计算出物理地址送给主存，主存将物理地址对应的数据通过数据总线送给处理器；如果主存中没有缓存虚拟页对应的物理页，则触发一次缺页异常，由主存从磁盘换取所需虚拟页之后，再次执行导致缺页的指令。&lt;/p&gt;

&lt;p&gt;如下图所示：摘自《深入理解计算机系统》&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/VirtualMemory/寻址的基本过程.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;33-页表缓存&quot;&gt;3.3 页表缓存&lt;/h3&gt;

&lt;p&gt;上文中提过，相比于 L1，L2，L3 三级高速缓存，主存的访问速度还是很慢的（ DRAM 比 SRAM 要慢约十多倍，磁盘比 DRAM 要慢约十万多倍），所以如果每次进行寻址的时候，都按照上述过程，先去主存查找页表项，然后再去主存取对应的物理页，那么，即使每次页面都命中的情况下，每次寻址也需要两次的 DRAM 访问（主存访问），如果算上缺页异常与主存与磁盘的页面替换，耗费的时间将更多。&lt;/p&gt;

&lt;p&gt;为了加速 MMU 地址翻译的过程，会将页表项缓存到 TLB（TLB 见后补充解释） 和 L1 级高速缓存中，因此上述 MMU 进行地址翻译的过程就变成了：MMU 根据虚拟地址从 TLB 中查找页表项，如果找到，则直接进行后续物理地址生成；如果 TLB 未命中，则 MMU 从 L1 级高速缓存中查找对应的页表项，如果命中，则将该页表项缓存在 TLB 中并进行下一步，否则，继续从主存中查找页表项。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;TLB&lt;/strong&gt;：TLB 是一个在 MMU 中的高速缓存，用于缓存页表项；如果 TLB 命中，那么所有的地址翻译都是在芯片上的 MMU 中完成的，因此非常快。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如下图所示：摘自《深入理解计算机系统》&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/VirtualMemory/地址翻译的基本过程.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;34-地址翻译的细节&quot;&gt;3.4 地址翻译的细节&lt;/h3&gt;

&lt;h4 id=&quot;341-从-tlb-查找页表项&quot;&gt;3.4.1 从 TLB 查找页表项&lt;/h4&gt;

&lt;p&gt;处理器生成的虚拟地址如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/VirtualMemory/虚拟地址用于TLB.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TLB 中每一行都保存着一个由单个页表项组成的块，用于组选择和行匹配的索引和标记字段是从虚拟地址中的虚拟页号（VPN）中提取出来的，如果 TLB 有 &lt;code class=&quot;highlighter-rouge&quot;&gt;T = 2^t&lt;/code&gt;个组，那么 TLB 索引（TLBI）是由 VPN 的 t 个最低位组成的，而 TLB 标记（TLBT）是由 VPN 中剩余的位组成的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;更多关于 TLB 查找页表项的细节可参见： https://www.cnblogs.com/alantu2018/p/9000777.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;342-从主存中查找页表项&quot;&gt;3.4.2 从主存中查找页表项&lt;/h4&gt;

&lt;p&gt;如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/VirtualMemory/虚拟地址用于页表.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;虚拟地址由两部分组成：虚拟页号和虚拟页偏移量；虚拟页号可以简单的视为页表索引，如：根据VPN 0 选择页表项0，根据 VPN 1 选择页表项1，依次类推。&lt;/p&gt;

&lt;h4 id=&quot;343-从页表项生成物理地址&quot;&gt;3.4.3 从页表项生成物理地址&lt;/h4&gt;

&lt;p&gt;仍如上图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/VirtualMemory/虚拟地址用于页表.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看出，物理地址最终由两个部分组成：低位是虚拟地址的另一部分，即虚拟页偏移量，高位是页表项的另一部分（页表项还有一部分是标志位，上文介绍过）。&lt;/p&gt;

&lt;p&gt;另外，根据上图，还可以看出&lt;strong&gt;MMU是如何根据页表项判断虚拟页是否在主存中有对应的物理页的&lt;/strong&gt;：上文中说过，页表项分为两部分，其中一部分是一个标志位（即途中的有效位），上图也说的很清楚了，如果有效位为 0 ，说明虚拟页对应的物理页还为被缓存在主存中（缺页），否则，说明命中。&lt;/p&gt;

&lt;h3 id=&quot;35-页表优化&quot;&gt;3.5 页表优化&lt;/h3&gt;

&lt;p&gt;上文提到过，页表占据的内存空间也是可观的；对于一个 32 位的地址空间，4KB 的页面和一个 4 字节的页表项，即使应用所引用的只是虚拟地址空间中很小的一部分，也总是需要一个 4MB 的页表常驻内存。为了优化页表占用的内存空间，实际中常采用多级页表。&lt;/p&gt;

&lt;p&gt;多级页表的基本思路就是，增大单个页表项所能映射的虚拟页的大小，即进行粒度更大的映射（对于常驻内存的页表来说），如：之前一个页表项只能映射 4KB 的虚拟页，如果一个页表项能映射 4MB 的虚拟页的话，页表的大小也会相应的减小很多。&lt;/p&gt;

&lt;p&gt;另外，多级页表还支持动态创建子级页表，即常驻内存的只有粒度最大的一级页表，二级页表等子级页表不需要常驻内存，在进行地址翻译时动态创建即可。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;四-局部性原理与内存抖动&quot;&gt;四. 局部性原理与内存抖动&lt;/h2&gt;

&lt;p&gt;MMU 进行地址翻译以及缺页时进行页面替换的算法在很大程度上都依赖于局部性原理。程序的局部性原理意思是，程序上次用到的数据和代码，在下次访问时很可能也会用到；因此将下次很可能会用到的数据缓存在访问速度更快的高速缓存中，将比较可观的提升程序性能。&lt;/p&gt;

&lt;p&gt;比较常见的页面替换算法是：LRU 算法，即最近最少使用算法，以及其他更多页面置换算法可参见： https://www.cnblogs.com/dolphin0520/p/3749259.html&lt;/p&gt;

&lt;p&gt;内存抖动的意思是，处理器进行数据访问时，不断产生缺页中断，不断进行页面置换，造成程序运行缓慢。出现内存抖动一般有两个原因：一个是页面置换算法的缺陷，差的页面置换算法通常会导致页面命中率的降低，造成频繁的缺页中断与页面置换；另一个也可能与我们自己写的程序有关。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;五-虚拟内存与进程&quot;&gt;五. 虚拟内存与进程&lt;/h2&gt;

&lt;p&gt;本文开始讲虚拟内存的目的时，提到了虚拟内存对于进程的两个目的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;为进程提供统一的地址空间，简化内存管理：&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;操作系统为进程分配地址空间时，由于是通过虚拟内存进行虚拟页与物理页的映射，所以，对于进程而言，物理内存在地址空间上可以是不连续的（另外，这里还想提一点的是，这种不连续的映射，可以减少内存碎片与不同进程数据的共享，即通过虚拟内存将多个进程映射到同一虚拟页即可实现进程间数据共享）；同时，对于每一个进程而言，其地址空间都是由 0 开始往高地址增长（因为有 MMU 进行地址翻译）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;保护进程地址空间不被其他进程破坏：&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;进程在通过虚拟内存进行数据访问时，虚拟内存可以添加一些权限校验，防止进程间数据相互访问。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;六-参考&quot;&gt;六. 参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;《深入理解计算机系统》&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 02 Nov 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/11/02/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/11/02/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</guid>
        
        <category>操作系统</category>
        
        
      </item>
    
      <item>
        <title>iOS核心动画高级技巧Tips</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;核心动画高级技巧摘要&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;一-图层树&quot;&gt;一. 图层树&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;和UIView最大的不同是CALayer不处理用户的交互；CALayer并不清楚具体的响应链，即使它提供了一些方法来判断是否一个触点在图层的范围之内&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;每一个UIview都有一个CALayer实例的图层属性&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;UIView没有暴露出来的CALayer的功能：
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;阴影，圆角，带颜色的边框&lt;/li&gt;
        &lt;li&gt;3D变换&lt;/li&gt;
        &lt;li&gt;非矩形范围&lt;/li&gt;
        &lt;li&gt;透明遮罩&lt;/li&gt;
        &lt;li&gt;多级非线性动画&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;当满足以下条件的时候，你可能更需要使用CALayer而不是UIView:
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;开发同时可以在Mac OS上运行的跨平台应用&lt;/li&gt;
        &lt;li&gt;使用多种CALayer的子类（见第六章，“特殊的图层“），并且不想创建额外的UIView去包封装它们所有&lt;/li&gt;
        &lt;li&gt;做一些对性能特别挑剔的工作，比如对UIView一些可忽略不计的操作都会引起显著的不同（尽管如此，你可能会直接想使用OpenGL绘图）&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;二-寄宿图&quot;&gt;二. 寄宿图&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;利用CALayer在一个普通的UIView中显示了一张图片。这不是一个UIImageView，它不是我们通常用来展示图片的方法
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UIImage *image = [UIImage imageNamed:@&quot;Snowman.png&quot;];
//add it directly to our view's layer
self.layerView.layer.contents = (__bridge id)image.CGImage;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;如果你不需要寄宿图，那就不要重写drawRect方法，这会造成CPU资源和内存的浪费，这也是为什么苹果建议：如果没有自定义绘制的任务就不要在子类中写一个空的-drawRect:方法(因为如果UIView检测到-drawRect: 方法被调用了，它就会为视图分配一个寄宿图，这个寄宿图的像素尺寸等于视图大小乘以 contentsScale的值)&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;三-图层几何学&quot;&gt;三. 图层几何学&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;UIView有三个比较重要的布局属性：frame，bounds和center，CALayer对应地叫做frame，bounds和position。为了能清楚区分，图层用了“position”，视图用了“center”，但是他们都代表同样的值（frame代表了图层的外部坐标（也就是在父图层上占据的空间），bounds是内部坐标（{0, 0}通常是图层的左上角），center和position都代表了相对于父图层anchorPoint所在的位置）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;视图的frame，bounds和center属性仅仅是存取方法，当操纵视图的frame，实际上是在改变位于视图下方CALayer的frame，不能够独立于图层之外改变视图的frame&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于视图或者图层来说，frame并不是一个非常清晰的属性，它其实是一个虚拟属性，是根据bounds，position和transform计算而来，所以当其中任何一个值发生改变，frame都会变化。相反，改变frame的值同样会影响到他们当中的值&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当旋转时frame属性和bounds的宽高不再一致&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Animation/frame.png&quot; alt=&quot;iOS_Animation&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;认来说，anchorPoint位于图层的中点；视图的anchorPoint没有暴露，但是图层的anchorPoint可以被移动；比如你可以把它置于图层frame的左上角&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Animation/anchorPoint.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;CALayer还有另外两个属性，zPosition和anchorPointZ，二者都是在Z轴上描述图层位置的浮点类型&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CALayer并不关心任何响应链事件，所以不能直接处理触摸事件或者手势。但是它有一系列的方法帮你处理事件：-containsPoint:和-hitTest:&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;-containsPoint:接受一个在本图层坐标系下的CGPoint，如果这个点在图层frame范围内就返回YES&lt;/li&gt;
        &lt;li&gt;-hitTest:方法同样接受一个CGPoint类型参数，而不是BOOL类型，它返回图层本身，或者包含这个坐标点的叶子节点图层。这意味着不再需要像使用-containsPoint:那样，人工地在每个子图层变换或者测试点击的坐标。如果这个点在最外面图层的范围之外，则返回nil(注意当调用图层的-hitTest:方法时，测算的顺序严格依赖于图层树当中的图层顺序（和UIView处理事件类似）。之前提到的zPosition属性可以明显改变屏幕上图层的顺序，但不能改变事件传递的顺序)&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;四-视觉效果&quot;&gt;四. 视觉效果&lt;/h2&gt;

</description>
        <pubDate>Mon, 29 Apr 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/04/29/iOS%E6%A0%B8%E5%BF%83%E5%8A%A8%E7%94%BB%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7Tips/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/29/iOS%E6%A0%B8%E5%BF%83%E5%8A%A8%E7%94%BB%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7Tips/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>AutoLayout总结</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;总结&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;一-布局方式与背景&quot;&gt;一. 布局方式与背景&lt;/h2&gt;

&lt;p&gt;在开始介绍&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;之前，需要先介绍一下&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;中的布局方式；iOS&lt;code class=&quot;highlighter-rouge&quot;&gt;中主流的界面布局方式主要有手写代码布局，&lt;/code&gt;xib&lt;code class=&quot;highlighter-rouge&quot;&gt;布局，&lt;/code&gt;storyboard&lt;code class=&quot;highlighter-rouge&quot;&gt;布局；笔者更喜欢的还是手写代码的方式，一个可能与笔者之前&lt;/code&gt;Android&lt;code class=&quot;highlighter-rouge&quot;&gt;经验相关（因为&lt;/code&gt;Android&lt;code class=&quot;highlighter-rouge&quot;&gt;中多是使用手写&lt;/code&gt;xml`的方式布局，另一个是，对于多人合作而言，手写代码其实更方便（减少冲突）；当然，对于单人的独立项目，其实没有什么优劣可言，选择一种自己更为熟悉与快捷的方式都是因人而异。&lt;/p&gt;

&lt;p&gt;关于&lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt;布局和&lt;code class=&quot;highlighter-rouge&quot;&gt;storyboard&lt;/code&gt;布局方式的区别，其实二者都是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;IB&lt;/code&gt;来进行可视化空间的拖拽与约束，唯一的区别是二者的侧重点不同；一般来说，单个的&lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt;文件对应一个&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;，对于一些自定义&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;，通常也会使用单个&lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt;并从&lt;code class=&quot;highlighter-rouge&quot;&gt;main bundle&lt;/code&gt;进行加载的方式来载入；而&lt;code class=&quot;highlighter-rouge&quot;&gt;storyboard&lt;/code&gt;只能使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;而不能用于单独的&lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;（&lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;只能基于&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;使用，而&lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt;同时支持两者）&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt;实际上是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;xml&lt;/code&gt;文件，通过编译之后就得到&lt;code class=&quot;highlighter-rouge&quot;&gt;nib&lt;/code&gt;文件&lt;/p&gt;

&lt;p&gt;在上面介绍的三种方式中，都可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;的方式来进行布局；&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;的出现，是为了解决不同尺寸屏幕的适配问题；&lt;code class=&quot;highlighter-rouge&quot;&gt;iPhone 5&lt;/code&gt;之前，屏幕都是&lt;code class=&quot;highlighter-rouge&quot;&gt;3.5&lt;/code&gt;寸的（&lt;code class=&quot;highlighter-rouge&quot;&gt;640 x 960&lt;/code&gt;分辨率），这之前，屏幕尺寸相同，不存在适配问题，所有&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;坐标只需要计算好即可，但是&lt;code class=&quot;highlighter-rouge&quot;&gt;2012&lt;/code&gt;年，苹果发布了&lt;code class=&quot;highlighter-rouge&quot;&gt;4.0&lt;/code&gt;寸（&lt;code class=&quot;highlighter-rouge&quot;&gt;640 x 1136&lt;/code&gt;分辨率）的&lt;code class=&quot;highlighter-rouge&quot;&gt;iPhone 5&lt;/code&gt;，这样在&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;平台上就出现了不同尺寸的移动设备，使得原有的&lt;code class=&quot;highlighter-rouge&quot;&gt;frame&lt;/code&gt;布局方式无法进行很好的屏幕适配，所以为了解决这一问题，就出现了&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;二-原理与使用&quot;&gt;二. 原理与使用&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;其实类似于&lt;code class=&quot;highlighter-rouge&quot;&gt;Android&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;RelativeLayout&lt;/code&gt;，采用&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;之间的相对位置来进行布局；我们知道，要确定一个&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的位置，需要知道&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;x，y，width，height&lt;/code&gt;，即&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的起始坐标点，宽度和高度信息；&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;其实是通过解&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;之间建立的线性方程组（&lt;code class=&quot;highlighter-rouge&quot;&gt;y = ax + b&lt;/code&gt;）来确定其信息的（如下图），当然，如果出现约束不完整的情况或者约束冲突的情况，就会出现解的不定性，表现出来即是&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;位置未达到预期&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/AutoLayout/AutoLayout_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可约束的属性参见&lt;a href=&quot;https://developer.apple.com/documentation/uikit/nslayoutattribute&quot;&gt;NSLayoutAttribute&lt;/a&gt;枚举&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;实际上是基于&lt;code class=&quot;highlighter-rouge&quot;&gt;Cassowary&lt;/code&gt;算法的，&lt;code class=&quot;highlighter-rouge&quot;&gt;Cassowary&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;Alan Borning, Kim Marriott, Peter Stuckey&lt;/code&gt;等人在&lt;code class=&quot;highlighter-rouge&quot;&gt;1997&lt;/code&gt;年提出的一个解决布局问题的算法，&lt;code class=&quot;highlighter-rouge&quot;&gt;Cassowary&lt;/code&gt;算法能够有效解决线性等式系统和线性不等式系统，这也是&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;的性能保障&lt;/p&gt;

&lt;p&gt;当使用&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;的时候，&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的默认初始值会被弃用，如下代码，此时&lt;code class=&quot;highlighter-rouge&quot;&gt;UILable&lt;/code&gt;的初始化宽高会失效；这里还需要注意一个&lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt;属性，从名字我们可以看出，该属性是控制是否把&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoresizingMask&lt;/code&gt;变成约束（&lt;code class=&quot;highlighter-rouge&quot;&gt;autoresizing mask&lt;/code&gt;其实就是完全指定视图的尺寸和位置，即是否需要将其转换为线性方程组）；当使用&lt;code class=&quot;highlighter-rouge&quot;&gt;IB（Interface Builder）&lt;/code&gt;布局的时候，即&lt;code class=&quot;highlighter-rouge&quot;&gt;xib，storyboard&lt;/code&gt;方式，如果勾选了&lt;code class=&quot;highlighter-rouge&quot;&gt;Use Autolayout&lt;/code&gt;选项（默认勾选），那么&lt;code class=&quot;highlighter-rouge&quot;&gt;IB&lt;/code&gt;生成的控件的&lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt;属性都会被默认设置&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;；当使用手写代码布局时，&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt;属性默认为&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;，但是&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoresizingMask&lt;/code&gt;属性默认被设置为&lt;code class=&quot;highlighter-rouge&quot;&gt;.None&lt;/code&gt;，也就是说如果我们不去动&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoresizingMask&lt;/code&gt;属性，那么&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoresizingMask&lt;/code&gt;就不会对约束产生影响，所以，这个属性，一般也不需要手动设置（当然，为了保险，也可以手动将&lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt;属性置为&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;）&lt;/p&gt;

&lt;p&gt;当&lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt;属性为&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;时，&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoresizingMask&lt;/code&gt;将会转换为约束，一起参与到&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;的约束计算中，即会对&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;产生影响&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let label = UILabel(frame: CGRect(x: 100, y: 100, width: 100, height: 200))
label.backgroundColor = #colorLiteral(red: 1, green: 0.5763723254, blue: 0, alpha: 1)
view.addSubview(label)
label.translatesAutoresizingMaskIntoConstraints = false
label.snp.makeConstraints { (make) in
            make.width.equalTo(10)
            make.leading.equalToSuperview().offset(40)
            make.top.equalToSuperview().offset(40)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;布局关系不仅限于等于，还可以是大于等于或者小于等于，这种不等关系在处理&lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;UIImageView&lt;/code&gt;等具有自身内容尺寸（&lt;code class=&quot;highlighter-rouge&quot;&gt;Intrinsic Content Size&lt;/code&gt;）的控件时非常有用；比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;的长度会随文字长度而变化，那么我们可以对&lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;控件添加两个约束，即&lt;code class=&quot;highlighter-rouge&quot;&gt;宽度大于等于50&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;宽度小于等于200&lt;/code&gt;，这样，当文字很少时，宽度也至少为&lt;code class=&quot;highlighter-rouge&quot;&gt;50&lt;/code&gt;，当文字很多时，宽度也不会超过&lt;code class=&quot;highlighter-rouge&quot;&gt;200&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;某些用来展现内容的用户控件，例如&lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;UIImageView&lt;/code&gt;等，它们具有自身内容尺寸（&lt;code class=&quot;highlighter-rouge&quot;&gt;Intrinsic Content Size&lt;/code&gt;），此类用户控件会根据自身内容尺寸添加布局约束；也就是说，如果开发者没有显式给出其宽度或者高度约束，则其自身内容约束将会起作用&lt;/p&gt;

&lt;p&gt;具有&lt;code class=&quot;highlighter-rouge&quot;&gt;Intrinsic Content Size&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;参见下图（摘自官网）；具有&lt;code class=&quot;highlighter-rouge&quot;&gt;Intrinsic Content Size&lt;/code&gt;属性的&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;都重写了&lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;-(CGSize)intrinsicContentSize:&lt;/code&gt;方法，并且在需要改变这个值的时候调用&lt;code class=&quot;highlighter-rouge&quot;&gt;invalidateIntrinsicContentSize&lt;/code&gt;方法即可，通知系统这个值改变了；同样，当我们自定义&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的时候，如果想要拥有&lt;code class=&quot;highlighter-rouge&quot;&gt;Intrinsic Content Size&lt;/code&gt;属性，就可以重写该方法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/AutoLayout/AutoLayout_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;中还有两个比较重要的概念，&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Hugging&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Compression Resistance&lt;/code&gt;约束；在讲解这两个属性之前，需要先了解一下&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;中的优先级属性；所谓的优先级，我个人的理解其实是一种减少冲突与弱化约束的作用，即为各约束设置优先级，当出现冲突时&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;优先满足高优先级的约束；关于优先级的使用，可以参见文末参考链接&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Hugging&lt;/code&gt;约束：不想变大约束；即如果组件的此属性优先级比另一个组件此属性优先级高的话，那么这个组件就保持不变，另一个可以在需要拉伸的时候拉伸；可以简单理解为&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Hugging&lt;/code&gt;越大，&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;越难变大；默认值为&lt;code class=&quot;highlighter-rouge&quot;&gt;250&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Compression Resistance&lt;/code&gt;约束：不想变小约束；如果组件的此属性优先级比另一个组件此属性优先级高的话，那么这个组件就保持不变，另一个可以在需要压缩的时候压缩；可以简单理解为&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Compression Resistance&lt;/code&gt;越大，&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;越难变小；默认值为&lt;code class=&quot;highlighter-rouge&quot;&gt;750&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;关于&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Hugging&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Compression Resistance&lt;/code&gt;的应用，可以参见&lt;a href=&quot;https://www.jianshu.com/p/f6bc007b30e5&quot;&gt;博客&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;三-性能分析&quot;&gt;三. 性能分析&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;https://time.geekbang.org/column/article/85332&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.jianshu.com/p/0b964dc17c04&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://xiaozhuanlan.com/topic/5378941206&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://draveness.me/layout-performance&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://juejin.im/post/5bd5a546f265da0af033cee6#heading-3&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;四-参考&quot;&gt;四. 参考&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;https://www.jianshu.com/p/f6bc007b30e5&lt;/li&gt;
  &lt;li&gt;https://blog.csdn.net/hard_man/article/details/50888377&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 23 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/23/AutoLayout%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/23/AutoLayout%E6%80%BB%E7%BB%93/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
  </channel>
</rss>
