<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>非专业程序员</title>
    <description>Hello-World</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 15 Sep 2025 00:24:35 +0800</pubDate>
    <lastBuildDate>Mon, 15 Sep 2025 00:24:35 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Typora激活</title>
        <description>&lt;p&gt;参考了网上关于Typora的激活方式，修改&lt;code class=&quot;highlighter-rouge&quot;&gt;hasActivated=&quot;true&quot;==e.hasActivated&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;hasActivated=&quot;true&quot;==&quot;true&quot;&lt;/code&gt;，在新版本（V1.11.7）已经不生效，研究了下发现另外一种规避方式，本文记录下。&lt;/p&gt;

&lt;p&gt;MacOS上找到：&lt;code class=&quot;highlighter-rouge&quot;&gt;/Applications/Typora.app/Contents/Resources/TypeMark/page-dist/static/js/LicenseIndex.180dd4c7.54684560.chunk.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Typora/dir.png&quot; alt=&quot;dir&quot; /&gt;&lt;/p&gt;

&lt;p&gt;文本编辑器打开该文件，修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;quit:function(){window.Setting.invoke(&quot;quit&quot;)}&lt;/code&gt;中的quit为close即可，即：&lt;code class=&quot;highlighter-rouge&quot;&gt;quit:function(){window.Setting.invoke(&quot;close&quot;)}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Typora/quit.png&quot; alt=&quot;quit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;修改完后保存，再次打开Typora，点击退出就不会再退出应用程序了。&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Sep 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/09/14/Typora%E6%BF%80%E6%B4%BB/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/09/14/Typora%E6%BF%80%E6%B4%BB/</guid>
        
        <category>其他</category>
        
        
      </item>
    
      <item>
        <title>一文读懂字符、字形、字体</title>
        <description>&lt;h1 id=&quot;一引言&quot;&gt;一、引言&lt;/h1&gt;

&lt;p&gt;什么是Character？什么是Glyph？Character和Glyph是否一一对应？我们常说的Font又包含哪些东西？如果要自己实现一套文本的分词、测量和布局，又需要理清楚哪些概念？ascent、descent、lineHeight之间的关系是怎么样的？&lt;/p&gt;

&lt;p&gt;本文将尽量以简洁易懂的方式来解释以上问题，也可以提前Mark起来，作为日后的速查手册。&lt;/p&gt;

&lt;h1 id=&quot;二character&quot;&gt;二、Character&lt;/h1&gt;

&lt;p&gt;Character也叫字符，是一个抽象概念，比如字母&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;、中文&lt;code class=&quot;highlighter-rouge&quot;&gt;你&lt;/code&gt;等都可以视为一个字符，它只是一个语义单位，不关心具体长什么样。&lt;/p&gt;

&lt;h1 id=&quot;三glpyh&quot;&gt;三、Glpyh&lt;/h1&gt;

&lt;p&gt;Glpyh也叫字形，表示字符的绘制方式；一个字符可以有多种方式绘制，比如字母A，可以有不同的大小、粗细、斜体、衬线等，但都是同一个字符；这些不同的绘制方式，都叫字形。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/一文读懂字符、字形、字体/glyph_A.png&quot; alt=&quot;glyph_A&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;31-character与glyph的关系&quot;&gt;3.1 Character与Glyph的关系&lt;/h2&gt;

&lt;p&gt;字符与字形并非一一对应关系，一个字符可以由多个字形表示，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;可以是&lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;和重音符号&lt;code class=&quot;highlighter-rouge&quot;&gt;´&lt;/code&gt;的组合，在一些连字情况下，一个字形也可以代表多个字符，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/一文读懂字符、字形、字体/ligatures.png&quot; alt=&quot;ligatures&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;四font&quot;&gt;四、Font&lt;/h1&gt;

&lt;h2 id=&quot;41-typeface&quot;&gt;4.1 Typeface&lt;/h2&gt;

&lt;p&gt;指一套具有统一设计风格的Font集合，它是一种设计概念，而不是具体的文件&lt;/p&gt;

&lt;h2 id=&quot;42-font&quot;&gt;4.2 Font&lt;/h2&gt;

&lt;p&gt;Font可以理解成Typeface的某个具体实现。&lt;/p&gt;

&lt;p&gt;以Helvetica为例：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Typeface：Helvetica&lt;/li&gt;
  &lt;li&gt;Font：
    &lt;ul&gt;
      &lt;li&gt;Helvetica Regular.ttf&lt;/li&gt;
      &lt;li&gt;Helvetica Bold.ttf&lt;/li&gt;
      &lt;li&gt;Helvetica Italic.ttf&lt;/li&gt;
      &lt;li&gt;Helvetica Bold Italic.ttf&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;43-font-family&quot;&gt;4.3 Font Family&lt;/h2&gt;

&lt;p&gt;Font Family是一组属于同一个Typeface的字体（Fonts），它们共享设计风格，只是字重/宽度/样式不同。&lt;/p&gt;

&lt;p&gt;比如：Helvetica是一个Font Family，里面包含字体：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Helvetica Regular&lt;/li&gt;
  &lt;li&gt;Helvetica Bold&lt;/li&gt;
  &lt;li&gt;Helvetica Italic&lt;/li&gt;
  &lt;li&gt;Helvetica Bold Italic&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;44-font-descriptor&quot;&gt;4.4 Font Descriptor&lt;/h2&gt;

&lt;p&gt;Font Descriptor（字体描述符）是一种属性集合（Font Family、Font Weight、样式 (italic/oblique)、大小等），用来描述或查询一个字体；它不是字体文件，而是一个“过滤条件”或“配置对象”，在 CoreText 里对应 &lt;code class=&quot;highlighter-rouge&quot;&gt;CTFontDescriptor&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;Font Descriptor可以用于匹配系统中符合条件的字体，也可以用它来派生一个具体的CTFont，如：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 这里的 descriptor 只是描述条件，真正的字体对象是 font&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;descriptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontDescriptorCreateWithAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;kCTFontFamilyNameAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Microsoft YaHei&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;kCTFontWeightTrait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontCreateWithFontDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;45-font-collections&quot;&gt;4.5 Font Collections&lt;/h2&gt;

&lt;p&gt;Font Collections是一组字体的集合，通常用于检索和筛选，在 CoreText 里对应CTFontCollection。&lt;/p&gt;

&lt;p&gt;它可以包含系统中所有可用字体，也可以按条件过滤出子集，主要用途有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;枚举系统安装的字体&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;根据 &lt;code class=&quot;highlighter-rouge&quot;&gt;Font Descriptor&lt;/code&gt; 找到所有匹配的字体&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;做字体选择器 UI（比如 Word 里的字体下拉框）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;46-小结&quot;&gt;4.6 小结&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/一文读懂字符、字形、字体/Font.png&quot; alt=&quot;Font&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;47-glyph与font的关系&quot;&gt;4.7 Glyph与Font的关系&lt;/h2&gt;

&lt;p&gt;简单理解，Font里存储了Glyph的绘制样式，Glyph与Unicode的映射关系等。&lt;/p&gt;

&lt;p&gt;Font里有各种各样的表，存储了Unicode code point与GlyphID的映射关系，每个Glyph绘制时的advance width 和left side bearing等，后续会有单独的文章详细解析Font文件内容，这里先理解二者的概念。&lt;/p&gt;

&lt;h1 id=&quot;五文字排版的基本概念&quot;&gt;五、文字排版的基本概念&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;基本概念&lt;/th&gt;
      &lt;th&gt;解释&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics&lt;/td&gt;
      &lt;td&gt;由字体设计师提供，用于描述每个Glyph周围的间距&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;advance width&lt;/td&gt;
      &lt;td&gt;前进宽度，基线方向到下一个Glyph origin的距离，或者理解为字形绘制完后，光标应该前进多少距离&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;left-side bearing&lt;/td&gt;
      &lt;td&gt;Glyph origin与Glyph左侧的间距&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;right-side bearing&lt;/td&gt;
      &lt;td&gt;Glyph右侧与advance width终点的距离&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ascent&lt;/td&gt;
      &lt;td&gt;Glyph origin到Font中最高Glyph的顶部距离&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;descent&lt;/td&gt;
      &lt;td&gt;Glyph origin到Font中最低Glyph的底部距离&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bounding box&lt;br /&gt;bounding rectangle&lt;/td&gt;
      &lt;td&gt;包含Glyph可视区域（注意非advance width）最小rect&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;kerning&lt;/td&gt;
      &lt;td&gt;通常，Glyph一般按advance width排列，但为了提高可读性，通常会引入kerning来扩大或缩小两个glyph之间的间距，比如W和A：&lt;br /&gt;&lt;img src=&quot;/img/post/一文读懂字符、字形、字体/kerning.png&quot; alt=&quot;kerning&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;leading/linegap&lt;/td&gt;
      &lt;td&gt;line之间的添加的距离&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lineHeight&lt;/td&gt;
      &lt;td&gt;lineHeight = ascent + descent + leading&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;一图胜过千言，贴两张经典的图：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;图一&lt;/th&gt;
      &lt;th&gt;图二&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/一文读懂字符、字形、字体/glyph_1.png&quot; alt=&quot;glyph_1&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/一文读懂字符、字形、字体/glyph_2.png&quot; alt=&quot;glyph_2&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;更多精彩内容欢迎关注🌍公众号：非专业程序员Ping&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 13 Sep 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/09/13/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%E5%AD%97%E7%AC%A6-%E5%AD%97%E5%BD%A2-%E5%AD%97%E4%BD%93/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/09/13/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%E5%AD%97%E7%AC%A6-%E5%AD%97%E5%BD%A2-%E5%AD%97%E4%BD%93/</guid>
        
        <category>跨端渲染</category>
        
        <category>Font</category>
        
        
      </item>
    
      <item>
        <title>Text Handling</title>
        <description>&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;MacOS上系统字体路径一般为&lt;code class=&quot;highlighter-rouge&quot;&gt;/System/Library/Fonts/&lt;/code&gt;，可以看到有ttc、ttf，有什么区别&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.ttf&lt;/code&gt; (TrueType Font)&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;单字体文件&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;包含一整套字体（一个 font），包括 glyph 轮廓、metrics、cmap 等表。&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;每个 &lt;code class=&quot;highlighter-rouge&quot;&gt;.ttf&lt;/code&gt; 文件通常只对应一个 &lt;strong&gt;字体样式&lt;/strong&gt;（例如 &lt;em&gt;Microsoft YaHei Regular&lt;/em&gt;）。&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;适合单独分发、安装。&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.ttc&lt;/code&gt; (TrueType Collection)&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;字体集合文件 (TrueType Collection)&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;内部可以包含多个 TrueType 字体（多个 &lt;code class=&quot;highlighter-rouge&quot;&gt;.ttf&lt;/code&gt; 打包在一起）。&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;这些字体通常共享某些表（比如 glyph 轮廓、cmap），减少冗余，提高存储效率。&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;常用于一个 typeface 的多个变体（Regular, Bold, Italic, Light…）。&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TrueType和OpenType的区别：简单说就是OpenType是TrueType的扩展&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;OpenType一般以otf为后缀，但也不能简单的根据文件名后缀区分二者，文件扩展名只是习惯，并不能完全说明内部格式。真正的区别要看字体表结构和 outline 格式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/Users/ping/Desktop/husteryp.github.io/img/post/Font/TrueType vs OpenType.png&quot; alt=&quot;TrueType vs OpenType&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Font里面有什么：可以归类metrics、advance width、ascent、descent等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如下是NewYork.ttf字体文件的内容：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Font/NewYork-ttf.png&quot; alt=&quot;NewYork-ttf&quot; /&gt;&lt;/p&gt;

&lt;p&gt;分别解释下字体文件中的内容：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GlyphOrder：glyphID与glyphName的映射&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;GlyphOrder&amp;gt;
  &amp;lt;GlyphID id=&quot;0&quot; name=&quot;.notdef&quot;/&amp;gt;
  &amp;lt;GlyphID id=&quot;1&quot; name=&quot;.null&quot;/&amp;gt;
  &amp;lt;GlyphID id=&quot;2&quot; name=&quot;nonmarkingreturn&quot;/&amp;gt;
  &amp;lt;GlyphID id=&quot;3&quot; name=&quot;space&quot;/&amp;gt;
  &amp;lt;GlyphID id=&quot;4&quot; name=&quot;A&quot;/&amp;gt;
  ...
&amp;lt;/GlyphOrder&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;head：Font Header，存储一些全局信息；关注几个值
    &lt;ul&gt;
      &lt;li&gt;unitsPerEm：可以发现，字体表里的数值一般都很大，其单位并不是像素值，而是 &lt;code class=&quot;highlighter-rouge&quot;&gt;em unit&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;unitsPerEm value=&quot;2048&quot;/&amp;gt;&lt;/code&gt;表示&lt;code class=&quot;highlighter-rouge&quot;&gt;2048 units = 1 em = 设计的字高&lt;/code&gt;，当字体在屏幕上以 16px 渲染时，1 em = 16px，其他数值可按比例换算&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;head&amp;gt;
  &amp;lt;unitsPerEm value=&quot;2048&quot;/&amp;gt;
  ...
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;hhea：Horizontal Header，横向排版信息，关注几个值
    &lt;ul&gt;
      &lt;li&gt;ascent &amp;amp; descent：假设字体大小16，unitsPerEm如上为2048，则按比例换算：&lt;code class=&quot;highlighter-rouge&quot;&gt;ascent = 1950/2048 * 16 ≈ 15.2&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;descent ≈ 494/2048 * 16 ≈ 3.8&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;hhea&amp;gt;
	&amp;lt;!-- MacOS一般使用hhea里的ascent、descent；OS_2表里还有几个ascent、descent，一般在Windows或专业设计上使用 --&amp;gt;
  &amp;lt;ascent value=&quot;1950&quot;/&amp;gt;
  &amp;lt;descent value=&quot;-494&quot;/&amp;gt;
  &amp;lt;lineGap value=&quot;0&quot;/&amp;gt;
  &amp;lt;advanceWidthMax value=&quot;2818&quot;/&amp;gt;
  &amp;lt;minLeftSideBearing value=&quot;-693&quot;/&amp;gt;
  &amp;lt;minRightSideBearing value=&quot;-693&quot;/&amp;gt;
  ...
&amp;lt;/hhea&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;maxp：字体里 glyph 的数量，以及一些最大值参数&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;maxp&amp;gt;
  &amp;lt;numGlyphs value=&quot;1811&quot;/&amp;gt;
  ...
&amp;lt;/maxp&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;OS_2：参见&lt;a href=&quot;https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6OS2.html&quot;&gt;Apple文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;OS_2&amp;gt;
	&amp;lt;!-- 下标的大小和偏移 --&amp;gt;
  &amp;lt;ySubscriptXSize value=&quot;650&quot;/&amp;gt;
  &amp;lt;ySubscriptYSize value=&quot;600&quot;/&amp;gt;
  &amp;lt;ySubscriptXOffset value=&quot;0&quot;/&amp;gt;
  &amp;lt;ySubscriptYOffset value=&quot;75&quot;/&amp;gt;
  
  &amp;lt;!-- 上标的大小和偏移 --&amp;gt;
  &amp;lt;ySuperscriptXSize value=&quot;650&quot;/&amp;gt;
  &amp;lt;ySuperscriptYSize value=&quot;600&quot;/&amp;gt;
  &amp;lt;ySuperscriptXOffset value=&quot;0&quot;/&amp;gt;
  &amp;lt;ySuperscriptYOffset value=&quot;350&quot;/&amp;gt;

  &amp;lt;!-- 删除线的粗细和垂直位置 --&amp;gt;
  &amp;lt;yStrikeoutSize value=&quot;12&quot;/&amp;gt;
  &amp;lt;yStrikeoutPosition value=&quot;620&quot;/&amp;gt;

  &amp;lt;!-- 
  ulUnicodeRange表示字体支持的Unicode范围，用ulUnicodeRange1 … ulUnicodeRange4 这 4 个 32 位字段来表示，总共 128 个 bit，对应 128 个 Unicode Block，如果某 bit = 1，表示字体支持该区块中的至少一些字符
  映射表见：https://learn.microsoft.com/en-us/typography/opentype/spec/os2#ur
  Windows系统用 ulUnicodeRange 来挑选字体；
  macOS/iOS系统更依赖 cmap 表（精确的字符映射），ulUnicodeRange 只是附加信息；
  浏览器排版一般直接查 cmap，但 ulUnicodeRange 有时用于字体 fallback 策略；
  --&amp;gt;
  &amp;lt;ulUnicodeRange1 value=&quot;10100001 00000000 00000010 11111111&quot;/&amp;gt;
  &amp;lt;ulUnicodeRange2 value=&quot;00000010 00000000 00100000 01011110&quot;/&amp;gt;
  &amp;lt;ulUnicodeRange3 value=&quot;00000000 00000000 00000000 00000000&quot;/&amp;gt;
  &amp;lt;ulUnicodeRange4 value=&quot;00000000 00000000 00000000 00000000&quot;/&amp;gt;

  &amp;lt;!-- 专业排版（比如 InDesign）一般使用sTypoAscender、sTypoDescender --&amp;gt;
  &amp;lt;sTypoAscender value=&quot;1950&quot;/&amp;gt;
  &amp;lt;sTypoDescender value=&quot;-494&quot;/&amp;gt;
  &amp;lt;sTypoLineGap value=&quot;0&quot;/&amp;gt;

  &amp;lt;!-- Windows一般使用sTypoAscender、sTypoDescender --&amp;gt;
  &amp;lt;usWinAscent value=&quot;1950&quot;/&amp;gt;
  &amp;lt;usWinDescent value=&quot;494&quot;/&amp;gt;
  ...
&amp;lt;/OS_2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;hmtx：Horizontal Metrics，记录每个 glyph 的 advance width 和left side bearing
    &lt;ul&gt;
      &lt;li&gt;当排版引擎绘制一个字形时：
        &lt;ol&gt;
          &lt;li&gt;把字形放在当前点 + lsb 偏移位置。&lt;/li&gt;
          &lt;li&gt;画完后，将光标向右移动 &lt;code class=&quot;highlighter-rouge&quot;&gt;advanceWidth&lt;/code&gt;，准备绘制下一个字形。&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;hmtx&amp;gt;
  &amp;lt;mtx name=&quot;.notdef&quot; width=&quot;2048&quot; lsb=&quot;199&quot;/&amp;gt;
  &amp;lt;mtx name=&quot;.null&quot; width=&quot;0&quot; lsb=&quot;0&quot;/&amp;gt;
  &amp;lt;mtx name=&quot;A&quot; width=&quot;1244&quot; lsb=&quot;-16&quot;/&amp;gt;
  ...
&amp;lt;/hmtx&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;cmap：Character to Glyph Mapping，定义 Unicode code point → glyph ID 的映射&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;cmap&amp;gt;
  &amp;lt;tableVersion version=&quot;0&quot;/&amp;gt;
  &amp;lt;cmap_format_4 platformID=&quot;0&quot; platEncID=&quot;3&quot; language=&quot;0&quot;&amp;gt;
  	&amp;lt;!-- A的Unicode code point是0x41 --&amp;gt;
    &amp;lt;map code=&quot;0x41&quot; name=&quot;A&quot;/&amp;gt;&amp;lt;!-- LATIN CAPITAL LETTER A --&amp;gt;
    &amp;lt;map code=&quot;0x42&quot; name=&quot;B&quot;/&amp;gt;&amp;lt;!-- LATIN CAPITAL LETTER B --&amp;gt;
    &amp;lt;map code=&quot;0x43&quot; name=&quot;C&quot;/&amp;gt;&amp;lt;!-- LATIN CAPITAL LETTER C --&amp;gt;
    &amp;lt;map code=&quot;0x44&quot; name=&quot;D&quot;/&amp;gt;&amp;lt;!-- LATIN CAPITAL LETTER D --&amp;gt;
    &amp;lt;map code=&quot;0x45&quot; name=&quot;E&quot;/&amp;gt;&amp;lt;!-- LATIN CAPITAL LETTER E --&amp;gt;
    &amp;lt;map code=&quot;0x46&quot; name=&quot;F&quot;/&amp;gt;&amp;lt;!-- LATIN CAPITAL LETTER F --&amp;gt;
    &amp;lt;map code=&quot;0x47&quot; name=&quot;G&quot;/&amp;gt;&amp;lt;!-- LATIN CAPITAL LETTER G --&amp;gt;
    &amp;lt;map code=&quot;0x48&quot; name=&quot;H&quot;/&amp;gt;&amp;lt;!-- LATIN CAPITAL LETTER H --&amp;gt;
    ...
  &amp;lt;/cmap_format_4&amp;gt;
  ...
&amp;lt;/cmap&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;loca：Index to Location，记录每个 glyph 在 glyf 表中的偏移量。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;glyf：Glyph Data，真正的字形轮廓（矢量点、轮廓、控制点）；cmap 表负责把 Unicode 字符映射到 glyphID，而 glyf 表告诉渲染系统该 glyph 的具体形状&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;glyf&amp;gt;
    &amp;lt;TTGlyph name=&quot;A&quot; xMin=&quot;-16&quot; yMin=&quot;0&quot; xMax=&quot;1260&quot; yMax=&quot;1444&quot;&amp;gt;
    &amp;lt;contour&amp;gt;
      &amp;lt;pt x=&quot;1086&quot; y=&quot;213&quot; on=&quot;1&quot;/&amp;gt;
      &amp;lt;pt x=&quot;1113&quot; y=&quot;137&quot; on=&quot;0&quot;/&amp;gt;
      &amp;lt;pt x=&quot;1161&quot; y=&quot;50&quot; on=&quot;0&quot;/&amp;gt;
      &amp;lt;pt x=&quot;1219&quot; y=&quot;9&quot; on=&quot;0&quot;/&amp;gt;
      &amp;lt;pt x=&quot;1260&quot; y=&quot;1&quot; on=&quot;1&quot;/&amp;gt;
      &amp;lt;pt x=&quot;1260&quot; y=&quot;0&quot; on=&quot;1&quot;/&amp;gt;
      &amp;lt;pt x=&quot;793&quot; y=&quot;0&quot; on=&quot;1&quot;/&amp;gt;
      &amp;lt;pt x=&quot;793&quot; y=&quot;1&quot; on=&quot;1&quot;/&amp;gt;
      &amp;lt;pt x=&quot;845&quot; y=&quot;7&quot; on=&quot;0&quot;/&amp;gt;
      &amp;lt;pt x=&quot;897&quot; y=&quot;54&quot; on=&quot;0&quot;/&amp;gt;
      &amp;lt;pt x=&quot;899&quot; y=&quot;143&quot; on=&quot;0&quot;/&amp;gt;
      &amp;lt;pt x=&quot;874&quot; y=&quot;213&quot; on=&quot;1&quot;/&amp;gt;
      &amp;lt;pt x=&quot;528&quot; y=&quot;1200&quot; on=&quot;1&quot;/&amp;gt;
      &amp;lt;pt x=&quot;528&quot; y=&quot;1200&quot; on=&quot;1&quot;/&amp;gt;
      &amp;lt;pt x=&quot;220&quot; y=&quot;292&quot; on=&quot;1&quot;/&amp;gt;
      &amp;lt;pt x=&quot;184&quot; y=&quot;186&quot; on=&quot;0&quot;/&amp;gt;
      &amp;lt;pt x=&quot;170&quot; y=&quot;66&quot; on=&quot;0&quot;/&amp;gt;
      &amp;lt;pt x=&quot;224&quot; y=&quot;11&quot; on=&quot;0&quot;/&amp;gt;
      &amp;lt;pt x=&quot;290&quot; y=&quot;1&quot; on=&quot;1&quot;/&amp;gt;
      &amp;lt;pt x=&quot;290&quot; y=&quot;0&quot; on=&quot;1&quot;/&amp;gt;
      &amp;lt;pt x=&quot;-16&quot; y=&quot;0&quot; on=&quot;1&quot;/&amp;gt;
      &amp;lt;pt x=&quot;-16&quot; y=&quot;1&quot; on=&quot;1&quot;/&amp;gt;
      &amp;lt;pt x=&quot;27&quot; y=&quot;9&quot; on=&quot;0&quot;/&amp;gt;
      &amp;lt;pt x=&quot;89&quot; y=&quot;59&quot; on=&quot;0&quot;/&amp;gt;
      &amp;lt;pt x=&quot;151&quot; y=&quot;181&quot; on=&quot;0&quot;/&amp;gt;
      &amp;lt;pt x=&quot;193&quot; y=&quot;297&quot; on=&quot;1&quot;/&amp;gt;
      &amp;lt;pt x=&quot;614&quot; y=&quot;1444&quot; on=&quot;1&quot;/&amp;gt;
      &amp;lt;pt x=&quot;648&quot; y=&quot;1444&quot; on=&quot;1&quot;/&amp;gt;
    &amp;lt;/contour&amp;gt;
    &amp;lt;contour&amp;gt;
      &amp;lt;pt x=&quot;290&quot; y=&quot;532&quot; on=&quot;1&quot;/&amp;gt;
      &amp;lt;pt x=&quot;294&quot; y=&quot;544&quot; on=&quot;1&quot;/&amp;gt;
      &amp;lt;pt x=&quot;859&quot; y=&quot;544&quot; on=&quot;1&quot;/&amp;gt;
      &amp;lt;pt x=&quot;860&quot; y=&quot;532&quot; on=&quot;1&quot;/&amp;gt;
    &amp;lt;/contour&amp;gt;
    &amp;lt;instructions/&amp;gt;
  &amp;lt;/TTGlyph&amp;gt;
  ...
&amp;lt;/glyf&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;name：字体名称、子家族、版本、版权、厂商信息等字符串。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;post：PostScript，与 PostScript 兼容的信息，比如 italic angle、underline position、glyph 名称表。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;GDEF&lt;/strong&gt; (Glyph Definition Table)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OpenType Layout 表之一，标记 glyph 类别（基字、附加字、标点等）。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;字符 → cmap → glyph
            ↓
           GDEF（分类/属性）
            ↓
           GSUB（替换字形，例如连字）
            ↓
           GPOS（调整位置，例如 kerning、mark 对齐）
            ↓
        绘制 glyph（glyf 表）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;GPOS&lt;/strong&gt; (Glyph Positioning Table)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OpenType Layout 表之一，定义字形间的精细位置调整（如 kerning、上下标偏移）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;GSUB&lt;/strong&gt; (Glyph Substitution Table)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OpenType Layout 表之一，定义字形替换规则（连字、上下文替换，拉丁/阿拉伯变体）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;HVAR&lt;/strong&gt; (Horizontal Variations)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可变字体表，用于调整字宽的变化（横向）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;MVAR&lt;/strong&gt; (Metrics Variations)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可变字体表，支持字度量参数（ascender、descender 等）的变化。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;STAT&lt;/strong&gt; (Style Attributes Table)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OpenType Variable Font 的样式坐标信息（比如 Weight=400, Width=100）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;avar&lt;/strong&gt; (Axis Variations)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Variable Font 表，调整 variation axis 的映射关系（非线性调节）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;fvar&lt;/strong&gt; (Font Variations)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Variable Font 的主要定义，列出轴（Axis，比如 Weight, Width, Optical Size）和实例（Regular, Bold…）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;gvar&lt;/strong&gt; (Glyph Variations)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Variable Font 的关键表，定义 glyph 在不同轴下如何变形。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;疑问：同一个字体中ascent、descent都相同吗？因为都是和Font中最高/低glyph做比较（或者这个描述对吗）&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为什么descent有时候是负数？&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;层级关系图&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://developer.apple.com/library/archive/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/Art/text_kit_arch_2x.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CoreText的层级
    &lt;ul&gt;
      &lt;li&gt;glyph run：包含一组连续的有相同样式和方向的glyph&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://developer.apple.com/library/archive/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/Art/core_text_arch_2x.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CTFont：可以用于查询：character-to-glyph mapping, its encoding, glyph data, and metrics such as ascent, leading,&lt;/li&gt;
  &lt;li&gt;font cascading：字体级联；Core Text 还提供了一种称为字体级联的自动字体替换机制。
    &lt;ul&gt;
      &lt;li&gt;字体级联基于级联列表（cascade lists），级联列表是一组有序的font descriptors数组；系统有一个默认的级联列表，根据用户当前的语言设置和font设置而不同&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/coretext/1509506-ctfontcreateforstring&quot;&gt;CTFontCreateForString&lt;/a&gt;使用了级联列表，可以逆向看下&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;可以逆向下实现&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preferredFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forTextStyle&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TextStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFont&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;参考&quot;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;https://developer.apple.com/library/archive/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009542-CH1-SW1&lt;/li&gt;
  &lt;li&gt;https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010156-CH1-SW1&lt;/li&gt;
  &lt;li&gt;https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010156-CH1-SW1&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 03 Sep 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/09/03/TextHandling/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/09/03/TextHandling/</guid>
        
        <category>跨端渲染</category>
        
        <category>Font</category>
        
        
      </item>
    
      <item>
        <title>第一个Flutter应用</title>
        <description>&lt;h1 id=&quot;一环境搭建&quot;&gt;一、环境搭建&lt;/h1&gt;

&lt;p&gt;添加Flutter镜像：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PUB_HOSTED_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://pub.flutter-io.cn
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FLUTTER_STORAGE_BASE_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://storage.flutter-io.cn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下载Flutter SDK：https://docs.flutter.cn/install/archive&lt;/p&gt;

&lt;p&gt;添加Flutter SDK环境变量：&lt;code class=&quot;highlighter-rouge&quot;&gt;export PATH=&quot;$PWD/flutter/bin:$PATH&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;运行&lt;code class=&quot;highlighter-rouge&quot;&gt;flutter doctor&lt;/code&gt;验证安装是否成功：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Flutter/Flutter Doctor.png&quot; alt=&quot;Flutter Doctor&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我使用的是iOS开发环境，没装Android环境，也OK&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;二构建第一个flutter应用&quot;&gt;二、构建第一个Flutter应用&lt;/h1&gt;

&lt;p&gt;VSCode安装flutter插件，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;command + shift + p&lt;/code&gt;选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Flutter: New Project&lt;/code&gt;，之后按需选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt;（自带一个计数器的App）或者&lt;code class=&quot;highlighter-rouge&quot;&gt;Empty Application&lt;/code&gt;：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;New Project&lt;/th&gt;
      &lt;th&gt;Project Template&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/Flutter/New Project.png&quot; alt=&quot;New Project&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/Flutter/Project Template.png&quot; alt=&quot;Project Template&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;我这里选的Application，点击main.dart下的run：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Flutter/run.png&quot; alt=&quot;run&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到运行效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Flutter/FlutterDemo.png&quot; alt=&quot;FlutterDemo&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 31 Aug 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/08/31/%E7%AC%AC%E4%B8%80%E4%B8%AAFlutter%E5%BA%94%E7%94%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/08/31/%E7%AC%AC%E4%B8%80%E4%B8%AAFlutter%E5%BA%94%E7%94%A8/</guid>
        
        <category>跨端渲染</category>
        
        <category>Flutter</category>
        
        
      </item>
    
      <item>
        <title>一文读懂字符与编码</title>
        <description>&lt;h1 id=&quot;一字符character&quot;&gt;一、字符/Character&lt;/h1&gt;

&lt;p&gt;对用户可见的“一个字符”，通常是我们在屏幕上看到的一个字母、数字、emoji 或组合字符。&lt;/p&gt;

&lt;p&gt;比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;👨‍👩‍👧‍👦&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;二字符编码标准字符集&quot;&gt;二、字符编码标准/字符集&lt;/h1&gt;

&lt;p&gt;字符编码标准定义的是如何将字符映射到唯一编码，常见的字符编码标准比如&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;GBK&lt;/code&gt;等&lt;/p&gt;

&lt;h2 id=&quot;21-ascii&quot;&gt;2.1 ASCII&lt;/h2&gt;

&lt;p&gt;ASCII（7位）定义了 128 个字符的唯一编码，包括数字0到9、小写字母a到z、大写字母A到Z以及常用标点符号等。&lt;/p&gt;

&lt;h2 id=&quot;22-unicode&quot;&gt;2.2 Unicode&lt;/h2&gt;

&lt;p&gt;Unicode又叫万国码，目标是为所有字符定义唯一编码（Code Point）。为了解决ASCII/GBK不能定义全部字符的问题。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;U+0061&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;👨&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;U+1F468&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;Unicode只负责分配码位（Code Point），并不决定具体的存储形式。&lt;/p&gt;

&lt;p&gt;Unicode的前 128 个码点与ASCII相同。&lt;/p&gt;

&lt;h3 id=&quot;221-code-point&quot;&gt;2.2.1 Code Point&lt;/h3&gt;

&lt;p&gt;Code Point也叫码位，Unicode中为每个字符分配的唯一编码。&lt;/p&gt;

&lt;p&gt;一个字符可以对应一个或多个Code Point，比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0061&lt;/code&gt;，对应 1 个Code Point&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;👨‍👩‍👧‍👦&lt;/code&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;U+1F468 (👨) + U+200D (ZWJ) + U+1F469 (👩) + U+200D (ZWJ) + U+1F467 (👧) + U+200D (ZWJ) + U+1F466 (👦)&lt;/code&gt;对应 7 个Code Point&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;U+00E9&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0065 + U+0301&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;备注：&lt;/p&gt;

  &lt;p&gt;在Unicode中，&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;实际上有两种表示方式：&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;单一字符表示法&lt;/strong&gt;：即直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;U+00E9&lt;/code&gt;这个单独的Unicode码位表示&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;。&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;组合字符表示法&lt;/strong&gt;：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0065&lt;/code&gt;（字母&lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;）和&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0301&lt;/code&gt;（重音符号）两个Unicode码位来表示一个&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;字符。&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;为什么会有这两种表示法？&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;历史原因&lt;/strong&gt;：Unicode设计时考虑到了不同语言的需求，许多语言（如法语、西班牙语等）使用带有重音符号的字符，因此，Unicode同时支持这两种表示方式。&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;兼容性&lt;/strong&gt;：一些旧的系统或字体可能只支持分解字符表示法，因此，Unicode也保留了这种组合字符的方式，以提高兼容性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;222-code-unit&quot;&gt;2.2.2 Code Unit&lt;/h3&gt;

&lt;p&gt;Code Unit也叫码元（代码单元），表示计算机中实际存储Unicode的基本单位，取决于编码方式。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;： &lt;code class=&quot;highlighter-rouge&quot;&gt;Code Unit&lt;/code&gt;是 1 字节（8 Bit）；比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;在UTF-8编码下占 1 个字节，表示为&lt;code class=&quot;highlighter-rouge&quot;&gt;0x61&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-16&lt;/code&gt;： &lt;code class=&quot;highlighter-rouge&quot;&gt;Code Unit&lt;/code&gt;是 2 字节（16 Bit）；比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;在UTF-16编码下占 2 个字节，表示为&lt;code class=&quot;highlighter-rouge&quot;&gt;0x0061&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-32&lt;/code&gt;： &lt;code class=&quot;highlighter-rouge&quot;&gt;Code Unit&lt;/code&gt;是 4 字节（32 Bit）；比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;在UTF-32编码下占 4 个字节，表示为&lt;code class=&quot;highlighter-rouge&quot;&gt;0x00000061&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;三字符编码方式&quot;&gt;三、字符编码方式&lt;/h1&gt;

&lt;p&gt;字符编码方式决定了字符如何存储、传输和解码；常见的编码方式有：UTF-8、UTF-16、UTF-32等&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;：可变长度，用 1 到 4 个字节来存储 Unicode 字符；为了节省存储资源。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-16&lt;/code&gt;：可变长度，用 2 或 4 个字节存储字符。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-32&lt;/code&gt;：固定长度，每个字符始终使用 4 字节存储。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;的Code Point是：&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0065 + U+0301&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当以&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-32&lt;/code&gt;方式编码时，每个Code Point未超过4字节，所以表示为：0x00000065，0x00000301&lt;/p&gt;

&lt;p&gt;当以&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-16&lt;/code&gt;方式编码时，每个Code Point未超过2字节，所以表示为：0x0065，0x0301&lt;/p&gt;

&lt;p&gt;当以&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;方式编码时，0x0301值超过了128，需要按&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;格式拆分为0xCC，0x81，所以表示为：0x65，0xCC，0x81&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Q：&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;编码为什么是按128做比较，按理说1字节（0xFF）表示的最大值是255？&lt;/p&gt;

  &lt;p&gt;A：有两个原因：一是为了与&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;兼容，&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;只支持了128个字符编码，在&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;编码中，前128位与&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;编码相同；二是&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;编码中，会将第一个字节的高位部分用来标识这个字符的编码长度，具体为：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0xxxxxxx&lt;/code&gt;：表示 1 字节字符（&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt; 范围）&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;110xxxxx&lt;/code&gt;：表示 2 字节字符&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1110xxxx&lt;/code&gt;：表示 3 字节字符&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;11110xxx&lt;/code&gt;：表示 4 字节字符&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;img src=&quot;/img/post/Font/UTF-8编码规则.png&quot; alt=&quot;UTF-8编码规则&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 30 Aug 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/08/30/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%E5%AD%97%E7%AC%A6%E4%B8%8E%E7%BC%96%E7%A0%81/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/08/30/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%E5%AD%97%E7%AC%A6%E4%B8%8E%E7%BC%96%E7%A0%81/</guid>
        
        <category>跨端渲染</category>
        
        <category>Font</category>
        
        
      </item>
    
      <item>
        <title>虚拟内存</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;虚拟内存算是操作系统中比较重要的一部分了，内容也很多，早在看操作系统相关书籍的时候就有想要总结这一部分，但是功力不够，总感觉串不起来；经过秋招这几个月对基础知识的回顾，感觉对虚拟内存这一部分有了自己的一个认识和体系，遂趁这个机会述以成文。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;一-背景&quot;&gt;一. 背景&lt;/h2&gt;

&lt;p&gt;在计算机硬件体系结构中，总有这样一种规律：性能越好，价格越高；为了中和性价比，在计算机硬件体系中多采用逐级缓存的结构，通过软件算法实现访问性能与价格成本的平衡，这在计算机的存储体系中体现的尤为明显。&lt;/p&gt;

&lt;h3 id=&quot;11-dram-vs-sram&quot;&gt;1.1 DRAM vs SRAM&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DRAM&lt;/strong&gt;：动态随机访问存储器；价格低，访问速度较慢，耗电量较大，一般用于做主存。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SRAM&lt;/strong&gt;：静态随机访问存储器；价格高，访问速度快，耗电量低，一般用于做高速缓存。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;12-存储器层次结构&quot;&gt;1.2 存储器层次结构&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/VirtualMemory/存储器层次结构.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图，存储器的层次结构实际上是一个金字塔形状，从上到下，表示价格越来越低，容量越来越大；从上到下依次是：寄存器，L1，L2，L3三级高速缓存，主存，磁盘缓存，网络缓存。存储器的层次结构实际上也是一个逐级缓存的结构，其中，虚拟内存主要作用于主存与磁盘缓存之间，负责主存与磁盘之间的页面交换。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;二-虚拟内存的目的&quot;&gt;二. 虚拟内存的目的&lt;/h2&gt;

&lt;p&gt;虚拟内存有三个目的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将主存视为磁盘的高速缓存，在主存中只保留活动区域，提高主存利用率&lt;/li&gt;
  &lt;li&gt;为进程提供统一的地址空间，简化内存管理&lt;/li&gt;
  &lt;li&gt;保护进程地址空间不被其他进程破坏&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虚拟内存如何达到这三个目的，将在后文讲解。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;三-虚拟内存的原理&quot;&gt;三. 虚拟内存的原理&lt;/h2&gt;

&lt;h3 id=&quot;31-基本概念&quot;&gt;3.1 基本概念&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;页表：可以理解为位于主存中的一个大数组，由页表项组成&lt;/li&gt;
  &lt;li&gt;页表项：页表的基本组成单元，页表项分为两个部分：标志位和地址位&lt;/li&gt;
  &lt;li&gt;虚拟页：主存与磁之间的基本传送单元，磁盘地址空间被视为一个个的虚拟页&lt;/li&gt;
  &lt;li&gt;物理页：缓存在主存中的实际单元&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;32-寻址的基本过程&quot;&gt;3.2 寻址的基本过程&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;因为页表其实也是很占内存空间的，所以实际中会采用多级页表和动态创建页表的方式来减小页表大小，这里为了方便了解寻址的整体过程，就以单级页表为例；另外，页表项的高速缓存这里也没有考虑，高速缓存将在下一节介绍。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;主存中有一个页表，页表由页表项组成，将虚拟页映射到物理页；处理器（CPU）进行一次寻址的过程是：处理器生成一个虚拟地址，交给MMU（地址翻译器）进行地址翻译，MMU将虚拟地址转换为页表索引，然后去主存中查找对应的页表项，如果主存中缓存该虚拟页，则主存将虚拟页对应的页表项传送给MMU，之后MMU从页表项计算出物理地址送给主存，主存将物理地址对应的数据通过数据总线送给处理器；如果主存中没有缓存虚拟页对应的物理页，则触发一次缺页异常，由主存从磁盘换取所需虚拟页之后，再次执行导致缺页的指令。&lt;/p&gt;

&lt;p&gt;如下图所示：摘自《深入理解计算机系统》&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/VirtualMemory/寻址的基本过程.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;33-页表缓存&quot;&gt;3.3 页表缓存&lt;/h3&gt;

&lt;p&gt;上文中提过，相比于 L1，L2，L3 三级高速缓存，主存的访问速度还是很慢的（ DRAM 比 SRAM 要慢约十多倍，磁盘比 DRAM 要慢约十万多倍），所以如果每次进行寻址的时候，都按照上述过程，先去主存查找页表项，然后再去主存取对应的物理页，那么，即使每次页面都命中的情况下，每次寻址也需要两次的 DRAM 访问（主存访问），如果算上缺页异常与主存与磁盘的页面替换，耗费的时间将更多。&lt;/p&gt;

&lt;p&gt;为了加速 MMU 地址翻译的过程，会将页表项缓存到 TLB（TLB 见后补充解释） 和 L1 级高速缓存中，因此上述 MMU 进行地址翻译的过程就变成了：MMU 根据虚拟地址从 TLB 中查找页表项，如果找到，则直接进行后续物理地址生成；如果 TLB 未命中，则 MMU 从 L1 级高速缓存中查找对应的页表项，如果命中，则将该页表项缓存在 TLB 中并进行下一步，否则，继续从主存中查找页表项。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;TLB&lt;/strong&gt;：TLB 是一个在 MMU 中的高速缓存，用于缓存页表项；如果 TLB 命中，那么所有的地址翻译都是在芯片上的 MMU 中完成的，因此非常快。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如下图所示：摘自《深入理解计算机系统》&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/VirtualMemory/地址翻译的基本过程.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;34-地址翻译的细节&quot;&gt;3.4 地址翻译的细节&lt;/h3&gt;

&lt;h4 id=&quot;341-从-tlb-查找页表项&quot;&gt;3.4.1 从 TLB 查找页表项&lt;/h4&gt;

&lt;p&gt;处理器生成的虚拟地址如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/VirtualMemory/虚拟地址用于TLB.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TLB 中每一行都保存着一个由单个页表项组成的块，用于组选择和行匹配的索引和标记字段是从虚拟地址中的虚拟页号（VPN）中提取出来的，如果 TLB 有 &lt;code class=&quot;highlighter-rouge&quot;&gt;T = 2^t&lt;/code&gt;个组，那么 TLB 索引（TLBI）是由 VPN 的 t 个最低位组成的，而 TLB 标记（TLBT）是由 VPN 中剩余的位组成的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;更多关于 TLB 查找页表项的细节可参见： https://www.cnblogs.com/alantu2018/p/9000777.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;342-从主存中查找页表项&quot;&gt;3.4.2 从主存中查找页表项&lt;/h4&gt;

&lt;p&gt;如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/VirtualMemory/虚拟地址用于页表.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;虚拟地址由两部分组成：虚拟页号和虚拟页偏移量；虚拟页号可以简单的视为页表索引，如：根据VPN 0 选择页表项0，根据 VPN 1 选择页表项1，依次类推。&lt;/p&gt;

&lt;h4 id=&quot;343-从页表项生成物理地址&quot;&gt;3.4.3 从页表项生成物理地址&lt;/h4&gt;

&lt;p&gt;仍如上图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/VirtualMemory/虚拟地址用于页表.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看出，物理地址最终由两个部分组成：低位是虚拟地址的另一部分，即虚拟页偏移量，高位是页表项的另一部分（页表项还有一部分是标志位，上文介绍过）。&lt;/p&gt;

&lt;p&gt;另外，根据上图，还可以看出&lt;strong&gt;MMU是如何根据页表项判断虚拟页是否在主存中有对应的物理页的&lt;/strong&gt;：上文中说过，页表项分为两部分，其中一部分是一个标志位（即途中的有效位），上图也说的很清楚了，如果有效位为 0 ，说明虚拟页对应的物理页还为被缓存在主存中（缺页），否则，说明命中。&lt;/p&gt;

&lt;h3 id=&quot;35-页表优化&quot;&gt;3.5 页表优化&lt;/h3&gt;

&lt;p&gt;上文提到过，页表占据的内存空间也是可观的；对于一个 32 位的地址空间，4KB 的页面和一个 4 字节的页表项，即使应用所引用的只是虚拟地址空间中很小的一部分，也总是需要一个 4MB 的页表常驻内存。为了优化页表占用的内存空间，实际中常采用多级页表。&lt;/p&gt;

&lt;p&gt;多级页表的基本思路就是，增大单个页表项所能映射的虚拟页的大小，即进行粒度更大的映射（对于常驻内存的页表来说），如：之前一个页表项只能映射 4KB 的虚拟页，如果一个页表项能映射 4MB 的虚拟页的话，页表的大小也会相应的减小很多。&lt;/p&gt;

&lt;p&gt;另外，多级页表还支持动态创建子级页表，即常驻内存的只有粒度最大的一级页表，二级页表等子级页表不需要常驻内存，在进行地址翻译时动态创建即可。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;四-局部性原理与内存抖动&quot;&gt;四. 局部性原理与内存抖动&lt;/h2&gt;

&lt;p&gt;MMU 进行地址翻译以及缺页时进行页面替换的算法在很大程度上都依赖于局部性原理。程序的局部性原理意思是，程序上次用到的数据和代码，在下次访问时很可能也会用到；因此将下次很可能会用到的数据缓存在访问速度更快的高速缓存中，将比较可观的提升程序性能。&lt;/p&gt;

&lt;p&gt;比较常见的页面替换算法是：LRU 算法，即最近最少使用算法，以及其他更多页面置换算法可参见： https://www.cnblogs.com/dolphin0520/p/3749259.html&lt;/p&gt;

&lt;p&gt;内存抖动的意思是，处理器进行数据访问时，不断产生缺页中断，不断进行页面置换，造成程序运行缓慢。出现内存抖动一般有两个原因：一个是页面置换算法的缺陷，差的页面置换算法通常会导致页面命中率的降低，造成频繁的缺页中断与页面置换；另一个也可能与我们自己写的程序有关。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;五-虚拟内存与进程&quot;&gt;五. 虚拟内存与进程&lt;/h2&gt;

&lt;p&gt;本文开始讲虚拟内存的目的时，提到了虚拟内存对于进程的两个目的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;为进程提供统一的地址空间，简化内存管理：&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;操作系统为进程分配地址空间时，由于是通过虚拟内存进行虚拟页与物理页的映射，所以，对于进程而言，物理内存在地址空间上可以是不连续的（另外，这里还想提一点的是，这种不连续的映射，可以减少内存碎片与不同进程数据的共享，即通过虚拟内存将多个进程映射到同一虚拟页即可实现进程间数据共享）；同时，对于每一个进程而言，其地址空间都是由 0 开始往高地址增长（因为有 MMU 进行地址翻译）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;保护进程地址空间不被其他进程破坏：&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;进程在通过虚拟内存进行数据访问时，虚拟内存可以添加一些权限校验，防止进程间数据相互访问。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;六-参考&quot;&gt;六. 参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;《深入理解计算机系统》&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 02 Nov 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/11/02/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/11/02/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</guid>
        
        <category>操作系统</category>
        
        
      </item>
    
      <item>
        <title>iOS核心动画高级技巧Tips</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;核心动画高级技巧摘要&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;一-图层树&quot;&gt;一. 图层树&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;和UIView最大的不同是CALayer不处理用户的交互；CALayer并不清楚具体的响应链，即使它提供了一些方法来判断是否一个触点在图层的范围之内&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;每一个UIview都有一个CALayer实例的图层属性&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;UIView没有暴露出来的CALayer的功能：
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;阴影，圆角，带颜色的边框&lt;/li&gt;
        &lt;li&gt;3D变换&lt;/li&gt;
        &lt;li&gt;非矩形范围&lt;/li&gt;
        &lt;li&gt;透明遮罩&lt;/li&gt;
        &lt;li&gt;多级非线性动画&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;当满足以下条件的时候，你可能更需要使用CALayer而不是UIView:
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;开发同时可以在Mac OS上运行的跨平台应用&lt;/li&gt;
        &lt;li&gt;使用多种CALayer的子类（见第六章，“特殊的图层“），并且不想创建额外的UIView去包封装它们所有&lt;/li&gt;
        &lt;li&gt;做一些对性能特别挑剔的工作，比如对UIView一些可忽略不计的操作都会引起显著的不同（尽管如此，你可能会直接想使用OpenGL绘图）&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;二-寄宿图&quot;&gt;二. 寄宿图&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;利用CALayer在一个普通的UIView中显示了一张图片。这不是一个UIImageView，它不是我们通常用来展示图片的方法
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UIImage *image = [UIImage imageNamed:@&quot;Snowman.png&quot;];
//add it directly to our view's layer
self.layerView.layer.contents = (__bridge id)image.CGImage;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;如果你不需要寄宿图，那就不要重写drawRect方法，这会造成CPU资源和内存的浪费，这也是为什么苹果建议：如果没有自定义绘制的任务就不要在子类中写一个空的-drawRect:方法(因为如果UIView检测到-drawRect: 方法被调用了，它就会为视图分配一个寄宿图，这个寄宿图的像素尺寸等于视图大小乘以 contentsScale的值)&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;三-图层几何学&quot;&gt;三. 图层几何学&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;UIView有三个比较重要的布局属性：frame，bounds和center，CALayer对应地叫做frame，bounds和position。为了能清楚区分，图层用了“position”，视图用了“center”，但是他们都代表同样的值（frame代表了图层的外部坐标（也就是在父图层上占据的空间），bounds是内部坐标（{0, 0}通常是图层的左上角），center和position都代表了相对于父图层anchorPoint所在的位置）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;视图的frame，bounds和center属性仅仅是存取方法，当操纵视图的frame，实际上是在改变位于视图下方CALayer的frame，不能够独立于图层之外改变视图的frame&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于视图或者图层来说，frame并不是一个非常清晰的属性，它其实是一个虚拟属性，是根据bounds，position和transform计算而来，所以当其中任何一个值发生改变，frame都会变化。相反，改变frame的值同样会影响到他们当中的值&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当旋转时frame属性和bounds的宽高不再一致&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Animation/frame.png&quot; alt=&quot;iOS_Animation&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;认来说，anchorPoint位于图层的中点；视图的anchorPoint没有暴露，但是图层的anchorPoint可以被移动；比如你可以把它置于图层frame的左上角&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Animation/anchorPoint.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;CALayer还有另外两个属性，zPosition和anchorPointZ，二者都是在Z轴上描述图层位置的浮点类型&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CALayer并不关心任何响应链事件，所以不能直接处理触摸事件或者手势。但是它有一系列的方法帮你处理事件：-containsPoint:和-hitTest:&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;-containsPoint:接受一个在本图层坐标系下的CGPoint，如果这个点在图层frame范围内就返回YES&lt;/li&gt;
        &lt;li&gt;-hitTest:方法同样接受一个CGPoint类型参数，而不是BOOL类型，它返回图层本身，或者包含这个坐标点的叶子节点图层。这意味着不再需要像使用-containsPoint:那样，人工地在每个子图层变换或者测试点击的坐标。如果这个点在最外面图层的范围之外，则返回nil(注意当调用图层的-hitTest:方法时，测算的顺序严格依赖于图层树当中的图层顺序（和UIView处理事件类似）。之前提到的zPosition属性可以明显改变屏幕上图层的顺序，但不能改变事件传递的顺序)&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;四-视觉效果&quot;&gt;四. 视觉效果&lt;/h2&gt;

</description>
        <pubDate>Mon, 29 Apr 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/04/29/iOS%E6%A0%B8%E5%BF%83%E5%8A%A8%E7%94%BB%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7Tips/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/29/iOS%E6%A0%B8%E5%BF%83%E5%8A%A8%E7%94%BB%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7Tips/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>AutoLayout总结</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;总结&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;一-布局方式与背景&quot;&gt;一. 布局方式与背景&lt;/h2&gt;

&lt;p&gt;在开始介绍&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;之前，需要先介绍一下&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;中的布局方式；iOS&lt;code class=&quot;highlighter-rouge&quot;&gt;中主流的界面布局方式主要有手写代码布局，&lt;/code&gt;xib&lt;code class=&quot;highlighter-rouge&quot;&gt;布局，&lt;/code&gt;storyboard&lt;code class=&quot;highlighter-rouge&quot;&gt;布局；笔者更喜欢的还是手写代码的方式，一个可能与笔者之前&lt;/code&gt;Android&lt;code class=&quot;highlighter-rouge&quot;&gt;经验相关（因为&lt;/code&gt;Android&lt;code class=&quot;highlighter-rouge&quot;&gt;中多是使用手写&lt;/code&gt;xml`的方式布局，另一个是，对于多人合作而言，手写代码其实更方便（减少冲突）；当然，对于单人的独立项目，其实没有什么优劣可言，选择一种自己更为熟悉与快捷的方式都是因人而异。&lt;/p&gt;

&lt;p&gt;关于&lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt;布局和&lt;code class=&quot;highlighter-rouge&quot;&gt;storyboard&lt;/code&gt;布局方式的区别，其实二者都是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;IB&lt;/code&gt;来进行可视化空间的拖拽与约束，唯一的区别是二者的侧重点不同；一般来说，单个的&lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt;文件对应一个&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;，对于一些自定义&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;，通常也会使用单个&lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt;并从&lt;code class=&quot;highlighter-rouge&quot;&gt;main bundle&lt;/code&gt;进行加载的方式来载入；而&lt;code class=&quot;highlighter-rouge&quot;&gt;storyboard&lt;/code&gt;只能使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;而不能用于单独的&lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;（&lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;只能基于&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;使用，而&lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt;同时支持两者）&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt;实际上是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;xml&lt;/code&gt;文件，通过编译之后就得到&lt;code class=&quot;highlighter-rouge&quot;&gt;nib&lt;/code&gt;文件&lt;/p&gt;

&lt;p&gt;在上面介绍的三种方式中，都可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;的方式来进行布局；&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;的出现，是为了解决不同尺寸屏幕的适配问题；&lt;code class=&quot;highlighter-rouge&quot;&gt;iPhone 5&lt;/code&gt;之前，屏幕都是&lt;code class=&quot;highlighter-rouge&quot;&gt;3.5&lt;/code&gt;寸的（&lt;code class=&quot;highlighter-rouge&quot;&gt;640 x 960&lt;/code&gt;分辨率），这之前，屏幕尺寸相同，不存在适配问题，所有&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;坐标只需要计算好即可，但是&lt;code class=&quot;highlighter-rouge&quot;&gt;2012&lt;/code&gt;年，苹果发布了&lt;code class=&quot;highlighter-rouge&quot;&gt;4.0&lt;/code&gt;寸（&lt;code class=&quot;highlighter-rouge&quot;&gt;640 x 1136&lt;/code&gt;分辨率）的&lt;code class=&quot;highlighter-rouge&quot;&gt;iPhone 5&lt;/code&gt;，这样在&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;平台上就出现了不同尺寸的移动设备，使得原有的&lt;code class=&quot;highlighter-rouge&quot;&gt;frame&lt;/code&gt;布局方式无法进行很好的屏幕适配，所以为了解决这一问题，就出现了&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;二-原理与使用&quot;&gt;二. 原理与使用&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;其实类似于&lt;code class=&quot;highlighter-rouge&quot;&gt;Android&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;RelativeLayout&lt;/code&gt;，采用&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;之间的相对位置来进行布局；我们知道，要确定一个&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的位置，需要知道&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;x，y，width，height&lt;/code&gt;，即&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的起始坐标点，宽度和高度信息；&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;其实是通过解&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;之间建立的线性方程组（&lt;code class=&quot;highlighter-rouge&quot;&gt;y = ax + b&lt;/code&gt;）来确定其信息的（如下图），当然，如果出现约束不完整的情况或者约束冲突的情况，就会出现解的不定性，表现出来即是&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;位置未达到预期&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/AutoLayout/AutoLayout_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可约束的属性参见&lt;a href=&quot;https://developer.apple.com/documentation/uikit/nslayoutattribute&quot;&gt;NSLayoutAttribute&lt;/a&gt;枚举&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;实际上是基于&lt;code class=&quot;highlighter-rouge&quot;&gt;Cassowary&lt;/code&gt;算法的，&lt;code class=&quot;highlighter-rouge&quot;&gt;Cassowary&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;Alan Borning, Kim Marriott, Peter Stuckey&lt;/code&gt;等人在&lt;code class=&quot;highlighter-rouge&quot;&gt;1997&lt;/code&gt;年提出的一个解决布局问题的算法，&lt;code class=&quot;highlighter-rouge&quot;&gt;Cassowary&lt;/code&gt;算法能够有效解决线性等式系统和线性不等式系统，这也是&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;的性能保障&lt;/p&gt;

&lt;p&gt;当使用&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;的时候，&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的默认初始值会被弃用，如下代码，此时&lt;code class=&quot;highlighter-rouge&quot;&gt;UILable&lt;/code&gt;的初始化宽高会失效；这里还需要注意一个&lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt;属性，从名字我们可以看出，该属性是控制是否把&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoresizingMask&lt;/code&gt;变成约束（&lt;code class=&quot;highlighter-rouge&quot;&gt;autoresizing mask&lt;/code&gt;其实就是完全指定视图的尺寸和位置，即是否需要将其转换为线性方程组）；当使用&lt;code class=&quot;highlighter-rouge&quot;&gt;IB（Interface Builder）&lt;/code&gt;布局的时候，即&lt;code class=&quot;highlighter-rouge&quot;&gt;xib，storyboard&lt;/code&gt;方式，如果勾选了&lt;code class=&quot;highlighter-rouge&quot;&gt;Use Autolayout&lt;/code&gt;选项（默认勾选），那么&lt;code class=&quot;highlighter-rouge&quot;&gt;IB&lt;/code&gt;生成的控件的&lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt;属性都会被默认设置&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;；当使用手写代码布局时，&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt;属性默认为&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;，但是&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoresizingMask&lt;/code&gt;属性默认被设置为&lt;code class=&quot;highlighter-rouge&quot;&gt;.None&lt;/code&gt;，也就是说如果我们不去动&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoresizingMask&lt;/code&gt;属性，那么&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoresizingMask&lt;/code&gt;就不会对约束产生影响，所以，这个属性，一般也不需要手动设置（当然，为了保险，也可以手动将&lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt;属性置为&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;）&lt;/p&gt;

&lt;p&gt;当&lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt;属性为&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;时，&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoresizingMask&lt;/code&gt;将会转换为约束，一起参与到&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;的约束计算中，即会对&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;产生影响&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let label = UILabel(frame: CGRect(x: 100, y: 100, width: 100, height: 200))
label.backgroundColor = #colorLiteral(red: 1, green: 0.5763723254, blue: 0, alpha: 1)
view.addSubview(label)
label.translatesAutoresizingMaskIntoConstraints = false
label.snp.makeConstraints { (make) in
            make.width.equalTo(10)
            make.leading.equalToSuperview().offset(40)
            make.top.equalToSuperview().offset(40)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;布局关系不仅限于等于，还可以是大于等于或者小于等于，这种不等关系在处理&lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;UIImageView&lt;/code&gt;等具有自身内容尺寸（&lt;code class=&quot;highlighter-rouge&quot;&gt;Intrinsic Content Size&lt;/code&gt;）的控件时非常有用；比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;的长度会随文字长度而变化，那么我们可以对&lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;控件添加两个约束，即&lt;code class=&quot;highlighter-rouge&quot;&gt;宽度大于等于50&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;宽度小于等于200&lt;/code&gt;，这样，当文字很少时，宽度也至少为&lt;code class=&quot;highlighter-rouge&quot;&gt;50&lt;/code&gt;，当文字很多时，宽度也不会超过&lt;code class=&quot;highlighter-rouge&quot;&gt;200&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;某些用来展现内容的用户控件，例如&lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;UIImageView&lt;/code&gt;等，它们具有自身内容尺寸（&lt;code class=&quot;highlighter-rouge&quot;&gt;Intrinsic Content Size&lt;/code&gt;），此类用户控件会根据自身内容尺寸添加布局约束；也就是说，如果开发者没有显式给出其宽度或者高度约束，则其自身内容约束将会起作用&lt;/p&gt;

&lt;p&gt;具有&lt;code class=&quot;highlighter-rouge&quot;&gt;Intrinsic Content Size&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;参见下图（摘自官网）；具有&lt;code class=&quot;highlighter-rouge&quot;&gt;Intrinsic Content Size&lt;/code&gt;属性的&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;都重写了&lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;-(CGSize)intrinsicContentSize:&lt;/code&gt;方法，并且在需要改变这个值的时候调用&lt;code class=&quot;highlighter-rouge&quot;&gt;invalidateIntrinsicContentSize&lt;/code&gt;方法即可，通知系统这个值改变了；同样，当我们自定义&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的时候，如果想要拥有&lt;code class=&quot;highlighter-rouge&quot;&gt;Intrinsic Content Size&lt;/code&gt;属性，就可以重写该方法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/AutoLayout/AutoLayout_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;中还有两个比较重要的概念，&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Hugging&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Compression Resistance&lt;/code&gt;约束；在讲解这两个属性之前，需要先了解一下&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;中的优先级属性；所谓的优先级，我个人的理解其实是一种减少冲突与弱化约束的作用，即为各约束设置优先级，当出现冲突时&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;优先满足高优先级的约束；关于优先级的使用，可以参见文末参考链接&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Hugging&lt;/code&gt;约束：不想变大约束；即如果组件的此属性优先级比另一个组件此属性优先级高的话，那么这个组件就保持不变，另一个可以在需要拉伸的时候拉伸；可以简单理解为&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Hugging&lt;/code&gt;越大，&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;越难变大；默认值为&lt;code class=&quot;highlighter-rouge&quot;&gt;250&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Compression Resistance&lt;/code&gt;约束：不想变小约束；如果组件的此属性优先级比另一个组件此属性优先级高的话，那么这个组件就保持不变，另一个可以在需要压缩的时候压缩；可以简单理解为&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Compression Resistance&lt;/code&gt;越大，&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;越难变小；默认值为&lt;code class=&quot;highlighter-rouge&quot;&gt;750&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;关于&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Hugging&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Compression Resistance&lt;/code&gt;的应用，可以参见&lt;a href=&quot;https://www.jianshu.com/p/f6bc007b30e5&quot;&gt;博客&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;三-性能分析&quot;&gt;三. 性能分析&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;https://time.geekbang.org/column/article/85332&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.jianshu.com/p/0b964dc17c04&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://xiaozhuanlan.com/topic/5378941206&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://draveness.me/layout-performance&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://juejin.im/post/5bd5a546f265da0af033cee6#heading-3&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;四-参考&quot;&gt;四. 参考&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;https://www.jianshu.com/p/f6bc007b30e5&lt;/li&gt;
  &lt;li&gt;https://blog.csdn.net/hard_man/article/details/50888377&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 23 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/23/AutoLayout%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/23/AutoLayout%E6%80%BB%E7%BB%93/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS疑难点</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;iOS疑难点总结，部分摘自参考链接&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;selfvar还是_var&quot;&gt;self.var还是_var?&lt;/h2&gt;

&lt;p&gt;在iOS中常见到如下写法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@interface Demo ()

@property(nonatomic, strong) NSString *name;

@end

@implementation Demo

- (void)test {
    _name = @&quot;&quot;;
//    self.name = @&quot;&quot;;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在上述写法中，&lt;code class=&quot;highlighter-rouge&quot;&gt;self.name&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;_name&lt;/code&gt;有什么区别呢?&lt;/p&gt;

&lt;p&gt;在解释其区别之前，需要先了解一下OC中的属性和实例变量，实例变量具有私有性，一般仅在类内部使用，为了方便给外界读写这个实例变量，就有了属性（@property）&lt;/p&gt;

&lt;p&gt;在iOS第一版中，需要同时声明属性和底层实例变量，那时，属性是oc语言的一个新的机制，并且要求必须声明与之对应的实例变量；如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// MyViewController.h

@interface MyViewController : UIViewController
{
    UIButton *myButton; // 实例变量
}

@property (nonatomic, retain) UIButton *myButton; // 属性

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;之后，苹果将默认编译器从GCC转换为LLVM(low level virtual machine)，从此不再需要为属性声明实例变量了。如果LLVM发现一个没有匹配实例变量的属性，它将自动创建一个以下划线开头的实例变量（即&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;属性及与其对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;_var&lt;/code&gt;实例变量），如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// MyViewController.h

@interface MyViewController : UIViewController

@property (nonatomic, retain) UIButton *myButton; // 将自动创建一个_myButton实例变量与之对应

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在MyViewController.m中可以直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;_myButton&lt;/code&gt;实例变量，也可以通过self.myButton来访问，二者的区别也是下面要讲解的；&lt;/p&gt;

&lt;p&gt;再来看下面一个例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// MyViewController.h

@interface MyViewController : UIViewController
{
    NSString *name; // 实例变量
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在MyViewController.m文件中，如果通过self.name访问的话，编译器会报错，Xcode会提示使用-&amp;gt;，即使用self-&amp;gt;name，这是因为OC中点表达式表示调用方法，而这里的name是一个实例变量，没有与其对应的name方法&lt;/p&gt;

&lt;p&gt;另外，还有一个与@property合用的@synthesize，通过@synthesize还可以指定与属性对应的实例变量名，如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// MyViewController.h

@interface MyViewController : UIViewController

@property (nonatomic, retain) UIButton * myButton;

@end

// MyViewController.m

@implementation MyViewController

@synthesize myButton = otherButton;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;此时，与属性myButton对应的实例变量名为otherButton了，默认的&lt;code class=&quot;highlighter-rouge&quot;&gt;_myButton&lt;/code&gt;就不能使用了；还需要注意的一点是，如果只是声明了&lt;code class=&quot;highlighter-rouge&quot;&gt;@synthesize myButton;&lt;/code&gt;，那么此时默认与myButton对应的实例变量名为myButton，&lt;code class=&quot;highlighter-rouge&quot;&gt;_myButton&lt;/code&gt;也不能用了&lt;/p&gt;

&lt;p&gt;到这里我们应该知道了使用&lt;code class=&quot;highlighter-rouge&quot;&gt;self.var&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;_var&lt;/code&gt;的区别，即self.var实际上是调用了属性方法，即getter和setter方法，而&lt;code class=&quot;highlighter-rouge&quot;&gt;_var&lt;/code&gt;是直接调用的实例变量，不会走getter和setter方法；因此，这里需要注意的是，当我们要重写getter方法时，在getter方法中必须使用&lt;code class=&quot;highlighter-rouge&quot;&gt;_var&lt;/code&gt;实例变量，否则会造成getter方法的递归调用；同理，重写setter方法时，在setter方法中也只能使用&lt;code class=&quot;highlighter-rouge&quot;&gt;_var&lt;/code&gt;实例变量，否则也会造成settter方法的递归调用；另外，直接访问实例变量的话，就不会调用其setter方法，这样就绕过了为相关属性所定义的内存管理语义。例如：在ARC下直接访问一个语义为copy的属性，那么并不会copy该属性，而仅仅是保留新值并释放旧值&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考链接：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;https://www.jianshu.com/p/48056965ddce&lt;/li&gt;
  &lt;li&gt;http://www.cnblogs.com/crazypebble/archive/2013/11/23/3439261.html&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;property与synthesize&quot;&gt;@property与@synthesize&lt;/h2&gt;

&lt;p&gt;我们知道@property可用于在头文件中声明getter和settter方法，@synthesize方法可用于.m文件中实现getter和setter方法；但是实际情况是，如果我们只是在头文件中使用了@property，而没有在.m文件中使用@synthesize，编译器实际上还是会为我们生成getter和setter方法；这是因为从Xcode 4.4 开始，@synthesize属性是默认声明了的&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考链接：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;https://stackoverflow.com/questions/7496463/objective-c-property-declaration-without-implementation-synthesize&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;扩展extension与分类category&quot;&gt;扩展(extension)与分类(category)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;参考链接：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;https://www.jianshu.com/p/9e827a1708c6&lt;/li&gt;
  &lt;li&gt;https://blog.csdn.net/hherima/article/details/44242469&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;宏定义中的dowhile0使用&quot;&gt;宏定义中的do{}while(0)使用&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;参考链接：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;https://blog.csdn.net/luoweifu/article/details/38563162&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;toolbartab-bar和navigationbar的区别&quot;&gt;Toolbar，Tab Bar和NavigationBar的区别&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Toolbar&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Tab Bar&lt;/code&gt;都是显示在&lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt;的底部，&lt;code class=&quot;highlighter-rouge&quot;&gt;Toolbar&lt;/code&gt;中包含的内容和当前界面相关，比如：添加一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Item&lt;/code&gt;，删除一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Item&lt;/code&gt;，拍照等；&lt;code class=&quot;highlighter-rouge&quot;&gt;Tab Bar&lt;/code&gt;是用于在不同界面之间切换的；需要注意的是，&lt;code class=&quot;highlighter-rouge&quot;&gt;Toolbar&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Tab Bar&lt;/code&gt;不能在同一个界面中使用&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NavigationBar&lt;/code&gt;是顶部的导航栏&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/27/iOS%E7%96%91%E9%9A%BE%E7%82%B9/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/27/iOS%E7%96%91%E9%9A%BE%E7%82%B9/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS多线程与网络</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;iOS多线程编程各种方式总结&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;一-概述&quot;&gt;一. 概述&lt;/h2&gt;

&lt;p&gt;iOS中多线程的实现方式有如下四种：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Thread/多线程实现方案的比较.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;本文主要总结常用的两种方式&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;二-gcd&quot;&gt;二. GCD&lt;/h2&gt;

&lt;h3 id=&quot;21-gcd概述&quot;&gt;2.1 GCD概述&lt;/h3&gt;

&lt;p&gt;GCD即Grand Central Dispatch，是苹果公司为多核的并行运算提出的解决方案，能自动合理地利用多核CPU（比如双核、四核），同时还能自动管理线程的生命周期（创建线程、调度任务、销毁线程），不需要手动管理；由C语言实现&lt;/p&gt;

&lt;h3 id=&quot;22-gcd使用&quot;&gt;2.2 GCD使用&lt;/h3&gt;

&lt;h4 id=&quot;221-主要方法&quot;&gt;2.2.1 主要方法&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)&lt;/code&gt; ：同步&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_async(dispatch_queue_t queue, dispatch_block_t block)&lt;/code&gt; ：异步&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)&lt;/code&gt; ：等待前面的任务执行完成之后才执行，且它后面的任务等它执行完成之后才会执行；这里的 queue 不能是全局的并发队列（可用于解决读写锁的问题；如数据库操作中，读操作可以并行提高效率，写操作需要等待前面的读操作完成之后再执行，写操作执行完之后，之后的读操作又可以实现并行，如下）&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	dispatch_async(queue, ^{
            // reading
        });
        dispatch_async(queue, ^{
            // reading
        });
        dispatch_barrier_sync(queue, ^{
            // writing
        });
        dispatch_async(queue, ^{
            // reading
        });
        dispatch_async(queue, ^{
            // reading
        });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;222-队列&quot;&gt;2.2.2 队列&lt;/h4&gt;

&lt;p&gt;GCD中有两个重要的概念：任务和队列&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;任务有两种执行方式：同步执行和异步执行，他们之间的区别是否会创建新的线程&lt;/li&gt;
    &lt;li&gt;队列：用于存放任务。有两种队列， 串行队列和并行队列；区别如下：&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Thread/串行队列和并行队列.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以通过如下方式获取或者创建队列：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_queue_create&lt;/code&gt; 创建（串行或并行）&lt;/li&gt;
    &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_get_global_queue&lt;/code&gt; 获取全局并发队列（所有应用程序都可用，且区分优先级）&lt;/li&gt;
    &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_get_main_queue&lt;/code&gt; 获得主队列&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 自己创建队列：第一个参数是标识符，用于 DEBUG 的时候标识唯一的队列；
// 第二个参数用来表示创建的队列是串行的还是并行的，传入 DISPATCH_QUEUE_SERIAL 或 NULL 表示创建串行队列。传入 DISPATCH_QUEUE_CONCURRENT 表示创建并行队列

  //串行队列
  dispatch_queue_t queue = dispatch_queue_create(&quot;tk.bourne.testQueue&quot;, NULL);
  dispatch_queue_t queue = dispatch_queue_create(&quot;tk.bourne.testQueue&quot;, DISPATCH_QUEUE_SERIAL);
  //并行队列
  dispatch_queue_t queue = dispatch_queue_create(&quot;tk.bourne.testQueue&quot;, DISPATCH_QUEUE_CONCURRENT);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // 全局并行队列：
  dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;223-队列组dispatch-group&quot;&gt;2.2.3 队列组(Dispatch Group)&lt;/h4&gt;

&lt;p&gt;可用于实现当并行执行block时，监听所有block执行结束&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
        dispatch_group_t group = dispatch_group_create();
        dispatch_group_async(group, queue, ^{
            NSLog(@&quot;Block 1&quot;);
        });
        dispatch_group_async(group, queue, ^{
            NSLog(@&quot;Block 2&quot;);
        });
        dispatch_group_async(group, queue, ^{
            NSLog(@&quot;Block 3&quot;);
        });
        dispatch_group_notify(group, dispatch_get_main_queue(), ^{
            NSLog(@&quot;Done&quot;);
        });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;应用举例：分别执行两个耗时的操作，等两个异步操作都执行完之后，回到主线程执行操作；如果想要高效实现上述需求，可用队列组；如下&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dispatch_group_t group =  dispatch_group_create();
dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    // 执行1个耗时的异步操作
});
dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    // 执行1个耗时的异步操作
});
dispatch_group_notify(group, dispatch_get_main_queue(), ^{
    // 等前面的异步操作都执行完毕后，回到主线程...
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;224-其他&quot;&gt;2.2.4 其他&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;延迟执行：通过&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_walltime&lt;/code&gt;生成绝对时间&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dispatch_time_t time = dispatch_time(DISPATCH_TIME_NOW, 3ull * NSEC_PER_SEC); // ull表示：unsigned long long 
        dispatch_after(time, dispatch_get_main_queue(), ^{
            
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;dipatch_apply：相当于dipatch_sync和dispatch group的关联API，该函数将指定的block追加到指定的queue中，并等待全部处理执行结束；其也会阻塞直到执行完毕，可用其替代for循环
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
dispatch_apply(10, queue, ^(size_t index) { // index表示当前索引，自动增加
  NSLog(@&quot;%zu&quot;, index);
});
NSLog(@&quot;Done&quot;); // 最后执行
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;dispatch_suspend / dispatch_resume：用于挂起和恢复queue&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dispatch Semaphore：计数为0时等待，计数为1或大于1时，减1而不是等待&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;dispatch_once：保证在应用程序中只执行一次指定处理的API&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Dispatch IO：当读取大文件时，将文件分成合适的大小并使用Global Queue读取的话，会快很多，如果想尝试提高文件读取速度，可以使用Dispatch IO&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;225-备注&quot;&gt;2.2.5 备注&lt;/h4&gt;

&lt;p&gt;在iOS6.0之前，在GCD中每当使用带creat单词的函数创建对象之后，都应该对其进行一次release操作。在iOS6.0之后，GCD被纳入到了ARC的内存管理机制中，在使用GCD的时候我们就像对待普通OC对象一样对待GCD,因此不再需要我们调用release方法&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;三-nsoperation&quot;&gt;三. NSOperation&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;本身是个抽象类，需要使用其子类：NSInvocationOperation，NSBlockOperation，或自定义子类&lt;/li&gt;
    &lt;li&gt;默认情况下，调用 NSInvocationOperation 的 start 方法并不会开一条新线程去执行，而是在当前线程执行；需要把 NSOperation 放到一个 NSOperationQueue 中才会执行异步操作&lt;/li&gt;
    &lt;li&gt;NSBlockOperation：只要 NSBlockOperation 封装的操作数 &amp;gt; 1，就会异步执行操作&lt;/li&gt;
    &lt;li&gt;支持取消，暂停和恢复，还可以设置依赖来保证执行顺序，如 &lt;code class=&quot;highlighter-rouge&quot;&gt;[operationB addDependency:operationA]; // 操作B依赖于操作A&lt;/code&gt;；还可以在不同 queue 的 NSOperation 之间创建依赖关系&lt;/li&gt;
    &lt;li&gt;支持监听一个操作的执行完毕：通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;completionBlock&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;setCompletionBlock&lt;/code&gt; 实现&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;四-网络请求&quot;&gt;四. 网络请求&lt;/h2&gt;

&lt;p&gt;网络请求常用类：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;NSURL：请求地址&lt;/li&gt;
    &lt;li&gt;NSURLRequest：一个NSURLRequest对象就代表一个请求，它包含的信息有：一个 NSURL 对象，请求方法，请求头，请求体，请求超时等&lt;/li&gt;
    &lt;li&gt;NSMutableURLRequest：NSURLRequest的子类&lt;/li&gt;
    &lt;li&gt;NSURLConnection：负责发送请求；支持发送同步请求（sendSynchronousRequest）和异步请求（sendAsynchronousRequest）；还可以设置代理监听网络请求过程（开始响应，接收数据，结束响应，请求出错）&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;第三方框架：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;ASIHttpRequest&lt;/li&gt;
    &lt;li&gt;AFNetworking&lt;/li&gt;
    &lt;li&gt;MKNetworkKit&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;iOS中发送 HTTP 请求的方案：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;苹果原生
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;NSURLConnection：用法简单，坑较多&lt;/li&gt;
        &lt;li&gt;NSURLSession：功能比 NSURLConnection 强大，苹果推荐使用(但是NSURLSessionTask是一个抽象类，本身不能使用，只能使用它的子类：NSURLSessionDataTask\NSURLSessionUploadTask\NSURLSessionDownloadTask)&lt;/li&gt;
        &lt;li&gt;CFNetwork：NSURL*的底层实现，纯C语言&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;两种为NSURLConnection设置代理方式的区别：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    //第一种设置方式：
    //通过该方法设置代理，会自动的发送请求
    // [[NSURLConnection alloc]initWithRequest:request delegate:self];

    //第二种设置方式：
    //设置代理，startImmediately为NO的时候，该方法不会自动发送请求
    NSURLConnection *connect = [[NSURLConnection alloc]initWithRequest:request delegate:self startImmediately:NO];
    //手动通过代码的方式来发送请求
    //注意该方法内部会自动的把connect添加到当前线程的RunLoop中在默认模式下执行
    [connect start];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;五-数据解析&quot;&gt;五. 数据解析&lt;/h2&gt;

&lt;p&gt;Json解析（转OC数据类型）：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;第三方框架：JSONKit、SBJson、TouchJSON（性能从左到右，越差）&lt;/li&gt;
    &lt;li&gt;苹果原生：NSJSONSerialization（性能最好）&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Thread/Json转OC数据类型.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;XML解析：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;解析方式有两种：
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;DOM：一次性将整个XML文档加载进内存，比较适合解析小文件&lt;/li&gt;
        &lt;li&gt;SAX：从根元素开始，按顺序一个元素一个元素往下解析，比较适合解析大文件&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;解析API：
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;官方原生：NSXMLParser，SAX方式解析&lt;/li&gt;
        &lt;li&gt;libxml2：纯C语言，默认包含在iOS SDK中，同时支持DOM和SAX方式解析&lt;/li&gt;
        &lt;li&gt;GDataXML：DOM方式解析，由Google开发，基于libxml2&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;六-runloop&quot;&gt;六. RunLoop&lt;/h2&gt;

&lt;p&gt;RunLoop是iOS中比较重要的一点，较短篇幅无法讲完，后面有机会再另起新篇总结&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;七-参考博客&quot;&gt;七. 参考博客&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;https://www.jianshu.com/p/0b0d9b1f1f19&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 24 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/24/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/24/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
  </channel>
</rss>
