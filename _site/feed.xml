<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>非专业程序员</title>
    <description>Hello-World</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 19 Oct 2025 22:40:40 +0800</pubDate>
    <lastBuildDate>Sun, 19 Oct 2025 22:40:40 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>深入理解iOS CoreText API</title>
        <description>&lt;p&gt;这篇文章是从0到1自定义富文本渲染的原理篇之一，此外你还可能感兴趣：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/EYPO3sSjtIstD3RmlRCs9w&quot;&gt;一文读懂字符与编码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/96YJGYKLoxENC4qT9tYNoQ&quot;&gt;一文读懂字符、字形、字体&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/D0A8HAQaQNart7KAdWXyJg&quot;&gt;一文读懂字体文件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/fcL6if52qYQUTChEjntHJg&quot;&gt;从0到1自定义文字排版引擎：原理篇&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/EpaNjLcG6DZBc128A2gdIQ&quot;&gt;逆向分析CoreText中的字体级联/Font Fallback机制&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/1oOSJkTIJ8njV49B6PsfgA&quot;&gt;新手小白也能看懂的LLDB技巧/逆向技巧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更多内容可订阅公众号「非专业程序员Ping」，文中所有代码可在公众号后台回复 “CoreText” 获取。&lt;/p&gt;

&lt;h1 id=&quot;一引言&quot;&gt;一、引言&lt;/h1&gt;

&lt;p&gt;CoreText是iOS/macOS中的文字排版引擎，提供了一系列对文本精确操作的API；UIKit中UILabel、UITextView等文本组件底层都是基于CoreText的，可以看官方提供的层级图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lk9v5zgfb4.feishu.cn/space/api/box/stream/download/asynccode/?code=NzEzNDNiNmRiMWNjNTA1OTgzOWE0ZDZjMjgxNmUyODlfdTZzbzZMZGk3U0dRRG9UQ0lNTjI1QUJ2SDNpcGJxeXhfVG9rZW46Q1RrY2JYeDJQb0NEM3N4QmxxMGNVcVVxbjRmXzE3NjA4Nzc2MjY6MTc2MDg4MTIyNl9WNA&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;本文的目的是结合实际使用例子，来介绍和总结CoreText中的重要概念和API。&lt;/p&gt;

&lt;h1 id=&quot;二重要概念&quot;&gt;二、重要概念&lt;/h1&gt;

&lt;p&gt;CoreText中有几个重要概念：CTTypesetter、CTFramesetter、CTFrame、CTLine、CTRun；它们之间的关系可以看官方提供的层级图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lk9v5zgfb4.feishu.cn/space/api/box/stream/download/asynccode/?code=MGJhNmI2NDlmZDU0ODM2YTNlZDU4MjQ2YzM5MjkyZWJfZzFWV2tjY0tKdW5nSWQxWnZZUHF5TUhkbkY1SGl0RVNfVG9rZW46WE5tSWJYTDhVbzc1M3J4RnRwdmNCUlczbnRjXzE3NjA4Nzc2MjY6MTc2MDg4MTIyNl9WNA&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一篇文档可以分为：文档 -&amp;gt; 段落 -&amp;gt; 段落中的行 -&amp;gt; 行中的文字，类似的，CoreText也是按这个结构来组织和管理API的，我们也可以根据诉求来选择不同层级的API。&lt;/p&gt;

&lt;h2 id=&quot;21-ctframesetter&quot;&gt;2.1 CTFramesetter&lt;/h2&gt;

&lt;p&gt;CTFramesetter类似于文档的概念，它负责将多段文本进行排版，管理多个段落（CTFrame）。&lt;/p&gt;

&lt;p&gt;CTFramesetter的输入是属性字符串（NSAttributedString）和路径（CGPath），负责将文本在指定路径上进行排版。&lt;/p&gt;

&lt;h2 id=&quot;22-ctframe&quot;&gt;2.2 CTFrame&lt;/h2&gt;

&lt;p&gt;CTFrame类似于段落的概念，其中包含了若干行（CTLine）以及对应行的位置、方向、行间距等信息。&lt;/p&gt;

&lt;h2 id=&quot;23-ctline&quot;&gt;2.3 CTLine&lt;/h2&gt;

&lt;p&gt;CTLine类似于行的概念，其中包含了若干个字形（CTRun）以及对应字形的位置等信息。&lt;/p&gt;

&lt;h2 id=&quot;24-ctrun&quot;&gt;2.4 CTRun&lt;/h2&gt;

&lt;p&gt;需要注意CTRun不是单个的字符，而是&lt;strong&gt;一段连续的且具有相同属性（字体、颜色等）的字形（Glyph）。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如下，每个虚线框都代表一个CTRun：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/深入理解CoreText/CTRun.png&quot; alt=&quot;CTRun&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;25-cttypesetter&quot;&gt;2.5 CTTypesetter&lt;/h2&gt;

&lt;p&gt;CTTypesetter支持对属性字符串进行换行，可以通过CTTypesetter来自定义换行（比如按word换行、按char换行等）或控制每行的内容，可以理解成更精细化的控制。&lt;/p&gt;

&lt;h1 id=&quot;三重要api&quot;&gt;三、重要API&lt;/h1&gt;

&lt;h2 id=&quot;31-ctframesetter&quot;&gt;3.1 CTFramesetter&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1）CTFramesetterCreateWithAttributedString&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTFramesetterCreateWithAttributedString(_ attrString: CFAttributedString) -&amp;gt; CTFramesetter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过属性字符串来创建CTFramesetter。&lt;/p&gt;

&lt;p&gt;我们可以构造不同字体、颜色、大小的属性字符串，然后从属性字符串构造CTFramesetter，之后可以继续往下拆分得到段落、行、字形等信息，这样可以实现自定义排版、图文混排等复杂富文本样式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）CTFramesetterCreateWithTypesetter&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTFramesetterCreateWithTypesetter(_ typesetter: CTTypesetter) -&amp;gt; CTFramesetter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过CTTypesetter来创建CTFramesetter，当我们需要对文本实现更精细控制，比如自定义换行时，可以自己构造CTTypesetter。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3）CTFramesetterCreateFrame&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTFramesetterCreateFrame(
    _ framesetter: CTFramesetter,
    _ stringRange: CFRange,
    _ path: CGPath,
    _ frameAttributes: CFDictionary?
) -&amp;gt; CTFrame
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成CTFrame：在指定路径（path）为属性字符串的指定范围（stringRange）生成CTFrame。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;framesetter&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stringRange&lt;/code&gt;：字符范围，注意需要以UTF-16编码格式计算；当 stringRange.length = 0 时，表示从起点（stringRange.location）到字符结束为止；比如当 CFRangeMake(0, 0) 表示全字符范围&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;：排版路径，可以是不规则矩形，这意味着可以传入不规则图形来实现文字环绕等高级效果&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;frameAttributes&lt;/code&gt;：一个可选的字典，可以用于控制段落级别的布局行为，比如行间距等，一般用不到，可传 nil&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4）CTFramesetterSuggestFrameSizeWithConstraints&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTFramesetterSuggestFrameSizeWithConstraints(
    _ framesetter: CTFramesetter,
    _ stringRange: CFRange,
    _ frameAttributes: CFDictionary?,
    _ constraints: CGSize,
    _ fitRange: UnsafeMutablePointer&amp;lt;CFRange&amp;gt;?
) -&amp;gt; CGSize
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;计算文本宽高：在给定约束尺寸（constraints）下计算文本范围（stringRange）的实际宽高。&lt;/p&gt;

&lt;p&gt;如下，我们可以计算出在宽高 100 x 100 的范围内排版，实际能放下的文本范围（fitRange）以及实际的文本尺寸：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;let attr = NSAttributedString(string: &quot;这是一段测试文本，通过调用CTFramesetterSuggestFrameSizeWithConstraints来计算文本的宽高信息，并返回实际的range&quot;, attributes: [
    .font: UIFont.systemFont(ofSize: 16),
    .foregroundColor: UIColor.black
])
let framesetter = CTFramesetterCreateWithAttributedString(attr)
var fitRange = CFRange(location: 0, length: 0)
let size = CTFramesetterSuggestFrameSizeWithConstraints(
    framesetter,
    CFRangeMake(0, 0),
    nil,
    CGSize(width: 100, height: 100),
    &amp;amp;fitRange
)
print(size, fitRange, attr.length)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个API在分页时非常有用，比如微信读书的翻页效果，需要知道在哪个地方截断，PDF的分页排版等。&lt;/p&gt;

&lt;h3 id=&quot;311-ctframesetter使用示例&quot;&gt;3.1.1 CTFramesetter使用示例&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1）实现一个支持AutoLayout且高度靠内容撑开的富文本View&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lk9v5zgfb4.feishu.cn/space/api/box/stream/download/asynccode/?code=Mzc4YmRjMzQxZTdhM2ZmZDYxODIxYTRkNjUyZDU1ZGRfV2hMUHBaTk8yZ1o4RnlZZFNreWw3c1lIVEtQSHVkTnBfVG9rZW46RmNrN2JkOFlXb3dmaHV4bllHNmNwdmpqblFlXzE3NjA4Nzc2MjY6MTc2MDg4MTIyNl9WNA&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）在圆形路径中绘制文本&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lk9v5zgfb4.feishu.cn/space/api/box/stream/download/asynccode/?code=M2I0NzA4ODA4OGUzOTAxMmYyNGQ4MjM0NzFiMDg4YmZfOGdRdVA4aUk5UUNvZ3FpclIzSlY5SVNuaHNzdXVpODlfVG9rZW46TzFiOWJzQlRUb1FuVmZ4cjhBNWNIZzl4blR0XzE3NjA4Nzc2MjY6MTc2MDg4MTIyNl9WNA&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3）文本分页：模拟微信读书的分页逻辑&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lk9v5zgfb4.feishu.cn/space/api/box/stream/download/asynccode/?code=YTJlZGY5YjRkNjIxNDVkMzgxMGY5YWE5NjJkNGQ3OTdfa3hTYzNwZTV2UWx3bENCTWpLMHZodHdFckFxRUU0TThfVG9rZW46RXBNeWI4UGw4b0Y4dGp4UGVhQ2N0VE0ybkhkXzE3NjA4Nzc2MjY6MTc2MDg4MTIyNl9WNA&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;32-ctframe&quot;&gt;3.2 CTFrame&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1）CTFramesetterCreateFrame&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTFramesetterCreateFrame(
    _ framesetter: CTFramesetter,
    _ stringRange: CFRange,
    _ path: CGPath,
    _ frameAttributes: CFDictionary?
) -&amp;gt; CTFrame
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建CTFrame，在CTFramesetter一节中有介绍过，这是创建CTFrame的唯一方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）CTFrameGetStringRange&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTFrameGetStringRange(_ frame: CTFrame) -&amp;gt; CFRange
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取CTFrame包含的字符范围。&lt;/p&gt;

&lt;p&gt;我们在调用CTFramesetterCreateFrame创建CTFrame时，会传入一个 stringRange 的参数，CTFrameGetStringRange也可以理解成获取这个 stringRange，区别是处理了当 stringRange.length 为0的情况。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3）CTFrameGetVisibleStringRange&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTFrameGetVisibleStringRange(_ frame: CTFrame) -&amp;gt; CFRange
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取CTFrame实际可见的字符范围。&lt;/p&gt;

&lt;p&gt;我们在调用CTFramesetterCreateFrame创建CTFrame时，会传入path，可能会把字符截断，CTFrameGetVisibleStringRange返回的就是可见的字符范围。&lt;/p&gt;

&lt;p&gt;需要注意和CTFrameGetStringRange进行区分，可以用如下Demo验证：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;let longText = String(repeating: &quot;这是一个分栏布局的例子。Core Text 允许我们将一个长的属性字符串（CFAttributedString）流动到多个不同的路径（CGPath）中。我们只需要创建一个 CTFramesetter，然后循环调用 CTFramesetterCreateFrame。每次调用后，我们使用 CTFrameGetStringRange 来找出有多少文本被排入了当前的框架，然后将下一个框架的起始索引设置为这个范围的末尾。 &quot;, count: 10)
let attributedText = NSAttributedString(string: longText, attributes: [
    .font: UIFont.systemFont(ofSize: 12),
    .foregroundColor: UIColor.darkText
])
let framesetter = CTFramesetterCreateWithAttributedString(attributedText as CFAttributedString)
let path = CGPath(rect: .init(x: 10, y: 100, width: 400, height: 200), transform: nil)
let frame = CTFramesetterCreateFrame(
    framesetter,
    CFRange(location: 100, length: 0),
    path,
    nil
)
// 输出：CFRange(location: 100, length: 1980)
print(CTFrameGetStringRange(frame))
// 输出：CFRange(location: 100, length: 584)
print(CTFrameGetVisibleStringRange(frame))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;4）CTFrameGetPath&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTFrameGetPath(_ frame: CTFrame) -&amp;gt; CGPath
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取创建CTFrame时传入的path。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5）CTFrameGetLines&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTFrameGetLines(_ frame: CTFrame) -&amp;gt; CFArray
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取CTFrame中所有的行（CTLine）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6）CTFrameGetLineOrigins&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTFrameGetLineOrigins(
    _ frame: CTFrame,
    _ range: CFRange,
    _ origins: UnsafeMutablePointer&amp;lt;CGPoint&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取每一行的起点坐标。&lt;/p&gt;

&lt;p&gt;用法示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;let lines = CTFrameGetLines(frame) as! [CTLine]
var origins = [CGPoint](repeating: .zero, count: lines.count)
CTFrameGetLineOrigins(frame, CFRangeMake(0, 0), &amp;amp;origins)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;7）CTFrameDraw&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTFrameDraw(
    _ frame: CTFrame,
    _ context: CGContext
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;绘制CTFrame。&lt;/p&gt;

&lt;h3 id=&quot;321-ctframe使用示例&quot;&gt;3.2.1 CTFrame使用示例&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1）绘制CTFrame&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lk9v5zgfb4.feishu.cn/space/api/box/stream/download/asynccode/?code=Yzc3YzE1YTFmZjJiOGY5NjE3ZGY2YWI2ZTVhMWE1ZmVfVUtqQVB3eEU3QWtsQ3JlcWJ2VDFwOXRFZkViQ2FHV0ZfVG9rZW46TXhlM2J0T0Nlb3NPTTJ4MWpuaGN2R0ZNbnhjXzE3NjA4Nzc2MjY6MTc2MDg4MTIyNl9WNA&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）高亮某一行&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lk9v5zgfb4.feishu.cn/space/api/box/stream/download/asynccode/?code=OGY4MzMxMjYxYWE4NTdjYzcyMDZiNjc2OGE0MzBjZjRfQzExaE44ZzNjaG8wRmtaeGZIcnJ1QmNWYWJ4WldtbGtfVG9rZW46U0FZQ2JXTXhBb2JNWDd4eDVGZmN0Rk5zbmlnXzE3NjA4Nzc2MjY6MTc2MDg4MTIyNl9WNA&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3）检测点击字符&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lk9v5zgfb4.feishu.cn/space/api/box/stream/download/asynccode/?code=MzFkZGU0MjBkMmUxMjg5NDRjZTJlM2E2MDdhOWZiYjdfRmttZVJyNXJIUkdWblZpQjRESlFzd2VPYVE4bmlXd3VfVG9rZW46U0JvRmJpRzhyb1h4RGF4dHNaaWNraTdjbmpoXzE3NjA4Nzc2MjY6MTc2MDg4MTIyNl9WNA&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;33-ctline&quot;&gt;3.3 CTLine&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1）CTLineCreateWithAttributedString&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTLineCreateWithAttributedString(_ attrString: CFAttributedString) -&amp;gt; CTLine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从属性字符串创建&lt;strong&gt;单行&lt;/strong&gt;CTLine，如果字符串中有换行符（\n）的话，换行符会被转换成空格，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;let line = CTLineCreateWithAttributedString(
    NSAttributedString(string: &quot;Hello CoreText\nWorld&quot;, attributes: [.font: UIFont.systemFont(ofSize: 16)])
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2）CTLineCreateTruncatedLine&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTLineCreateTruncatedLine(
    _ line: CTLine,
    _ width: Double,
    _ truncationType: CTLineTruncationType,
    _ truncationToken: CTLine?
) -&amp;gt; CTLine?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建一个被截断的新行。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;line&lt;/code&gt;：待截断的行&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;width&lt;/code&gt;：在多少宽度截断&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;truncationType&lt;/code&gt;：start/end/middle，截断类型&lt;/li&gt;
  &lt;li&gt;truncationToken：在截断处添加的字符，nil表示不添加，一般使用省略符（…）&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;let truncationToken = CTLineCreateWithAttributedString(
    NSAttributedString(string: &quot;…&quot;, attributes: [.font: UIFont.systemFont(ofSize: 16)])
)
let truncated = CTLineCreateTruncatedLine(line, 100, .end, truncationToken)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3）CTLineCreateJustifiedLine&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTLineCreateJustifiedLine(
    _ line: CTLine,
    _ justificationFactor: CGFloat,
    _ justificationWidth: Double
) -&amp;gt; CTLine?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建一个两端对齐的新行，类似书籍或报纸中两端对齐的排版效果。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;line&lt;/code&gt;：原始行&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;justificationFactor&lt;/code&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;justificationFactor &amp;lt;= 0&lt;/code&gt;表示不缩放，即与原始行相同；&lt;code class=&quot;highlighter-rouge&quot;&gt;justificationFactor &amp;gt;= 1&lt;/code&gt;表示完全缩放到指定宽度；&lt;code class=&quot;highlighter-rouge&quot;&gt;0 &amp;lt; justificationFactor &amp;lt; 1&lt;/code&gt;表示部分缩放到指定宽度，可以看示例代码&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;justificationWidth&lt;/code&gt;：缩放指定宽度&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lk9v5zgfb4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTYwMGVkMjhkY2YzOWQ3ZTg3ZDc4OTNlYzQ5YmFjNWNfMXpWbGNJcDFRakk4bmVJNjJOa1dEWXFlU2RkZGpaNnpfVG9rZW46T1dPbmJ4bHZPb3NCZEJ4VkExZ2MxWjVZbjhiXzE3NjA4Nzc2MjY6MTc2MDg4MTIyNl9WNA&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4）CTLineDraw&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTLineDraw(
    _ line: CTLine,
    _ context: CGContext
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;绘制行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5）CTLineGetGlyphCount&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTLineGetGlyphCount(_ line: CTLine) -&amp;gt; CFIndex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取行内字形总数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6）CTLineGetGlyphRuns&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTLineGetGlyphRuns(_ line: CTLine) -&amp;gt; CFArray
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取行内所有的CTRun。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7）CTLineGetStringRange&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTLineGetStringRange(_ line: CTLine) -&amp;gt; CFRange
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取该行对应的字符范围。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8）CTLineGetPenOffsetForFlush&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTLineGetPenOffsetForFlush(
    _ line: CTLine,
    _ flushFactor: CGFloat,
    _ flushWidth: Double
) -&amp;gt; Double
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取在指定宽度绘制时的水平偏移，一般配合 CGContext.textPosition 使用，可用于实现在固定宽度下文本的左对齐、右对齐、居中对齐及自定义水平偏移等。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lk9v5zgfb4.feishu.cn/space/api/box/stream/download/asynccode/?code=MjdkYjRmN2VhZDljNzlkOGJlM2YwOTE2MjY0ZjYwZjZfUnA3UEpkUFFDWUlUajdRRkp1d0NEd1lBejBMTnVRSk5fVG9rZW46RmFQSGJ6UG9wb1lSckt4WUg3V2N3WjhvbndlXzE3NjA4Nzc2MjY6MTc2MDg4MTIyNl9WNA&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9）CTLineGetImageBounds&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTLineGetImageBounds(
    _ line: CTLine,
    _ context: CGContext?
) -&amp;gt; CGRect
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取行的&lt;strong&gt;视觉边界&lt;/strong&gt;；注意 CTLineGetImageBounds 获取的是&lt;strong&gt;相对于CTLine局部坐标系的矩形&lt;/strong&gt;，即以textPosition为原点的矩形。&lt;/p&gt;

&lt;p&gt;视觉边界可以看下面的例子，与之相对的是布局边界；这个API在实际应用中不常见，除非有特殊诉求，比如要检测精确的内容点击范围，给行绘制紧贴背景等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lk9v5zgfb4.feishu.cn/space/api/box/stream/download/asynccode/?code=MTliN2NkOGE4NzRmZjE2NDY4YzNmZGM0YTc3NzUxM2VfQmFXUWNycVhUekY5TzE5aFAzOHl3UjE0RWVCY0NlWVVfVG9rZW46RWVZaWJ0Vkgzb09FRld4bktIN2NGYkZxbkZkXzE3NjA4Nzc2MjY6MTc2MDg4MTIyNl9WNA&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10）CTLineGetTypographicBounds&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTLineGetTypographicBounds(
    _ line: CTLine,
    _ ascent: UnsafeMutablePointer&amp;lt;CGFloat&amp;gt;?,
    _ descent: UnsafeMutablePointer&amp;lt;CGFloat&amp;gt;?,
    _ leading: UnsafeMutablePointer&amp;lt;CGFloat&amp;gt;?
) -&amp;gt; Double
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取上行（ascent）、下行（descent）、行距（leading）。&lt;/p&gt;

&lt;p&gt;这几个概念不熟悉的可以参考：&lt;a href=&quot;https://mp.weixin.qq.com/s/96YJGYKLoxENC4qT9tYNoQ&quot;&gt;一文读懂字符、字形、字体&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;想了解这几个数值最终是从哪个地方读取的可以参考：&lt;a href=&quot;https://mp.weixin.qq.com/s/D0A8HAQaQNart7KAdWXyJg&quot;&gt;一文读懂字体文件&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;通过这个API我们可以手动构造&lt;strong&gt;布局边界&lt;/strong&gt;（见上面的例子），一般用于点击检测、绘制行背景等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11）CTLineGetTrailingWhitespaceWidth&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTLineGetTrailingWhitespaceWidth(_ line: CTLine) -&amp;gt; Double
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取行尾空白字符的宽度（比如空格、制表符 (\t) 等），一般用于实现对齐时基于可见文本对齐等。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;let line = CTLineCreateWithAttributedString(
    NSAttributedString(string: &quot;Hello  &quot;, attributes: [.font: UIFont.systemFont(ofSize: 16)])
)

let totalWidth = CTLineGetTypographicBounds(line, nil, nil, nil)
let trailingWidth = CTLineGetTrailingWhitespaceWidth(line)

print(&quot;总宽度: \(totalWidth)&quot;)
print(&quot;尾部空白宽度: \(trailingWidth)&quot;)
print(&quot;可见文字宽度: \(totalWidth - trailingWidth)&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;12）CTLineGetStringIndexForPosition&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTLineGetStringIndexForPosition(
    _ line: CTLine,
    _ position: CGPoint
) -&amp;gt; CFIndex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取给定位置处的字符串索引。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;虽然官方文档说这个API一般用于点击检测，但实际测试下来&lt;strong&gt;这个API返回的点击索引不准确&lt;/strong&gt;，比如虽然点击的是当前字符，但实际返回的索引是后一个字符的，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/深入理解CoreText/CTLineGetStringIndexForPosition.png&quot; alt=&quot;CTLineGetStringIndexForPosition&quot; /&gt;&lt;/p&gt;

&lt;p&gt;查了下，发现这个API一般是用于计算光标位置的，比如点击「行」的左半部分，希望光标出现在「行」左侧，如果点击「行」的右半部分，希望光标出现在「行」的右侧。&lt;/p&gt;

&lt;p&gt;如果我们想精确做字符的点击检测，推荐使用字符/行的bounds来计算，参考「CTFrame使用示例-3」例子。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13）CTLineGetOffsetForStringIndex&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTLineGetOffsetForStringIndex(
    _ line: CTLine,
    _ charIndex: CFIndex,
    _ secondaryOffset: UnsafeMutablePointer&amp;lt;CGFloat&amp;gt;?
) -&amp;gt; CGFloat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取指定字符索引相对于行的 x 轴偏移量。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;line&lt;/code&gt;：待查询的行&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;charIndex&lt;/code&gt;：要查询的字符在&lt;strong&gt;原始属性字符串&lt;/strong&gt;中的索引&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;secondaryOffset&lt;/code&gt;：次要偏移值，在简单的LTR文本中，可以忽略（传nil即可），但在复杂的双向文本（BiDi）中会用到&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用场景：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;字符点击检测：见「CTFrame使用示例-3」例子&lt;/li&gt;
  &lt;li&gt;给某段字符绘制高亮和下划线&lt;/li&gt;
  &lt;li&gt;定位某个字符：比如想在一段文本中的某个字符上方显示弹窗，可以用这个API先定位该字符&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;14）CTLineEnumerateCaretOffsets&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTLineEnumerateCaretOffsets(
    _ line: CTLine,
    _ block: @escaping (Double, CFIndex, Bool, UnsafeMutablePointer&amp;lt;Bool&amp;gt;) -&amp;gt; Void
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;遍历一行中光标所有的有效位置。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;line&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Double：offset，相对于行的 x 轴偏移&lt;/li&gt;
      &lt;li&gt;CFIndex：与此光标位置相关的字符串索引&lt;/li&gt;
      &lt;li&gt;Bool：true 表示光标位于字符的前边（在 LTR 中即左侧），false 表示光标位于字符的后边（在 LTR 中即右侧）；在 BiDi 中需要特殊同一个字符可能会回调两次（比如 BiDi 边界的地方），需要用这个值区分前后&lt;/li&gt;
      &lt;li&gt;UnsafeMutablePointer&lt;Bool&gt;：stop 指针，赋值为 true 会停止遍历&lt;/Bool&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用场景：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;绘制光标：富文本选区或者文本编辑器中，要绘制光标时，可以先通过 CTLineGetStringIndexForPosition 获取字符索引，再通过这个函数或者 CTLineGetOffsetForStringIndex 获取光标偏移&lt;/li&gt;
  &lt;li&gt;实现光标的左右键移动：可以用这个API将所有的光标位置存储到数组，并按offset排序，当用户按下右箭头 -&amp;gt; 时，可以找到当前光标index，将index + 1即是下一个光标位置&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;331-ctline使用示例&quot;&gt;3.3.1 CTLine使用示例&lt;/h3&gt;

&lt;p&gt;除了上面例子，再举一个：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）高亮特定字符&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lk9v5zgfb4.feishu.cn/space/api/box/stream/download/asynccode/?code=MjJjMWYyZjU4MDFlMzY2ZDIxNGQ2MTgxYWQ5MDgwNThfZDI2VzA4WnRETlZ4Ym1hVXIxT1BBc3RoSUZ5ZUV6ck1fVG9rZW46QzlPOGJZRkYzb0NKdFh4NEcweWNudlZybktkXzE3NjA4Nzc2MjY6MTc2MDg4MTIyNl9WNA&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;34-ctrun&quot;&gt;3.4 CTRun&lt;/h2&gt;

&lt;p&gt;CTRun相关API比较基础，这里主要介绍常用的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）CTLineGetGlyphRuns&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTLineGetGlyphRuns(_ line: CTLine) -&amp;gt; CFArray
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取CTRun的&lt;strong&gt;唯一&lt;/strong&gt;方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）CTRunGetAttributes&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTRunGetAttributes(_ run: CTRun) -&amp;gt; CFDictionary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取CTRun的属性；比如想知道这个CTRun是不是粗体，是不是链接，是不是目标Run等，都可以通过这个API。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;guard let attributes = CTRunGetAttributes(run) as? [NSAttributedString.Key: Any] else { continue }
// 现在你可以检查属性
if let color = attributes[.foregroundColor] as? UIColor {
    // ...
}
if let font = attributes[.font] as? UIFont {
    // ...
}
if let link = attributes[NSAttributedString.Key(&quot;my_custom_link_key&quot;)] {
    // 这就是那个可点击的 run！
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3）CTRunGetStringRange&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTRunGetStringRange(_ run: CTRun) -&amp;gt; CFRange
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取CTRun对应于原始属性字符串的哪个范围。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4）CTRunGetTypographicBounds&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTRunGetTypographicBounds(
    _ run: CTRun,
    _ range: CFRange,
    _ ascent: UnsafeMutablePointer&amp;lt;CGFloat&amp;gt;?,
    _ descent: UnsafeMutablePointer&amp;lt;CGFloat&amp;gt;?,
    _ leading: UnsafeMutablePointer&amp;lt;CGFloat&amp;gt;?
) -&amp;gt; Double
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取CTRun的度量信息，同上面许多API一样，当 range.length 为0时表示直到CTRun文本末尾。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5）CTRunGetPositions&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTRunGetPositions(
    _ run: CTRun,
    _ range: CFRange,
    _ buffer: UnsafeMutablePointer&amp;lt;CGPoint&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取CTRun中每一个字形的位置，注意这里的位置是&lt;strong&gt;相对于CTLine原点&lt;/strong&gt;的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6）CTRunDelegate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CTRunDelegate允许为属性字符串中的一段文本提供自定义布局测量信息，一般用于在文本中插入图片、自定义View等非文本元素。&lt;/p&gt;

&lt;p&gt;比如在文本中间插入图片：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lk9v5zgfb4.feishu.cn/space/api/box/stream/download/asynccode/?code=YmI5MzViNjczMjVlNDQ1ZDYwN2E3MDI0YTMyM2YxZDhfTlNJNmV4aGJtZloydTJPSWlYTUUwZ3NadkZ0NnNDcktfVG9rZW46R3JsM2JUUXZTb3ZNVm14SHV5dGNtZWhKblhjXzE3NjA4Nzc2MjY6MTc2MDg4MTIyNl9WNA&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;341-ctrun使用示例&quot;&gt;3.4.1 CTRun使用示例&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1）基础绘制&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lk9v5zgfb4.feishu.cn/space/api/box/stream/download/asynccode/?code=MTAwM2RiN2M2YTBiZjBkOGU0OWYxM2U0NjE4ZmQyNzRfMEZMUllNV05Ob3NHdzFuTW9jNGxnRE0zNzFRNHdIakRfVG9rZW46QW1XM2JaVzVwb25qUHB4cVh0MGNQamZGbmFjXzE3NjA4Nzc2MjY6MTc2MDg4MTIyNl9WNA&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）链接点击识别&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lk9v5zgfb4.feishu.cn/space/api/box/stream/download/asynccode/?code=M2FkMGE5MzBhODAyNWMwNmE4NzFiYTM5NjE3ZDJlYWJfY0tIY1J2NEZicklpbERGTU9hNkNYd0N0VTFrS1hKUGxfVG9rZW46WDlUcGJjRDdyb0d3T1F4UndjQWNOYzRFbnNkXzE3NjA4Nzc2MjY6MTc2MDg4MTIyNl9WNA&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;35-cttypesetter&quot;&gt;3.5 CTTypesetter&lt;/h2&gt;

&lt;p&gt;CTFramesetter会自动处理换行，当我们想手动控制换行时，可以用CTTypesetter。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）CTTypesetterSuggestLineBreak&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTTypesetterSuggestLineBreak(
    _ typesetter: CTTypesetter,
    _ startIndex: CFIndex,
    _ width: Double
) -&amp;gt; CFIndex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;按单词（word）换行。&lt;/p&gt;

&lt;p&gt;如下示例，输出：&lt;code class=&quot;highlighter-rouge&quot;&gt;Try word &lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;wrapping&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;let attrStringWith = NSAttributedString(string: &quot;Try word wrapping&quot;, attributes: [.font: UIFont.systemFont(ofSize: 18)])
let typesetter = CTTypesetterCreateWithAttributedString(attributedString)
let totalLength = attributedString.length // UTF-16 长度
var startIndex = 0
var lineCount = 1

while startIndex &amp;lt; totalLength {
    let charCount = CTTypesetterSuggestLineBreak(typesetter, startIndex, 100)
    // 如果返回 0，意味着一个字符都放不下（或已结束）
    if charCount == 0 {
        if startIndex &amp;lt; totalLength {
            print(&quot;Line \(lineCount): (Error) 无法放下剩余字符。&quot;)
        }
        break
    }
    // 获取这一行的子字符串
    let range = NSRange(location: startIndex, length: charCount)
    let lineString = (attributedString.string as NSString).substring(with: range)
    print(&quot;Line \(lineCount): '\(lineString)' (UTF-16 字符数: \(charCount))&quot;)
    // 更新下一次循环的起始索引
    startIndex += charCount
    lineCount += 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2）CTTypesetterSuggestClusterBreak&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;func CTTypesetterSuggestClusterBreak(
    _ typesetter: CTTypesetter,
    _ startIndex: CFIndex,
    _ width: Double
) -&amp;gt; CFIndex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;按字符（char）换行。&lt;/p&gt;

&lt;p&gt;如下示例，输出：&lt;code class=&quot;highlighter-rouge&quot;&gt;Try word wr&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;apping&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;let attrStringWith = NSAttributedString(string: &quot;Try word wrapping&quot;, attributes: [.font: UIFont.systemFont(ofSize: 18)])
let typesetter = CTTypesetterCreateWithAttributedString(attributedString)
let totalLength = attributedString.length // UTF-16 长度
var startIndex = 0
var lineCount = 1

while startIndex &amp;lt; totalLength {
    let charCount = CTTypesetterSuggestClusterBreak(typesetter, startIndex, 100)
    // 如果返回 0，意味着一个字符都放不下（或已结束）
    if charCount == 0 {
        if startIndex &amp;lt; totalLength {
            print(&quot;Line \(lineCount): (Error) 无法放下剩余字符。&quot;)
        }
        break
    }
    // 获取这一行的子字符串
    let range = NSRange(location: startIndex, length: charCount)
    let lineString = (attributedString.string as NSString).substring(with: range)
    print(&quot;Line \(lineCount): '\(lineString)' (UTF-16 字符数: \(charCount))&quot;)
    // 更新下一次循环的起始索引
    startIndex += charCount
    lineCount += 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;四总结&quot;&gt;四、总结&lt;/h1&gt;

&lt;p&gt;以上是CoreText中常用的API及其场景代码举例，完整示例代码可在公众号「非专业程序员Ping」回复 “CoreText” 获取。&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Oct 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/10/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3CoreText-API/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/10/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3CoreText-API/</guid>
        
        <category>跨端渲染</category>
        
        <category>富文本</category>
        
        
      </item>
    
      <item>
        <title>新手小白也能看懂的逆向技巧</title>
        <description>&lt;h1 id=&quot;引言&quot;&gt;引言&lt;/h1&gt;

&lt;p&gt;在我们日常工作中，难免会遇到一些Crash等疑难问题需要查看系统实现，有时候在做一些高级定制功能时，比如自定义富文本渲染等，也需要查看系统是怎么做的；特别是对于iOS程序员来说，由于Apple的闭源生态，遇到以上问题基本只能靠逆向手段来逐步分析。学会汇编和逆向，可以说是一个程序员从入门走向进阶的第一步。&lt;/p&gt;

&lt;p&gt;前面我们通过逆向手段分析了&lt;a href=&quot;https://mp.weixin.qq.com/s/EpaNjLcG6DZBc128A2gdIQ&quot;&gt;CoreText中的字体级联/Font Fallback机制&lt;/a&gt;，正好借此机会聊聊一些常用的逆向思路与技巧；本篇文章更多面向小白入门，不需要你有太多的汇编、LLDB知识，我们将结合一些典型场景来举一反三，当然，如果大家有更好的奇技淫巧欢迎一起交流、学习。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;持续更新，更多内容欢迎到我的公众号「非专业程序员Ping」一起交流！！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/公众号.jpg&quot; alt=&quot;公众号&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;一工欲善其事必先利其器&quot;&gt;一、工欲善其事，必先利其器&lt;/h1&gt;

&lt;p&gt;在开始之前，需要先了解两个常用的逆向工具：Hopper 和 IDA。具体安装和使用我们也有专门的文章介绍：&lt;a href=&quot;https://mp.weixin.qq.com/s/ubcnejz3St0LD2H0HDO6PA&quot;&gt;常见逆向工具使用&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;一般而言我们都是结合两个工具一起看，IDA 的反汇编通常比 Hopper 还原度更高，所以我们主用的还是IDA。&lt;/p&gt;

&lt;h1 id=&quot;二查找二进制文件路径&quot;&gt;二、查找二进制文件路径&lt;/h1&gt;

&lt;p&gt;分析的第一步，肯定是找到我们想要分析的入口函数，以&lt;a href=&quot;https://mp.weixin.qq.com/s/EpaNjLcG6DZBc128A2gdIQ&quot;&gt;CoreText中的字体级联/Font Fallback机制&lt;/a&gt;这篇文章的Case为例子，我们要研究的是 CTFontCopyDefaultCascadeListForLanguages 的实现，我们可以在LLDB中通过如下命令找到该符号所在库：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;image lookup &lt;span class=&quot;nt&quot;&gt;-rn&lt;/span&gt; CTFontCopyDefaultCascadeListForLanguages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/新手小白也能看懂的逆向技巧/LLDB查看二进制路径.png&quot; alt=&quot;LLDB查看二进制路径&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过这个命令我们可以得到两个信息：&lt;/p&gt;

&lt;p&gt;1）CTFontCopyDefaultCascadeListForLanguages 在CoreText库中&lt;/p&gt;

&lt;p&gt;2）CoreText 二进制文件的路径&lt;/p&gt;

&lt;p&gt;得到路径之后，在访达中可以通过快捷键 Command + Shift + G 可以快速跳转到位置，得到CoreText的二进制文件：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/新手小白也能看懂的逆向技巧/CoreText.png&quot; alt=&quot;CoreText&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;三善用ai&quot;&gt;三、善用AI&lt;/h1&gt;

&lt;p&gt;得到CoreText的二进制文件之后，我们通过IDA进行反汇编。&lt;/p&gt;

&lt;p&gt;之后将 CTFontCopyDefaultCascadeListForLanguages 的主要调用逻辑Copy到单独的文件夹：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/新手小白也能看懂的逆向技巧/CTFontCopyDefaultCascadeListForLanguages.png&quot; alt=&quot;CTFontCopyDefaultCascadeListForLanguages&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在AI没普及之前，我们一般是结合LLDB硬着头皮逐行分析，有了AI之后，我们可以直接将整个文件夹扔给AI（比如Cursor、GPT等），让AI给我们梳理流程、逐行注释，输出调用流程图等。&lt;/p&gt;

&lt;p&gt;如下，是AI生成的函数调用流程；结合AI的逻辑梳理和注释，我们对 CTFontCopyDefaultCascadeListForLanguages 的整体逻辑会有一个大致的理解。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/新手小白也能看懂的逆向技巧/AI流程图.png&quot; alt=&quot;AI流程图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，AI也不是全能的，一些逻辑AI也只是猜测甚至乱说😩，具体的细节还需要我们结合LLDB、IDA一起分析，只是说有了AI之后，可以大大加快我们的分析效率。&lt;/p&gt;

&lt;p&gt;下面我们将列举几个典型例子，我们日常分析中能遇到的也基本就这些。&lt;/p&gt;

&lt;h1 id=&quot;四典型例子&quot;&gt;四、典型例子&lt;/h1&gt;

&lt;h2 id=&quot;41-函数调用&quot;&gt;4.1 函数调用&lt;/h2&gt;

&lt;p&gt;不管是面向对象，还是面向过程，在汇编的世界里，程序逻辑都是由一个一个独立的函数调用组成的；对函数而言，最重要的就是它的&lt;strong&gt;输入输出&lt;/strong&gt;，基本上我们只要读懂了每个函数的输入输出是什么，那我们就能理解整体的逻辑。&lt;/p&gt;

&lt;p&gt;函数入参与返回值，按照数据类型不同可以总结为下面的表格：我们最常接触的，其实只有前两项&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/新手小白也能看懂的逆向技巧/函数入参与返回值.png&quot; alt=&quot;函数入参与返回值&quot; /&gt;&lt;/p&gt;

&lt;p&gt;举个🌰：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）整数/指针类型&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 以如下调用为例&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ctFont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;systemFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ofSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;languages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zh-HK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;zh-Hans&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;languages&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;入参&lt;/th&gt;
      &lt;th&gt;返回值&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/新手小白也能看懂的逆向技巧/函数入参.png&quot; alt=&quot;函数入参&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/新手小白也能看懂的逆向技巧/函数返回值.png&quot; alt=&quot;函数返回值&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;2）浮点数类型&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 以getArea为例&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;入参&lt;/th&gt;
      &lt;th&gt;返回值&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/新手小白也能看懂的逆向技巧/CGFloat函数入参.png&quot; alt=&quot;函数入参&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/新手小白也能看懂的逆向技巧/CGFloat函数返回值.png&quot; alt=&quot;函数返回值&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;42-怎么确定一段地址的含义&quot;&gt;4.2 怎么确定一段地址的含义&lt;/h2&gt;

&lt;p&gt;还是以举一个实际例子，在&lt;a href=&quot;https://mp.weixin.qq.com/s/EpaNjLcG6DZBc128A2gdIQ&quot;&gt;CoreText中的字体级联/Font Fallback机制&lt;/a&gt;文章中，我们要分析 TBaseFont::CreateFallbacks 的实现，签名如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;__int64 __usercall TBaseFont::CreateFallbacks@&amp;lt;X0&amp;gt;(__int64 result@&amp;lt;X0&amp;gt;, __int64 a2@&amp;lt;X1&amp;gt;, __int64 a3@&amp;lt;X2&amp;gt;, __int64 a4@&amp;lt;X3&amp;gt;, __int64 a5@&amp;lt;X4&amp;gt;, _QWORD *a6@&amp;lt;X8&amp;gt;) 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中第一个参数 result@&lt;X0&gt; 通过调用的地方我们知道是 CTFont 中的一个成员变量，但具体是什么不确定。&lt;/X0&gt;&lt;/p&gt;

&lt;p&gt;我们最终结合LLDB做如下尝试分析出了 result@&lt;X0&gt; 的具体含义：&lt;/X0&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/新手小白也能看懂的逆向技巧/LLDB查看地址信息.png&quot; alt=&quot;LLDB查看地址信息&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同理，我们如果拿到一段地址要分析其含义的话，也可以按这个步骤进行尝试。&lt;/p&gt;

&lt;h2 id=&quot;43-如何修改-if-条件&quot;&gt;4.3 如何修改 if 条件&lt;/h2&gt;

&lt;p&gt;我们以如下函数调用为例：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/新手小白也能看懂的逆向技巧/addNum.png&quot; alt=&quot;addNum&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们传入的num是1，正常逻辑会执行 num + 2 返回 3，那有没有办法不修改入参，执行 num + 1 的路径。&lt;/p&gt;

&lt;p&gt;我们来看下这段逻辑的汇编代码：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/新手小白也能看懂的逆向技巧/addNum-tbz.png&quot; alt=&quot;addNum-tbz&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图片注释说的比较明白；if 条件在汇编层面一般被翻译成 tbz（Test Bit and branch if Zero）、tbnz（Test Bit and branch if Not Zero）等，我们可以通过修改寄存器的值来更改执行分支；这在分析系统API时，是一个很有用的思路。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;举一反三，通过LLDB，我们可以实时修改任何寄存器、内存地址的值，这可以非常方便的帮我们浮现一些偶现的Bug、Crash等。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;44-如果跳过函数执行修改函数返回值&quot;&gt;4.4 如果跳过函数执行/修改函数返回值&lt;/h2&gt;

&lt;p&gt;我们还是以上面的addNum为例，如果我们不修改入参，但是想修改返回值，应该怎么做：&lt;/p&gt;

&lt;p&gt;最直接的方式是等addNum执行完后，修改返回值寄存器，如下，返回值存储在w0，我们可以修改成任意想要的值：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/新手小白也能看懂的逆向技巧/thread-return-register.png&quot; alt=&quot;thread-return-register&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但这种方式有个弊端是，需要等函数执行完，在实际的场景中，我们往往&lt;strong&gt;希望不执行函数且能让函数返回我们想要的值&lt;/strong&gt;，比如：函数中可能会修改其他参数，函数可能有复杂的鉴权逻辑无法通过鉴权等，这些场景我们往往不希望或者不能让函数执行，这种情况下就需要另一个指令：&lt;strong&gt;thread return&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以addNum为例，按如下步骤操作：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/新手小白也能看懂的逆向技巧/thread-return-si.png&quot; alt=&quot;thread-return-si&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/新手小白也能看懂的逆向技巧/thread-return-8.png&quot; alt=&quot;thread-return-8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/新手小白也能看懂的逆向技巧/thread-return.png&quot; alt=&quot;thread-return&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用 thread return 时，需要注意，我们的&lt;strong&gt;断点需要打在 objc_msgSend 的入口处&lt;/strong&gt;，如果在 addNum 的入口打断点执行 thread return，最终可能会得到非预期值；原因是 thread return 改的是当前 frame 的返回寄存器，由于Objective-C的runtime特性，函数调用实际上是经过 objc_msgSend 给对象发消息，addNum 的上一个frame其实是 objc_msgSend，而 objc_msgSend 返回时可能会继续修改 w0 寄存器的值，会导致最终上层取到的值非预期。&lt;/p&gt;

&lt;h2 id=&quot;45-善用-watchpoint-命令&quot;&gt;4.5 善用 watchpoint 命令&lt;/h2&gt;

&lt;p&gt;在实际场景中，我们可能会遇到某个变量被很多地方修改，但是我们又无法一一断点，比如我们要查看哪些地方修改了 UIView 的 frame；或者某个值的修改链路很深，一般在系统库中比较常见，比如iOS中闭包嵌套闭包调用的场景。&lt;/p&gt;

&lt;p&gt;针对以上场景，我们可以使用 watchpoint 命令，来观测变量的修改，watchpoint 的常见用法如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/新手小白也能看懂的逆向技巧/watchpoint.png&quot; alt=&quot;watchpoint&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;五总结&quot;&gt;五、总结&lt;/h1&gt;

&lt;p&gt;本文总结了我们在逆向的通用分析思路，以及LLDB调试汇编逻辑中可能遇到的常见技巧和场景；本文会长期更新，觉得有用的小伙伴可以关注下公众号，及时接收更新；当然，各路大神有更多有用技巧，也欢迎指教！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/公众号.jpg&quot; alt=&quot;公众号&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Oct 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/10/12/%E6%96%B0%E6%89%8B%E5%B0%8F%E7%99%BD%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E9%80%86%E5%90%91%E6%8A%80%E5%B7%A7/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/10/12/%E6%96%B0%E6%89%8B%E5%B0%8F%E7%99%BD%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E9%80%86%E5%90%91%E6%8A%80%E5%B7%A7/</guid>
        
        <category>逆向</category>
        
        
      </item>
    
      <item>
        <title>【持续更新】新手必备！！如何白嫖逆向工具</title>
        <description>&lt;h1 id=&quot;引言&quot;&gt;引言&lt;/h1&gt;

&lt;p&gt;工欲善其事，必先利其器。&lt;/p&gt;

&lt;p&gt;前面我们通过逆向手段分析了&lt;a href=&quot;https://mp.weixin.qq.com/s/EpaNjLcG6DZBc128A2gdIQ&quot;&gt;CoreText中的字体级联/Font Fallback机制&lt;/a&gt;，用到了Hopper、IDA等逆向工具，但接触过的小伙伴应该知道，这些逆向工具都是收费的，即使有免费试用，比如Hopper，但也只能试用半个小时，逆向分析时，每次刚分析出一点头绪就重启了，很是打断思路。&lt;/p&gt;

&lt;p&gt;本文将整理这些资源，确保我们在分析过程中，能顺畅使用！！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文中所有资源可在🌍公众号：「非专业程序员Ping」中回复「逆向」领取，持续更新！！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/公众号.jpg&quot; alt=&quot;公众号&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;hopper&quot;&gt;Hopper&lt;/h1&gt;

&lt;p&gt;直接打开安装包即可使用，每次打开可能遇到：Hopper Disassembler 5.15.4 Cracked，不用管，点击OK可以正常使用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/逆向/Hopper.png&quot; alt=&quot;Hopper&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;ida&quot;&gt;IDA&lt;/h1&gt;

&lt;p&gt;点击&lt;code class=&quot;highlighter-rouge&quot;&gt;IDAPro_lin.dmg&lt;/code&gt;直接安装，会安装好出两个IDA，一个32位的，一个64位的，平时使用时一般直接用64位的即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/逆向/IDA.png&quot; alt=&quot;IDA&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;解决ida已损坏问题&quot;&gt;解决IDA已损坏问题&lt;/h2&gt;

&lt;p&gt;命令行执行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo xattr -rd com.apple.quarantine /Applications/IDA\ Pro\ 7.0/ida.app/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;解决中文输入法下ida-crash问题&quot;&gt;解决中文输入法下IDA Crash问题&lt;/h2&gt;

&lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;libqcocoa.dylib&lt;/code&gt;文件替换&lt;code class=&quot;highlighter-rouge&quot;&gt;/Applications/IDA Pro 7.0/ida64.app/Contents/PlugIns/platforms&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/逆向/libqcocoa.png&quot; alt=&quot;libqcocoa&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ida常用快捷键&quot;&gt;IDA常用快捷键&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;快捷键&lt;/th&gt;
      &lt;th&gt;用途&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Control + F&lt;/td&gt;
      &lt;td&gt;搜索函数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;F5&lt;/td&gt;
      &lt;td&gt;反汇编函数&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/逆向/IDA_use.png&quot; alt=&quot;IDA_use&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Oct 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/10/11/%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/10/11/%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/</guid>
        
        <category>逆向</category>
        
        
      </item>
    
      <item>
        <title>CoreText Font Fallback</title>
        <description>&lt;h1 id=&quot;一引言&quot;&gt;一、引言&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文基于Xcode 16.4，iOS 18.5模拟器分析，不同系统版本可能有区别。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;前面我们介绍了&lt;a href=&quot;https://mp.weixin.qq.com/s/fcL6if52qYQUTChEjntHJg&quot;&gt;自定义文字排版引擎的原理&lt;/a&gt;，其中有一个复杂部分是字体Fallback，本文将通过逆向手段分析CoreText中&lt;code class=&quot;highlighter-rouge&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/code&gt;的实现，通过了解系统的字体回退实现，可以帮助我们实现更好的生产级别的文字排版引擎。&lt;/p&gt;

&lt;p&gt;在开始之前，先介绍下&lt;code class=&quot;highlighter-rouge&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/code&gt; API，其完整的函数签名如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;官方文档：https://developer.apple.com/documentation/coretext/ctfontcopydefaultcascadelistforlanguages(&lt;em&gt;:&lt;/em&gt;:)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;languagePrefList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一个字体不可能支持所有的Unicode，比如Helvetica不支持中文，PingFang不支持韩文，在实际渲染时，往往是多个字体共同参与完成的，另外不同字体支持的Unicode有交集，那最终选择哪个字体也是有优先级的；&lt;code class=&quot;highlighter-rouge&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/code&gt;的作用就是：给定一个字体和语言列表，返回系统默认的Fallback列表（也叫级联列表，CascadeList），简单理解就是系统会按这个Fallabck列表进行优先级选择Fallback字体。&lt;/p&gt;

&lt;p&gt;在macOS/iOS中，我们也可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;kCTFontCascadeListAttribute&lt;/code&gt;显示指定Fallback链（如下），这样就能自定义Fallback，当然，如果不指定的话会系统也会启用默认Fallback，来尽量保证文本渲染正确。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeAttributedStringWithFallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;baseFontName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Helvetica&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;languages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zh-Hans&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ja&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ko&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSAttributedString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;baseFont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontCreateWithName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseFontName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fallbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;languages&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CTFontDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CFString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;kCTFontNameAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseFontName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;kCTFontSizeAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// 可以在这里修改fallbacks，来自定义回退&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCTFontCascadeListAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fallbacks&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newDescriptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontDescriptorCreateWithAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;finalFont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontCreateWithFontDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attributesDict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSAttributedString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finalFont&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSAttributedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributesDict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面，我们按如下调用Demo来实际研究下：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ctFont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;systemFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ofSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;languages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zh-Hans&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cascadeList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;languages&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;二调用链路&quot;&gt;二、调用链路&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/FontFallback/CTFontCopyDefaultCascadeListForLanguages.png&quot; alt=&quot;CTFontCopyDefaultCascadeListForLanguages&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上是&lt;code class=&quot;highlighter-rouge&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/code&gt;的调用链路，可以看出大致分为两条处理链路：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Preset Fallbacks&lt;/strong&gt;：系统预设Fallback，这是一个“快速通道”，系统内部维护了一个针对特定字体（如系统UI字体）的硬编码Fallback列表，如果请求的主字体在这个预设列表中，系统会直接使用这个列表，速度非常快。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;System Default Fallbacks&lt;/strong&gt;：系统默认Fallback，这是一个“通用通道”，如果预设列表没有命中，系统会启动默认Fallback流程，该流程会加载一个全局的、定义了完整回退规则的配置文件，根据用户的语言偏好设置，动态地为请求的字体生成一个Fallback列表，并进行缓存以提高后续调用效率。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;后文我们也将按这两个流程分开分析。&lt;/p&gt;

&lt;p&gt;完整的反汇编逻辑和注释可以参考：https://github.com/HusterYP/FontFallback&lt;/p&gt;

&lt;h1 id=&quot;三tbasefontcreatefallbacks&quot;&gt;三、TBaseFont::CreateFallbacks&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;/**
* 核心分发函数，决定是使用预设Fallback还是系统默认Fallback。
*
* @param result@&amp;lt;X0&amp;gt; (TBaseFont*) TBaseFont 实例。
* @param a2@&amp;lt;X1&amp;gt;     (int) 标志位，可能表示是否为系统UI字体。
* @param a3@&amp;lt;X2&amp;gt;     (int) 字体属性。
* @param a4@&amp;lt;X3&amp;gt;     (_QWORD*) 未知参数，可能是字符集。
* @param a5@&amp;lt;X4&amp;gt;     (CFArrayRef) 语言列表。
* @param a6@&amp;lt;X8&amp;gt;     (_QWORD*) 用于接收结果的输出指针。
*
* @return __int64 无实际意义。
 */
__int64 __usercall TBaseFont::CreateFallbacks@&amp;lt;X0&amp;gt;(__int64 result@&amp;lt;X0&amp;gt;, __int64 a2@&amp;lt;X1&amp;gt;, __int64 a3@&amp;lt;X2&amp;gt;, __int64 a4@&amp;lt;X3&amp;gt;, __int64 a5@&amp;lt;X4&amp;gt;, _QWORD *a6@&amp;lt;X8&amp;gt;)
{
	...
  // 保存参数
  v6 = a3;  // 字体特性标志
  v7 = a5;  // 语言数组指针
  v8 = a2;  // 系统UI字体标志
  v9 = (TBaseFont *)result;  // 基础字体对象
  ...
  // 如果系统UI字体标志不为 0，尝试创建预设字体回退
  if ( (_DWORD)a2 )
  {
    v11 = (_QWORD *)a4;
    // 从字体对象中获取字体名，如.SFUI-Regular
    v12 = (*(__int64 (**)(void))(*(_QWORD *)result + 560LL))();
    if ( v12 )
    {
      v13 = v12;
      // 初始化字体描述符源对象
      TDescriptorSource::TDescriptorSource((TDescriptorSource *)&amp;amp;v33);
      _X26 = &amp;amp;v34;
      // 创建预设字体回退列表
      _X0 = TDescriptorSource::CreatePresetFallbacks(v13, v11, v7, v6, &amp;amp;v34);
      ...
    }
  }
  // 检查预设字体回退是否成功创建
  v24 = objc_retain(_X0);
  if ( v24 )
  {
    v25 = v24;
    v26 = CFArrayGetCount(v24);
    result = objc_release(v25);
    // 如果预设字体回退不为空，直接返回
    if ( v26 )
      return result;
  }
  ...
  // 如果预设字体回退为空，创建系统默认字体回退
  v27 = TBaseFont::GetCSSFamily(v9);
  _X23 = &amp;amp;v34;

  // 创建系统默认字体回退列表
  _X0 = TBaseFont::CreateSystemDefaultFallbacks((__int64)v9, v27, v7, v8, &amp;amp;v34);
  ...
  return result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是处理预设Fallback和默认Fallback的入口函数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）&lt;code class=&quot;highlighter-rouge&quot;&gt;result@&amp;lt;X0&amp;gt;&lt;/code&gt;参数是什么&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先我们主要关注的是第一个入参&lt;code class=&quot;highlighter-rouge&quot;&gt;result@&amp;lt;X0&amp;gt;&lt;/code&gt;，我们先尝试反汇编x0，发现它其实指向的是类 &lt;code class=&quot;highlighter-rouge&quot;&gt;TTenuousComponentFont&lt;/code&gt; （CoreText 内部的一个私有类，继承自 &lt;code class=&quot;highlighter-rouge&quot;&gt;TBaseFont&lt;/code&gt;）的虚函数表，如下，下面的&lt;code class=&quot;highlighter-rouge&quot;&gt;udf&lt;/code&gt; 其实是因为LLDB尝试将数据当代码解读，但其实它是一个指针表，所以识别成了未定义。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/FontFallback/CreateFallbacks-1.png&quot; alt=&quot;CreateFallbacks-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CoreText 是由 C++ 和 Objective-C 混合实现的，C++类对象的方法调用是通过虚函数表（vtable）实现的，C++ 虚表是一个函数指针数组，对象里保存着一个 vptr（虚表指针），指向它所属类的 vtable。&lt;/p&gt;

&lt;p&gt;下面我们尝试将&lt;code class=&quot;highlighter-rouge&quot;&gt;result@&amp;lt;X0&amp;gt;&lt;/code&gt;按虚表指针解析，主要是&lt;code class=&quot;highlighter-rouge&quot;&gt;dis -c 5 -s xxx&lt;/code&gt;，可以通过这种方式索引各方法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/FontFallback/CreateFallbacks-2.png&quot; alt=&quot;CreateFallbacks&quot; /&gt;&lt;/p&gt;

&lt;p&gt;继续往上追溯，&lt;code class=&quot;highlighter-rouge&quot;&gt;result@&amp;lt;X0&amp;gt;&lt;/code&gt;其实来自原始入参CTFont中的一个属性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）什么情况下会触发Preset Fallbacks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;提取主要控制逻辑如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;// 如果系统UI字体标志不为 0，尝试创建预设字体回退
if ( (_DWORD)a2 )
{
  v11 = (_QWORD *)a4;
  // 从字体对象中获取字体名，如.SFUI-Regular
  v12 = (*(__int64 (**)(void))(*(_QWORD *)result + 560LL))();
  if ( v12 )
  {
  	...
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以发现当&lt;code class=&quot;highlighter-rouge&quot;&gt;a2&lt;/code&gt;非0时会触发Preset Fallbacks，继续往上追溯&lt;code class=&quot;highlighter-rouge&quot;&gt;a2&lt;/code&gt;来自于&lt;code class=&quot;highlighter-rouge&quot;&gt;TFont::IsSystemUIFontAndForShaping((TFont *)v5, &amp;amp;v14)&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;IsSystemUIFontAndForShaping&lt;/code&gt;不在本文重点，简单理解就是如果是系统UI字体且用于文本塑形的字体则返回true，比如典型的&lt;code class=&quot;highlighter-rouge&quot;&gt;UIFont.systemFont&lt;/code&gt;（&lt;code class=&quot;highlighter-rouge&quot;&gt;.SFUI-Regular&lt;/code&gt;：San Francisco (SF)字体家族中的字体）判定为true。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Q：为什么只有系统UI字体才有预设Fallback&lt;/p&gt;

  &lt;p&gt;简单理解就是只有系统UI字体是系统完全可控可感知的，所以可以提前构建Fallback列表&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;3）什么情况下会触发System Default Fallbacks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;从上面反汇编逻辑比较容易看出，当Preset Fallbacks的结果为空时，会继续走System Default Fallbacks兜底。&lt;/p&gt;

&lt;h1 id=&quot;四preset-fallbacks&quot;&gt;四、Preset Fallbacks&lt;/h1&gt;

&lt;h2 id=&quot;41-获取全局预设fallback列表ctpresetfallbacks&quot;&gt;4.1 获取全局预设Fallback列表CTPresetFallbacks&lt;/h2&gt;

&lt;p&gt;在分析系统是如何为特定字体构建预设Fallback（字体的级联列表）之前，我们需要先知道预设列表是从哪里读取的。&lt;/p&gt;

&lt;p&gt;系统是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;GetCTPresetFallbacksDictionary&lt;/code&gt;获取预设列表的，继续往下追溯预设列表最终来自&lt;code class=&quot;highlighter-rouge&quot;&gt;GSFontCacheGetData&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;/*
 * 函数: GSFontCacheGetData
 * -------------------------
 * @brief  从图形服务（GraphicsServices）的字体缓存中根据键名获取数据。
 * @param  a1 (void*)      String入参，实际是对应plist名称，比如预设列表的plist名称CTPresetFallbacks.plist
 * @param  a2 (const char*) 在此反汇编中未使用，可能是寄存器传参的残留。
 * @return (void*)         返回一个指向缓存数据的指针，如果找不到则可能返回NULL。
 */
void *__fastcall GSFontCacheGetData(void *a1, const char *a2)
{
  // =================================================================
  // 快速通道 1: 检查是否请求 &quot;DefaultFontFallbacks.plist&quot;
  // =================================================================
  // 调用 a1 的 isEqualToString: 方法，与字符串 &quot;DefaultFontFallbacks.plist&quot;（stru_6BEB8）比较
  if ( (unsigned int)objc_msgSend_isEqualToString_(a1, a2, &amp;amp;stru_6BEB8) )
  {
    // 如果是，直接返回全局变量 kDefaultFontFallbacks 的值。
    // 这是一个非常高效的硬编码路径，用于获取默认的后备字体规则。
    v4 = &amp;amp;kDefaultFontFallbacks;
    return (void *)*v4;
  }

  // =================================================================
  // 快速通道 2: 检查是否请求 &quot;CTPresetFallbacks.plist&quot;
  // =================================================================
  // 调用 a1 的 isEqualToString: 方法，与字符串 &quot;CTPresetFallbacks.plist&quot;（stru_6BED8）比较
  if ( (unsigned int)objc_msgSend_isEqualToString_(v2, v3, &amp;amp;stru_6BED8) )
  {
    // 如果是，直接返回全局变量 CTPresetFallbacks 的值。
    // 这正是我们之前分析的、包含了所有预设后备规则的那个.plist文件的内容。
    // 系统通过这个键来加载整个预设后备字典。
    v4 = &amp;amp;CTPresetFallbacks;
    return (void *)*v4;
  }

  // =================================================================
  // 快速通道 3: 检查是否请求某个特殊字典
  // =================================================================
  // 调用 a1 的 isEqualToString: 方法，与字符串 &quot;CTFontInfo.plist&quot;（stru_6BEF8）比较
  if ( !((unsigned __int64)objc_msgSend_isEqualToString_(v2, v5, &amp;amp;stru_6BEF8) &amp;amp; 1) )
  {
    // 如果键不是 stru_6BEF8，则进入下面的常规查询逻辑
    // =================================================================
    // 常规查询路径: 在一个全局字典 (unk_1EB8F0) 中查找
    // =================================================================
    // 检查键是否为 &quot;CTCharacterSets.plist&quot; (stru_6BF18)
    if ( (unsigned int)objc_msgSend_isEqualToString_(v2, v7, &amp;amp;stru_6BF18) )
    {
      // **键名转换/别名**: 如果是，则将要查询的键替换为另一个字符串 &quot;CTCharacterSets&quot; (stru_6BF38)
      v9 = &amp;amp;stru_6BF38;
    }
    // 检查键是否为 &quot;GSFontCache.plist&quot; (stru_6BF58)
    else if ( (unsigned int)objc_msgSend_isEqualToString_(v2, v8, &amp;amp;stru_6BF58) )
    {
      // **键名转换/别名**: 如果是，则将要查询的键替换为另一个字符串 &quot;GSFontCache&quot; (stru_6BF78)
      v9 = &amp;amp;stru_6BF78;
    }
    else
    {
      // 检查键是否为 &quot;CoreTextConfig.plist&quot; (stru_6BF98)
      if ( !(unsigned int)objc_msgSend_isEqualToString_(v2, v8, &amp;amp;stru_6BF98) )
        // 如果键不匹配上面任何一个需要转换的键，则使用原始的键 v2 在全局字典中查找
        return objc_msgSend_objectForKey_(&amp;amp;unk_1EB8F0, v8, v2);
      
      // **键名转换/别名**: 如果键是 stru_6BF98，则将其替换为 &quot;CoreTextConfig&quot; (stru_6BFB8)
      v9 = &amp;amp;stru_6BFB8;
    }
    
    // 对于所有经过“键名转换”的情况，使用转换后的新键 v9 在全局字典中查找
    // objectForKeyedSubscript: 是 OC 中字典下标语法 (dictionary[key]) 的底层实现
    return objc_msgSend_objectForKeyedSubscript_(&amp;amp;unk_1EB8F0, v8, v9);
  }

  // 如果快速通道3的检查为真 (键等于 stru_6BEF8)，则直接返回整个全局字典 unk_1EB8F0
  return &amp;amp;unk_1EB8F0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从反汇编逻辑不太容易看，可以结合LLDB Debug一起分析：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/FontFallback/CTPresetFallbacks-plist.png&quot; alt=&quot;CTPresetFallbacks-plist&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在查询预设列表时，入参是&lt;code class=&quot;highlighter-rouge&quot;&gt;CTPresetFallbacks.plist&lt;/code&gt;，系统会从&lt;strong&gt;全局变量CTPresetFallbacks&lt;/strong&gt;中读取预设列表，CTPresetFallbacks是全局共享的，是在CoreText服务启动时构建的一个全局常量，内容如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;完整列表见：https://github.com/HusterYP/FontFallback/blob/main/CTPresetFallbacks.plist&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.SFUI-Regular&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleSystemFallback-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleColorEmojiUI&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.SFGeorgian-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;HelveticaNeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleSymbolsFB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleArabicFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;如果系统语言是阿拉伯语(ar)，则使用此字体&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ur&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleUrduFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;如果是乌尔都语(ur)，则使用此字体&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleJapaneseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;如果是日语(ja)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleKoreanFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;如果是韩语(ko)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotoSansMyanmar-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-Qaag&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotoSansZawgyi-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-HK&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleHongKongChineseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;香港繁体中文&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-Hans&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleSimplifiedChineseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;简体中文&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-Hant&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleTraditionalChineseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;台湾繁体中文&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-MO&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleMacaoChineseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.ThonburiUI-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.SFHebrew-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.SFArmenian-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleIndicFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;KohinoorDevanagari-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Kailasa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;KohinoorBangla-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;KohinoorGujarati-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MuktaMahee-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotoSansKannada-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;KhmerSangamMN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;LaoSangamMN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;MalayalamSangamMN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;NotoSansOriya&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;SinhalaSangamMN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;TamilSangamMN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;KohinoorTelugu-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotoSansArmenian-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;EuphemiaUCAS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Menlo-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;AppleSymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ArialMT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;STIXTwoMath-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.HiraKakuInterface-W4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;HelveticaNeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Kefa-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Galvji&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.PhoneFallback&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;SystemWideFallbacks&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;887&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Charter-Roman&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;895&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;895&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;DINCondensed-Bold&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;975&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1315&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Charter-Roman&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1316&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1319&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.SFUI-Regular&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CTPresetFallbacks.plist中主要定义了两组内容：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）为特定字体定义Fallback列表/级联列表&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如我们这里要查询&lt;code class=&quot;highlighter-rouge&quot;&gt;.SFUI-Regular&lt;/code&gt;的Fallback列表，就用&lt;code class=&quot;highlighter-rouge&quot;&gt;.SFUI-Regular&lt;/code&gt;作为key去CTPresetFallbacks.plist中找到一组字典进行解析，解析逻辑后面会讲。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）SystemWideFallbacks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SystemWideFallbacks定义了一个全局级别的 Fallback 映射，和字体无关，按 Unicode code point 范围定义；每个元素是一个三元组，包括：起始 Unicode 码点 + 结束 Unicode 码点 + 指定 Fallback 字体。&lt;/p&gt;

&lt;p&gt;比如128～887范围优先用Charter-Roman。&lt;/p&gt;

&lt;h2 id=&quot;42-预设列表解析流程&quot;&gt;4.2 预设列表解析流程&lt;/h2&gt;

&lt;p&gt;获取到全局预设列表之后，我们再来看系统是如何针对特定字体（系统的UI字体）构建级联列表的，主要逻辑在&lt;code class=&quot;highlighter-rouge&quot;&gt;CreatePresetFallbacks&lt;/code&gt;中，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;/*
* 实现“快速通道”，从一个全局的、硬编码的字典中查找并创建预设列表。
*
* @param a1@&amp;lt;X1&amp;gt; (CFStringRef) 字体名称或标识符。
* @param a2@&amp;lt;X2&amp;gt; (_QWORD*)     输出参数，可能用于字符集。
* @param a3@&amp;lt;X3&amp;gt; (CFArrayRef)  语言列表。
* @param a4@&amp;lt;X4&amp;gt; (int)         标志位。
* @param a5@&amp;lt;X8&amp;gt; (_QWORD*)     用于接收结果的输出指针。
*
* @return __int64 返回创建的预设列表 (CFArrayRef)。
*/
__int64 __usercall TDescriptorSource::CreatePresetFallbacks@&amp;lt;X0&amp;gt;(__int64 a1@&amp;lt;X1&amp;gt;, _QWORD *a2@&amp;lt;X2&amp;gt;, __int64 a3@&amp;lt;X3&amp;gt;, __int64 a4@&amp;lt;X4&amp;gt;, _QWORD *a5@&amp;lt;X8&amp;gt;)
{
  ...
  _X19 = a5;
  // 1. 获取全局预设字典
  result = GetCTPresetFallbacksDictionary();
  v11 = result;
  // 2. 创建有序的语言列表
  v12 = CreateOrderedLanguages(v6);
  // 3. 使用字体名 a1 在预设字典中查找
  v13 = CFDictionaryGetValue(v11, v8);
  // 4. 如果找到匹配项，并且它是一个数组，则开始处理
  if ( v13 &amp;amp;&amp;amp; (v15 = v13, v16 = CFGetTypeID(v13), v16 == CFArrayGetTypeID()) )
  {
    // 创建一个可变数组用于存放结果
    v37 = CFArrayCreateMutable(*(_QWORD *)kCFAllocatorDefault_ptr, 0LL, kCFTypeArrayCallBacks_ptr);
    v17 = CFArrayGetCount(v15);
    if ( v17 )
    {
      // 5. 遍历预设数组中的每一项
      do
      {
        v20 = (__CFString *)CFArrayGetValueAtIndex(v15, v19);
        v21 = CFGetTypeID(v20);
				// 5a. 如果是字典类型，说明是按语言区分的后备字体
        if ( v21 == CFDictionaryGetTypeID() )
        {
          // 遍历上面构建的语言列表，在字典中查找匹配的后备字体
          do
          {
            v25 = CFArrayGetValueAtIndex(v12, v24);
            if ( v20 )
            {
              v26 = CFDictionaryGetValue(v20, v25);
              if ( v26 )
                TDescriptorSource::AppendFontDescriptorFromName(&amp;amp;v37, v26, 1024LL);
            }
          }
          while ( v23 != v24 );
        }
        // 5b. 如果是字符串类型，直接作为后备字体名
        else
        {
          // ... 对Emoji等特殊字体进行处理 ...
          TDescriptorSource::AppendFontDescriptorFromName(&amp;amp;v37, v20, 1024LL);
        }
        ++v19;
      }
      while ( v19 != v18 );
    }
  }
  // 将最终结果写入输出指针并返回
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码注释已经比较清晰，总结下来解析流程是：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）通过字体名从全局预设列表中查询Fallback数组&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如我们通过&lt;code class=&quot;highlighter-rouge&quot;&gt;.SFUI-Regular&lt;/code&gt;查询到的原始Fallback数组如下：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.SFUI-Regular&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleSystemFallback-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleColorEmojiUI&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.SFGeorgian-Regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;HelveticaNeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleSymbolsFB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleArabicFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;如果系统语言是阿拉伯语(ar)，则使用此字体&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ur&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleUrduFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;如果是乌尔都语(ur)，则使用此字体&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleJapaneseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;如果是日语(ja)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleKoreanFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;如果是韩语(ko)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotoSansMyanmar-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-Qaag&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotoSansZawgyi-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-HK&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleHongKongChineseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;香港繁体中文&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-Hans&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleSimplifiedChineseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;简体中文&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-Hant&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleTraditionalChineseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;台湾繁体中文&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-MO&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleMacaoChineseFont-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	  	&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2）遍历Fallback数组，如果是字典类型，需要按语言区分Fallback字体&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;还记得最初&lt;code class=&quot;highlighter-rouge&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/code&gt;的函数签名中，第二个参数支持传语言列表：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;languagePrefList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;系统会通过&lt;code class=&quot;highlighter-rouge&quot;&gt;CreateOrderedLanguages&lt;/code&gt;创建一个有序的语言数组，具体做法是将调用者想要的语言（languagePrefList）、App自身想要的语言、以及用户在整个系统中设置的语言偏好合并成一个有序的语言数组。&lt;/p&gt;

&lt;p&gt;然后遍历语言数组，从字典中筛选出对应语言的Fallback字体添加到结果中。&lt;/p&gt;

&lt;p&gt;从这里可以看出，&lt;strong&gt;同一字体的Fallback列表，还会受语言影响&lt;/strong&gt;，比如：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;zh-Hans&lt;/th&gt;
      &lt;th&gt;zh-HK&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/FontFallback/zh-Hans.png&quot; alt=&quot;zh-Hans&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/FontFallback/zh-HK.png&quot; alt=&quot;zh-HK&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;Q：为什么Fallback字体还跟语言设置相关?&lt;/p&gt;

  &lt;p&gt;参考&lt;a href=&quot;https://mp.weixin.qq.com/s/fcL6if52qYQUTChEjntHJg&quot;&gt;自定义文字排版引擎的原理&lt;/a&gt;一文中针对「相同Script的字符如果使用了不同的Font，会有什么问题」的回答&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;3）遍历Fallback数组，如果是字符串类型，「直接」作为Fallback字体&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;「直接」加引号，因为还会处理Emoji字体等特殊情况。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4）Fallback数组遍历完成之后，构建完成该字体最终的预设Fallabck列表/级联列表&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;42-preset-fallbacks小结&quot;&gt;4.2 Preset Fallbacks小结&lt;/h2&gt;

&lt;p&gt;总结下Preset Fallbacks流程：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）系统从全局常量CTPresetFallbacks中读取预设列表&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）根据用户指定主字体名从全局预设列表中查询Fallback数组&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3）遍历Fallback数组，如果为字典类型，根据用户指定语言、App偏好语言、系统设置偏好语言来选择Fallback字体&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4）遍历Fallback数组，如果为字符串类型，「直接」作为Fallback字体&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5）Fallback数组遍历完后，对应字体的级联列表构建完成&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;五system-default-fallbacks&quot;&gt;五、System Default Fallbacks&lt;/h1&gt;

&lt;p&gt;如果系统预设Fallback没有查到结果，则会兜底到系统默认Fallback逻辑，为字体动态构建级联列表。&lt;/p&gt;

&lt;h2 id=&quot;51-cssfamily分类&quot;&gt;5.1 CSSFamily分类&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;__int64 __usercall TBaseFont::CreateFallbacks@&amp;lt;X0&amp;gt;(__int64 result@&amp;lt;X0&amp;gt;, __int64 a2@&amp;lt;X1&amp;gt;, __int64 a3@&amp;lt;X2&amp;gt;, __int64 a4@&amp;lt;X3&amp;gt;, __int64 a5@&amp;lt;X4&amp;gt;, _QWORD *a6@&amp;lt;X8&amp;gt;)
{
  ...
  // 如果预设字体回退为空，创建系统默认字体回退
  v27 = TBaseFont::GetCSSFamily(v9);
  _X23 = &amp;amp;v34;

  // 创建系统默认字体回退列表
  _X0 = TBaseFont::CreateSystemDefaultFallbacks((__int64)v9, v27, v7, v8, &amp;amp;v34);
  ...
  return result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;系统默认Fallback，会先通过&lt;code class=&quot;highlighter-rouge&quot;&gt;TBaseFont::GetCSSFamily&lt;/code&gt;将用户指定主字体分类，这是后续查表的关键；GetCSSFamily会读取字体特征进行分类，主要分为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sans-serif&lt;/code&gt; (无衬线体)&lt;/strong&gt;：字体笔画的末端没有额外的装饰性“脚”，如Helvetica、Arial、San Francisco (SF Pro)、PingFang SC (苹方)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;serif&lt;/code&gt; (衬线体)&lt;/strong&gt;：字体笔画的末端有装饰性的“脚”（衬线），如Times New Roman、Georgia、New York、宋体&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;monospace&lt;/code&gt; (等宽体)&lt;/strong&gt;：所有字符占据相同的宽度，如Menlo、Courier、Monaco、SF Mono&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cursive&lt;/code&gt; (手写体)&lt;/strong&gt;：如Snell Roundhand&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fantasy&lt;/code&gt; (装饰体)&lt;/strong&gt;：如Papyrus&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除此外，苹果在UI上下文中，还有几个扩展的CSSFamily分类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ui-serif&lt;/code&gt;&lt;/strong&gt;：用于 UI 的衬线字体，主要指 &lt;code class=&quot;highlighter-rouge&quot;&gt;New York&lt;/code&gt; 家族&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ui-sans-serif&lt;/code&gt;&lt;/strong&gt;：用于 UI 的无衬线字体，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;San Francisco&lt;/code&gt; 家族&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ui-monospace&lt;/code&gt;&lt;/strong&gt;：用于 UI 的等宽字体，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;SF Mono&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ui-rounded&lt;/code&gt;&lt;/strong&gt;：用于 UI 的圆体字体。如 &lt;code class=&quot;highlighter-rouge&quot;&gt;SF Pro Rounded&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;SF Compact Rounded&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;52-获取系统默认fallback列表kdefaultfontfallbacks&quot;&gt;5.2 获取系统默认Fallback列表kDefaultFontFallbacks&lt;/h2&gt;

&lt;p&gt;和全局预设列表一样，系统默认Fallback列表也是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;GSFontCacheGetData&lt;/code&gt;读取配置文件。&lt;/p&gt;

&lt;p&gt;调用链路是：&lt;code class=&quot;highlighter-rouge&quot;&gt;CreateSystemDefaultFallbacks -&amp;gt; CopyDefaultSubstitutionListForLanguages -&amp;gt; CopyFontFallbacksForLanguages -&amp;gt; CopyFontFallbacks -&amp;gt; CopyDefaultFontFallbacks -&amp;gt; GSFontCacheGetData&lt;/code&gt;；通过GSFontCacheGetData读取系统默认Fallback列表时，入参是&lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultFontFallbacks.plist&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/FontFallback/DefaultFontFallbacks.plist.png&quot; alt=&quot;DefaultFontFallbacks.plist&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也是从一个全局常量&lt;code class=&quot;highlighter-rouge&quot;&gt;kDefaultFontFallbacks&lt;/code&gt;中获取的，内容如下：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;cursive&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;fantasy&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;monospace&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sans-serif&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;AppleColorEmoji&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.AppleSymbolsFB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;GeezaPro;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HiraginoSans-W3&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AppleSDGothicNeo-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotoSansMyanmar-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-Qaag&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotoSansZawgyi-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ur&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;NotoNastaliqUrdu;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-HK&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PingFangHK-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-Hans&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PingFangSC-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-Hant&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PingFangTC-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zh-MO&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PingFangMO-Regular&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Thonburi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ArialHebrew&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;serif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ui-monospace&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ui-rounded&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ui-serif&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultFontFallbacks.plist&lt;/code&gt;的格式基本和&lt;code class=&quot;highlighter-rouge&quot;&gt;CTPresetFallbacks.plist&lt;/code&gt;类似，也是KV结构，Value部分也分为字符串和字典类型，字典类型也会根据用户指定语言来择优选取。&lt;/p&gt;

&lt;h2 id=&quot;53-解析并缓存系统默认fallback列表&quot;&gt;5.3 解析并缓存系统默认Fallback列表&lt;/h2&gt;

&lt;p&gt;解析和缓存逻辑主要由&lt;code class=&quot;highlighter-rouge&quot;&gt;CopyFontFallbacks&lt;/code&gt;处理，主逻辑如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;/**
 * CoreText 字体回退 - 复制字体回退列表函数
 * 功能: 根据字体描述符和语言信息复制相应的字体回退列表
 * 
 * 参数:
 *   a1 (_QWORD *): 输出参数指针，用于接收生成的字体回退数组
 *   a2 (__int64): 字体描述符对象指针
 *   a3 (__CFString *): 主要语言代码字符串
 *   a4 (__CFString *): 次要语言代码字符串（可选）
 *   a5 (__int64): 语言数组指针（可选）
 * 
 * 返回值:
 *   __int64: 操作结果
 */
__int64 __fastcall TFontFallbacks::CopyFontFallbacks(_QWORD *a1, __int64 a2, __CFString *a3, __CFString *a4, __int64 a5)
{
	...
  // 保存参数到局部变量和寄存器
  _X22 = a5;  // 语言数组指针
  v6 = a4;    // 次要语言代码
  v7 = a3;    // 主要语言代码
  v8 = a2;    // 字体描述符对象
  v9 = a1;    // 输出参数指针
  // 先在Font实例成员变量字典中查找Fallback缓存
  v16 = CFDictionaryGetValue(_X0, a3);
  ...
  // 如果没有找到缓存，则动态构建
  if ( !_X9 )
  {
  	...
    // 获取系统默认Fallback列表
    CopyDefaultFontFallbacks();
    v22 = objc_retain(_X0);
    if ( v22 )
    {
      // 用cssfamliy从系统默认Fallback列表中查找映射
      v24 = CFDictionaryGetValue(v22, v6);      
      // 检查是否找到了有效的字体列表
      if ( v24 &amp;amp;&amp;amp; CFArrayGetCount(v24) &amp;gt;= 1 )
      {
      	...
      	// 解析列表
        // 根据用户指定语言、App偏好语言、系统设置偏好语言创建有序语言数组
        v29 = CreateOrderedLanguages(_X22);
        // 处理字体回退列表
        TDescriptorSource::ProcessFallbackList(v24, (__int64)&amp;amp;v59, v31, v29);

        // 解析通用（common）字体回退列表
        v34 = CFDictionaryGetValue(_X25, &amp;amp;stru_1F69C8);
        TDescriptorSource::ProcessFallbackList(v36, (__int64)&amp;amp;v59, v31, v29);

				// 缓存结果到Font实例
        v44 = objc_retain(_X0);
        if ( v44 )
        {
        	...
        	CFDictionarySetValue(_X0, v7, _X2);
        }
      }
    }
  // 处理特定语言的回退逻辑
  ...
  return objc_release(v57);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意CopyFontFallbacks中一共调了两次ProcessFallbackList，逻辑是先取对应CSSFamily的（比如sans-serif）Fallback列表，再取common的Fallback列表，最终将二者合并起来作为对应字体的Fallback结果。&lt;/p&gt;

&lt;p&gt;ProcessFallbackList解析字体列表的逻辑和预设Fallback类似，也是根据Value是字符串类型还是字典类型来区分解析，此处不再赘述。&lt;/p&gt;

&lt;p&gt;最后，CopyFontFallbacks还会将Fallback结果缓存到Font实例的字典变量中，key是&lt;code class=&quot;highlighter-rouge&quot;&gt;cssfamily + languages&lt;/code&gt;（逗号分隔开），比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;sans-serif,zh-HK&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/FontFallback/CopyFontFallbacks.png&quot; alt=&quot;CopyFontFallbacks&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CopyFontFallbacks逻辑比较清晰，总结下来是：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）先从Font实例中获取Fallback缓存，如果已经构建过则直接使用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）缓存获取失败，走动态构建，将对应CSSFamily的Fallback列表和common的Fallback列表合并成最终Fallback结果&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3）缓存Fallback结果到Font实例，key是&lt;code class=&quot;highlighter-rouge&quot;&gt;cssfamily + languages&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;54-语言处理与线程安全&quot;&gt;5.4 语言处理与线程安全&lt;/h2&gt;

&lt;p&gt;CopyFontFallbacksForLanguages在调用CopyFontFallbacks之前，会对用户指定的语言（即&lt;code class=&quot;highlighter-rouge&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;languagePrefList&lt;/code&gt;参数）进行处理：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;__int64 __usercall TFontFallbacks::CopyFontFallbacksForLanguages@&amp;lt;X0&amp;gt;(__int64 a1@&amp;lt;X0&amp;gt;, __int64 a2@&amp;lt;X1&amp;gt;, __int64 a3@&amp;lt;X2&amp;gt;, __int64 a4@&amp;lt;X8&amp;gt;)
{
  // 如果没有提供语言数组，直接调用单语言版本
  if ( !a3 )
    return TFontFallbacks::CopyFontFallbacks((_QWORD *)a4, a1, (__CFString *)a2, 0LL, 0LL);
	...
  // 获取系统有序语言数组
  v7 = GetOrderedLanguages;
  // 遍历输入的语言代码数组
  do
  {
    // 检查规范化后的语言代码是否在系统支持的语言列表中
    __asm { LDAPR           X3, [X22], [X22] }
    if ( (unsigned int)CFArrayContainsValue(v7, 0LL, v8, _X3) )
    {
      // 如果支持，添加到有效语言数组中
      CFArrayAppendValue(v6, v21);

    }
    ++v12;
  }
  while ( v11 != v12 );
  ...
  // 如果找到了有效的语言代码
  if ( CFArrayGetCount(v6) )
  {
      TFontFallbacks::CopyFontFallbacks(v24, v25, _X2, v4, v6);
  }
  else
  {
    // 如果没有找到有效语言，使用单语言版本
    TFontFallbacks::CopyFontFallbacks(v24, v25, v4, 0LL, 0LL);
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大致逻辑是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;languagePrefList&lt;/code&gt;传nil（注意空数组不算nil），则直接用cssfamily查询CopyFontFallbacks&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;languagePrefList&lt;/code&gt;不为nil，会将用户指定的languages通过GetOrderedLanguages过滤一遍，去除系统不支持的language，然后使用cssfamily + languages查询CopyFontFallbacks&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外，&lt;code class=&quot;highlighter-rouge&quot;&gt;CopyFontFallbacks&lt;/code&gt;会有对字典的读写操作，为了线程安全，CopyDefaultSubstitutionListForLanguages会对整个流程加一把大锁：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;__int64 __usercall TDescriptorSource::CopyDefaultSubstitutionListForLanguages@&amp;lt;X0&amp;gt;(__int64 a1@&amp;lt;X0&amp;gt;, __int64 a2@&amp;lt;X1&amp;gt;, __int64 a3@&amp;lt;X8&amp;gt;)
{
  TDescriptorSource *v6; // 锁对象指针
  // 这个锁确保字体回退缓存的线程安全访问
  v6 = (TDescriptorSource *)os_unfair_lock_lock_with_options(&amp;amp;TDescriptorSource::sFontFallbacksLock, 327680LL);
  ...
  TFontFallbacks::CopyFontFallbacksForLanguages(TDescriptorSource::sFontFallbacksCache, v4, v3, v5);
  // 释放字体回退缓存锁并返回
  return os_unfair_lock_unlock(&amp;amp;TDescriptorSource::sFontFallbacksLock);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;55-结果处理与返回&quot;&gt;5.5 结果处理与返回&lt;/h2&gt;

&lt;p&gt;最后&lt;code class=&quot;highlighter-rouge&quot;&gt;CreateSystemDefaultFallbacks&lt;/code&gt;会对&lt;code class=&quot;highlighter-rouge&quot;&gt;CopyDefaultSubstitutionListForLanguages&lt;/code&gt;中获取到的字体描述符进行处理，即排除用户指定字体，防止自己Fallback自己。&lt;/p&gt;

&lt;h1 id=&quot;六总结&quot;&gt;六、总结&lt;/h1&gt;

&lt;p&gt;至此，我们通过逆向的手段梳理完了&lt;code class=&quot;highlighter-rouge&quot;&gt;CTFontCopyDefaultCascadeListForLanguages&lt;/code&gt;的完整流程，最后整理下结论如下：&lt;/p&gt;

&lt;p&gt;整体分为两个大流程：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、Preset Fallbacks：预设Fallback&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.1 系统从全局常量CTPresetFallbacks中读取预设列表&lt;/p&gt;

&lt;p&gt;1.2 根据用户指定主字体名从全局预设列表中查询Fallback数组&lt;/p&gt;

&lt;p&gt;1.3 遍历Fallback数组，如果为字典类型，根据用户指定语言、App偏好语言、系统设置偏好语言来选择Fallback字体&lt;/p&gt;

&lt;p&gt;1.4 遍历Fallback数组，如果为字符串类型，「直接」作为Fallback字体&lt;/p&gt;

&lt;p&gt;1.5 Fallback数组遍历完后，对应字体的级联列表构建完成&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、System Default Fallbacks：系统默认Fallback&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.1 获取主字体的CSSFamily分类&lt;/p&gt;

&lt;p&gt;1.2 从全局常量kDefaultFontFallbacks中读取默认Fallback列表&lt;/p&gt;

&lt;p&gt;1.3 用&lt;code class=&quot;highlighter-rouge&quot;&gt;cssfamily + languages&lt;/code&gt;从字体实例中获取Fallback缓存，如果已经构建则直接使用&lt;/p&gt;

&lt;p&gt;1.4 缓存缺失则动态构建，根据CSSFamily获取对应字体的Fallback列表并解析，获取common类型的Fallback列表并解析，合并二者结果作为最终Fallback结果&lt;/p&gt;

&lt;p&gt;1.5 用&lt;code class=&quot;highlighter-rouge&quot;&gt;cssfamily + languages&lt;/code&gt;将Fallback结果缓存到Font实例&lt;/p&gt;

&lt;p&gt;1.6 处理并返回Fallback结果&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Oct 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/10/03/CoreText-Font-Fallback/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/10/03/CoreText-Font-Fallback/</guid>
        
        <category>跨端渲染</category>
        
        <category>Font</category>
        
        
      </item>
    
      <item>
        <title>从0到1自定义文字排版引擎：原理篇</title>
        <description>&lt;h1 id=&quot;引言&quot;&gt;引言&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;前面我们讲解了&lt;a href=&quot;https://mp.weixin.qq.com/s/EYPO3sSjtIstD3RmlRCs9w&quot;&gt;字符与编码&lt;/a&gt;，知道了Character与Unicode的关系和区别，也介绍了&lt;a href=&quot;https://mp.weixin.qq.com/s/96YJGYKLoxENC4qT9tYNoQ&quot;&gt;字符（Character）、字形（Glyph）、字体的区别&lt;/a&gt;，并通过实际解析一个Font文件，真正了解到了&lt;a href=&quot;https://mp.weixin.qq.com/s/D0A8HAQaQNart7KAdWXyJg&quot;&gt;Font文件中有什么&lt;/a&gt;；如果你对这些概念还熟悉，推荐先阅读前面几篇文章打好基础。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;作为程序员，日常和文本打交道肯定最多，不知道你是否深入想过这样一个问题：&lt;/p&gt;

&lt;p&gt;一段中英日等多国混排的文字，系统（排版引擎）是如何知道怎么排布每个文字的，特别是不同国家的语言排版规则不同，比如中文、英文是从左向右排列，阿拉伯文是从右向左排列的；阿拉伯文会有连字（ligature），中文没有连字；更细节的，为了增强文本的可读性和美观性，系统一般还会将文字紧凑处理（kerning）、连字处理（ligature）等，排版引擎在其中到底做了哪些事情，每一步的基本原理又是怎么样的，本文将带你逐步揭开排版引擎的神秘面纱。&lt;/p&gt;

&lt;p&gt;通过本文，或许你也能自定义一个文字排版引擎了。&lt;/p&gt;

&lt;h1 id=&quot;一文本预处理unicode归一化&quot;&gt;一、文本预处理/Unicode归一化&lt;/h1&gt;

&lt;p&gt;在&lt;a href=&quot;https://mp.weixin.qq.com/s/EYPO3sSjtIstD3RmlRCs9w&quot;&gt;字符与编码&lt;/a&gt;一文中，我们知道同一个字符可能对应多个code point，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;👨‍👩‍👧&lt;/code&gt;对应&lt;code class=&quot;highlighter-rouge&quot;&gt;U+1F468 + U+200D + U+1F469 + U+200D + U+1F467&lt;/code&gt; ；甚至Unicode为了兼容历史编码，也允许一个字符有多种表示方法，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;可以表示为：单一code point（U+00E9），组合code point（&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0065 + U+0301&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;预处理就是保证字符串在进行排版/字形选择（shaping）之前是稳定、唯一、可预测的，避免因为 Unicode 的多种表示方法导致排版不一致，比如避免&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;被分开成&lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;́&lt;/code&gt;排版渲染。&lt;/p&gt;

&lt;p&gt;预处理一般步骤是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;编码转换&lt;/strong&gt;：将字符统一成UTF-32编码&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;规范化（Normalization）&lt;/strong&gt;：NFC/NFD/NFKC/NFKD等，Web 标准和绝大多数现代系统都默认使用NFC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Q：NFC/NFD/NFKC/NFKD是什么&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这些是Unicode标准里定义的几种规范化形式，区别是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/文字排版引擎/归一化标准.png&quot; alt=&quot;归一化标准&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;二分段&quot;&gt;二、分段&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;为什么要分段：不同国家、语言的排版规则不同，比如阿拉伯文有连字、中文没有，阿拉伯文从右到左排，中文从左往右排，分段之后方便后续的字体选择和shaping，比如HarfBuzz 这样的 shaping 引擎一次只能处理一个 Script run&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;分段就是把字符串按 Unicode Script (Latin, Han, Hiragana, Katakana 等) 划分成 run（分组）。&lt;/p&gt;

&lt;p&gt;原理比较简单，Unicode 为每个 code point 定义了一个 Script 属性，遍历字符串，按 Script 属性连续分段即可。&lt;/p&gt;

&lt;p&gt;比如对于&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello世界あい&lt;/code&gt;，从左往右扫描字符串，每遇到 Script 改变，就切分出一个 run，最后会被划分成：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt;” → Latin&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;世界&lt;/code&gt; → Han&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;あい&lt;/code&gt; → Hiragana&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;特殊情况：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有些字符的 Script = Common（标点、数字、空格）或 Inherited（音调符号、声调标记），这些字符分段时需要特殊处理，规则一般是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果是 Common → 继承相邻 run 的 Script（如果左右run都有Script，一般跟随左边；如果左边没有run，比如开头就是空格，那就跟随右边；如果左右都没有run，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;!!!&lt;/code&gt;，那整体就是一个Common run）。&lt;/li&gt;
  &lt;li&gt;如果是 Inherited → 附着到前一个 base 字符的 Script。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;世界!&lt;/code&gt; → “世界” (Han) + “!” (也归 Han run)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt; (e + 重音符) → 整体算 Latin&lt;/p&gt;

&lt;h1 id=&quot;三双向文本处理bidi&quot;&gt;三、双向文本处理（BiDi）&lt;/h1&gt;

&lt;p&gt;BiDi就是将字符从&lt;strong&gt;逻辑顺序&lt;/strong&gt;处理成&lt;strong&gt;视觉顺序&lt;/strong&gt;，计算机里字符串总是按逻辑顺序存储（用户输入顺序），但在渲染时，不同语言有不同的书写方向，比如中文、英文从左往右排列，阿拉伯文、希伯来文从右往左排列，如果一段文本中既有中文、英文，又有阿拉伯文、希伯来文，那还得处理混排时的顺序，BiDi就是处理混排情况下文本的实际显示顺序的。&lt;/p&gt;

&lt;p&gt;在后续的例子中，为了方便演示，我们假设以小写字母作为LTR，以大写字母作为RTL，比如：&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;abc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ABC&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：表示&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;LTR&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（从左往右排）书写方向&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;ABC&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：表示&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;RTL&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（从右往左排）书写方向&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unicode有一套完整的BiDi算法（细节可&lt;a href=&quot;https://www.unicode.org/reports/tr9/&quot;&gt;参考链接&lt;/a&gt;），在介绍原理之前需要先了解几个基本概念：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）字符类型（Character Types）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unicode给每个code point定义了一个Bidi_Class的属性（Unicode的方向属性）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt; = Left-to-Right（中文、英文…）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; = Right-to-Left（希伯来文）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AL&lt;/code&gt; = Arabic Letter（阿拉伯文）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EN&lt;/code&gt; = European Number（欧洲数字）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AN&lt;/code&gt; = Arabic Number（阿拉伯数字）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ON&lt;/code&gt; = Other Neutral（标点符号）&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些方向属性会有一个隐含的分类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;强类型&lt;/strong&gt;：这类字符具有明确的方向性，如英文字母是从左往右（LTR），阿拉伯文是从右往左（RLT）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;弱类型&lt;/strong&gt;：这类字符方向性不明确，比如数字和一些符号（如出现在数字之间的符号&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;、 &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;等），比如阿拉伯数字&lt;code class=&quot;highlighter-rouge&quot;&gt;123&lt;/code&gt;，&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;中性类型&lt;/strong&gt;：这类字符完全没有方向性，如空格、标点符号（&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;、 &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;、 &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;等），它们的方向完全由周围的强类型字符决定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/文字排版引擎/BiDi_Class.png&quot; alt=&quot;BiDi_Class&quot; /&gt;&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 如下为计算机中存储的逻辑顺序&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;abc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ABC&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;WS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2）段落基本方向（Base Direction）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在没有明确指定段落方向时，会采用默认规则来确定段落基本方向，即选择段落中&lt;strong&gt;第一个强类型字符&lt;/strong&gt;的方向作为段落基本方向，段落开头的弱/中性字符会被忽略，直到遇到第一个强类型字符；如果整段都没有强类型字符，则默认LTR。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 如下为计算机中存储的逻辑顺序&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// case-1&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;abc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ABC&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;WS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;段落方向为&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;LTR&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;case-2&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;123abc&quot;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;EN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;EN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;EN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;段落方向为&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;LTR&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;case-3&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;123&quot;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;EN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;EN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;EN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;段落方向为默认&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;LTR&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;段落基本方向主要有三个作用：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;确定初始的嵌套等级（见下），如果基本方向为LTR，则嵌套等级从0开始；如果基本方向为RTL，则嵌套等级从1开始&lt;/li&gt;
  &lt;li&gt;决定中性字符的方向，如果中性字符左右都没有强类型字符，那就会跟随段落方向，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello !&lt;/code&gt;中&lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;会跟随段落方向LTR&lt;/li&gt;
  &lt;li&gt;决定段落中文档流方向，如果基本方向为LTR，文本将从容器左侧开始向右排；如果基本方向为RTL，文本将从容器右侧开始向左排&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3）嵌套等级（Embedding Levels）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;BiDi算法中用偶数等级（0, 2, 4…）代表LTR方向，奇数等级（1, 3, 5…）代表RTL方向；如前所述，段落基本方向决定了初始的嵌套等级（0级为LTR，1级为RTL），当文本中出现方向变化时，算法会相应地提升嵌套等级。&lt;/p&gt;

&lt;p&gt;从段落初始等级开始，当遇到方向变化时，就提升一个等级；对于强类型字符等级比较容易确定，对于弱类型与中性类型字符则需要结合上下文来共同确定。&lt;/p&gt;

&lt;p&gt;对于弱类型字符：比如AN/EN数字及其之间的标点符号，这些字符即使在 RTL 文本中也通常按 LTR 书写。&lt;/p&gt;

&lt;p&gt;对于中性字符：假设中性字符&lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;左右字符（逻辑顺序）分别为&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;如果b、d都为强类型字符，且&lt;code class=&quot;highlighter-rouge&quot;&gt;direction(b) = direction(d) = D&lt;/code&gt;，则&lt;code class=&quot;highlighter-rouge&quot;&gt;direction(c) = D&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;如果b是强类型字符，且&lt;code class=&quot;highlighter-rouge&quot;&gt;direction(b) = RTL&lt;/code&gt;，且d是AN或EN，则&lt;code class=&quot;highlighter-rouge&quot;&gt;direction(c) = RTL&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;如果b是AN或EN，且d是强类型字符，且&lt;code class=&quot;highlighter-rouge&quot;&gt;direction(d) = RTL&lt;/code&gt;，则&lt;code class=&quot;highlighter-rouge&quot;&gt;direction(c) = RTL&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;如果b是AN或EN，且d是AN或EN，则&lt;code class=&quot;highlighter-rouge&quot;&gt;direction(c) = RTL&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;否则&lt;code class=&quot;highlighter-rouge&quot;&gt;direction(c) = direction(EL(c))&lt;/code&gt;（即其嵌套级别的方向，如果没有控制符明确限制则为段落基本方向）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 段落基本方向是LTR，初始等级0&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;逻辑顺序：&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;means&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;CAR&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;嵌套等级：&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;00000000001110&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;解释：&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;CAR&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;为&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;RTL&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，方向变化所以从&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;提升到&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;；中性字符&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;在段落首尾时遵循&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;段落基本方向是&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;RTL&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，初始等级&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;逻辑顺序：&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;CAR&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;means&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;嵌套等级：&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;11112222222221&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;解释：第一个空格左右分别时&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;RTL&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;和&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;LTR&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，会遵循段落方向；第二个空格左右都是&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;LTR&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，被提升为&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;LTR&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Q：为什么需要2、3、4等更高等级的嵌套呢？&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unicode中有一些嵌套控制符，可以显示提升嵌套等级，比如LRE（U+202A），RLE（U+202B）等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/文字排版引擎/嵌套控制符.png&quot; alt=&quot;嵌套控制符&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BiDi算法会从最高嵌套等级逐级反转字符，如果没有多级嵌套，遇到复杂结构时（比如 RTL 内嵌 LTR，再内嵌数字），就无法只反转某一层而保持其他层次稳定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;理解上面概念后，我们来简述BiDi算法的基本过程：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）分段并确定段落基本方向&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;BiDi算法是针对段落生效的，拿到一篇文档后，需要先将文档拆分成段落，并为段落确定基本方向。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）为每个字符分配嵌套等级&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3）在奇数层做镜像字符替换&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在奇数级别（即 RTL 层级）中，对称字符（如括号、尖括号、引号等）要“镜像”替换。&lt;/p&gt;

&lt;p&gt;例如在 RTL 层中，一个 “(” 应该显示为 “)”，一个 “)” 应该显示为 “(”。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4）阿拉伯连字处理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;用一个新字符替换相邻的阿拉伯字符，并确定每个阿拉伯字符的位置和形状。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5）按嵌入级别反转子串以生成视觉顺序&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对每行（line）分别处理（因为段落可能跨多行），假设最高嵌套等级为&lt;code class=&quot;highlighter-rouge&quot;&gt;EL_h&lt;/code&gt;，&lt;strong&gt;最低奇数级别&lt;/strong&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;EL_l&lt;/code&gt;，从EL_h递减到EL_l，在每一级别就地反转子串&lt;/p&gt;

&lt;p&gt;递归处理完后，由高层级到低层级反转嵌套子串，就能得到最终每行的视觉顺序。&lt;/p&gt;

&lt;p&gt;详细逻辑可以参考：https://cs.uwaterloo.ca/~dberry/ATEP/Slides/UnicodeBiDiAlgorithm.pdf&lt;/p&gt;

&lt;p&gt;下面以几个例子说明：&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// case-1&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;逻辑顺序：&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;means&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CAR&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.
段落等级：&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（第一个强字符为&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LTR&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，所以段落等级为&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）
嵌套等级：&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;00000000001110&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
反转&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;means&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RAC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;case-2&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;逻辑顺序：&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MEANS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;段落等级：&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RLT&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;开启一个新的嵌套等级，嵌套等级提升到&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，段落等级为&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;；&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PDF&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;为表示嵌套终止）&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;嵌套等级：&lt;/span&gt;     &lt;span class=&quot;m&quot;&gt;22211111111111&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;反转&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rac&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MEANS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;反转&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RAC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SNAEM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;case-3&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;逻辑顺序：&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;he&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;said&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[RLE]car MEANS CAR[PDF].&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;段落等级：&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;嵌套等级：&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;000000000&lt;/span&gt;     &lt;span class=&quot;m&quot;&gt;2221111111111&lt;/span&gt;     &lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;反转&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;he&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;said&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rac MEANS CAR.&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;反转&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;he&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;said&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;RAC SNAEM car.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;四字体匹配与fallback&quot;&gt;四、字体匹配与Fallback&lt;/h1&gt;

&lt;p&gt;字体匹配与Fallback是一个复杂的过程，我们后续的塑形与测量都依赖字体文件。&lt;/p&gt;

&lt;p&gt;由于任何一个字体都不可能覆盖 Unicode 的所有字符，比如：Times New Roman 渲染拉丁字母没问题，但遇到中文 “你” 就会变成“豆腐块”（小方块：是操作系统在没找到合适字体来显示字符时，会兜底到占位符，比如☐或�等）；所以排版系统实际要做的就是：确保每个字符都有合适的字体来渲染，同时尽量保持风格一致。&lt;/p&gt;

&lt;p&gt;每个字符都有对应的code point，在&lt;a href=&quot;https://mp.weixin.qq.com/s/D0A8HAQaQNart7KAdWXyJg&quot;&gt;Font文件中有什么&lt;/a&gt;一文中，我们知道了字体文件中有各种各样的表，其中cmap表存储了code point与glyphID的映射，通过cmap表我们可以精确的查到该Font是否支持某个code point，但是仅通过cmap查询是不够的，主要有两个原因：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;操作系统一般安装了成百上千种字体，如果对每个code point都去遍历所有Font的cmap表，那开销会非常大&lt;/li&gt;
  &lt;li&gt;不同Font支持的Unicode范围是有交集的，一个code point可能匹配出多个Font，为了渲染风格的统一，我们期望相同Script的字符尽量用同一种Font&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Q：相同Script的字符如果使用了不同的Font，会有什么问题&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unicode 为了节省码点空间，将许多中、日、韩来源相同但字形有细微差异的汉字合并到了同一个码点上，也就是所谓的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%B8%AD%E6%97%A5%E9%9F%93%E7%B5%B1%E4%B8%80%E8%A1%A8%E6%84%8F%E6%96%87%E5%AD%97&quot;&gt;中日韩统一表意文字&lt;/a&gt;（CJK Unified Ideographs）；如下，同一个code point在不同语言下样式不同，如果不处理Script，那可能会在一个日文段落里显示出中文的“房”字形，这在专业排版上是不可接受的。另外，不同的Font格设计风格（字宽、基线、形态）也不同，如果一个段落里穿插不同的Font，那最终排版看起来也会很奇怪。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/文字排版引擎/CJK Unifined.png&quot; alt=&quot;CJK Unifined&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现代操作系统做字体匹配与Fallback的方式一般是：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）通过前面的分段，将一段字符串按Script分成不同的run&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）检查用户指定的主字体是否支持&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;检查用户指定字体（主字体）的cmap是否支持对应字符（code point），如果支持则命中主字体，如果不支持则进入Fallback流程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3）Fallback时按OS_2表中的ulUnicodeRange掩码初步筛选支持的Unicode范围&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;注意OS_2表只是一个大概范围，并不代表完全支持该范围的Unicode，如果要精确查询是否支持还是要查cmap表。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4）通过&lt;code class=&quot;highlighter-rouge&quot;&gt;GSUB&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;GPOS&lt;/code&gt; 表精确查找支持哪些Script&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GSUB&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;GPOS&lt;/code&gt;中定义了&lt;code class=&quot;highlighter-rouge&quot;&gt;ScriptList&lt;/code&gt;，明确声明字体为哪些Script提供了shaping规则；排版引擎通过&lt;code class=&quot;highlighter-rouge&quot;&gt;GSUB&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;GPOS&lt;/code&gt;表来处理复杂的排版规则，比如字形替换、连字、上下标对齐等，排版引擎会优先选择明确支持对应Script的Font。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5）通过cmap表验证支持的code point&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果匹配出多个Fallback字体，那系统可能会根据用户设置的主字体风格，系统语言、字体优先级等来选择最优的字体。&lt;/p&gt;

&lt;p&gt;当然，操作系统中一般会对Script的Fallback字体表有缓存，上面的3、4步骤一般不用每次都做，Fallback表类似于：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hans&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Microsoft YaHei&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SimSun&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Source Han Sans SC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hant&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Microsoft JhengHei&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Source Han Sans TC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;latn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Arial&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Times New Roman&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Verdana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Microsoft YaHei&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Meiryo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Yu Gothic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Source Han Sans JP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;families&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Arial&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;regular&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arial.ttf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bold&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arialbd.ttf&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们后续也会逆向探究下CoreText中的字体级联（Fallback）机制，更细节的这里不再展开。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Q：像&lt;code class=&quot;highlighter-rouge&quot;&gt;👨‍👩‍👧&lt;/code&gt;这种由多个code point组成的字符，是怎么匹配Font的&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;像&lt;code class=&quot;highlighter-rouge&quot;&gt;👨‍👩‍👧&lt;/code&gt;这种由多个code point组成的字符（如下），一般称之为Grapheme Cluster（字素簇）：&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;👨&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;1F468&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;MAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;200D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ZWJ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Zero&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Width&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;👩&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;1F469&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;WOMAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;200D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ZWJ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Zero&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Width&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;👧&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;1F467&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;GIRL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unicode Emoji 标准里规定了哪些序列可以组合成单个 emoji（如 👨‍👩‍👧、👩‍❤️‍👩 等），排版引擎会根据Emoji data（来自Unicode数据表）来判断这是不是一个合法的ZWJ Sequence，识别成功会将其视为一个不可分割的单元，在匹配字体时会做如下处理：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）用组合序列的第一个非ZWJ code point 去查找字体&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ZWJ：Zero Width Joiner，零宽度连接符，它的作用就像“胶水”，告诉排版引擎两侧字符不可分割。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于&lt;code class=&quot;highlighter-rouge&quot;&gt;👨‍👩‍👧&lt;/code&gt;来说，就是用 &lt;code class=&quot;highlighter-rouge&quot;&gt;U+1F468&lt;/code&gt; (👨)，去查找字体，查找和Fallback过程同上。一般而言会匹配到系统内置的彩色表情符号字体：macOS/iOS上一般是&lt;code class=&quot;highlighter-rouge&quot;&gt;Apple Color Emoji&lt;/code&gt;，Windows上是&lt;code class=&quot;highlighter-rouge&quot;&gt;Segoe UI Emoji&lt;/code&gt;，Android上一般是&lt;code class=&quot;highlighter-rouge&quot;&gt;Noto Color Emoji&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）用匹配的字体进行字形替换&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这一步其实发生在下面的塑性阶段，在查到的字体表中通过 GSUB表把多个 code point 映射成一个彩色的glyph，也就是字形替换。&lt;/p&gt;

&lt;p&gt;如果这一步没找到合法的可替换字形，那就Fallback到单独显示&lt;code class=&quot;highlighter-rouge&quot;&gt;👨 👩 👧&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;五字形选择与shaping&quot;&gt;五、字形选择与Shaping&lt;/h1&gt;

&lt;p&gt;这一步的目标是将抽象的字符转换成具体的glyphIDs和布局信息，以供下一步排版使用；输入是一段单一 Script、单一字体的文本 run和上面匹配出的字体，输出是一个字形序列，包括glyphIDs、x_advance、y_advance、x_offset、y_offset等。&lt;/p&gt;

&lt;p&gt;大致分为两步：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）code point映射到glyphID&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;每个code point会通过字体的cmap表映射成一个glyphID。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）文本塑形：应用GSUB、GPOS规则&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Shaping引擎会读取字体文件中的GSUB表，进行字形替换，比如连字，emoji替换等；读取GPOS表，调整字形的位置，比如上下标位置、字间距（kerning）、阿拉伯文的连写等。&lt;/p&gt;

&lt;h1 id=&quot;六测量与排版&quot;&gt;六、测量与排版&lt;/h1&gt;

&lt;p&gt;这一步的目标是将字形序列按自定义布局规则排版到二维坐标系下，简单讲就是确定每个glyph的位置、大小信息，以供下一步绘制使用。&lt;/p&gt;

&lt;p&gt;大致分为两步：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）获取字形的metrics&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;从字体文件的hhea/OS_2表中读取出每个glyph的ascent、descent等信息，用于确定baseline、lineHeight等信息。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）自定义布局确定每个glyph位置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;从上面得到的baseline、lineHeight等信息，以及第六步得到的advance宽度（glyph前进量）等，可以计算出每个glyph的宽高、对齐基线，这样我们就能像前端一样自定义文档流布局（Inline、Inline-Block、Block）来精确的排版每个glyph的位置。&lt;/p&gt;

&lt;h1 id=&quot;七渲染上屏&quot;&gt;七、渲染上屏&lt;/h1&gt;

&lt;p&gt;经过上面的塑形、排版过程，我们已经能得到按显示顺序排列且带有精确位置的glyph序列，绘制阶段就是将这些抽象的glyph序列上屏显示出来。&lt;/p&gt;

&lt;p&gt;这一步一般有软光栅、硬光栅等多种选型，在macOS/iOS上，可以通过CoreText来绘制字形序列，比如：&lt;a href=&quot;https://developer.apple.com/documentation/coretext/ctfontdrawglyphs(_:_:_:_:_:)&quot;&gt;CTFontDrawGlyphs&lt;/a&gt;；本文主要讲解排版引擎流程，渲染部分不再展开，后续有时间再单独开篇研究。&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;至此，我们自定义文字排版引擎的原理篇告一段落；相信通过以上讲解，我们对文字排版的流程有了一个大致了解，下一步我们将结合ICU、HarfBuzz等来实战实现一个小型的自定义文字排版引擎。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;更多精彩内容，欢迎关注🌍公众号：非专业程序员Ping&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 01 Oct 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/10/01/%E6%96%87%E5%AD%97%E6%8E%92%E7%89%88%E5%BC%95%E6%93%8E/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/10/01/%E6%96%87%E5%AD%97%E6%8E%92%E7%89%88%E5%BC%95%E6%93%8E/</guid>
        
        <category>跨端渲染</category>
        
        <category>Font</category>
        
        
      </item>
    
      <item>
        <title>一文读懂Font文件</title>
        <description>&lt;h1 id=&quot;一引言&quot;&gt;一、引言&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;在开始阅读本文之前，推荐先阅读&lt;a href=&quot;https://mp.weixin.qq.com/s/96YJGYKLoxENC4qT9tYNoQ&quot;&gt;字符（Character）、字形（Glyph）、字体的区别&lt;/a&gt;理解基本概念。&lt;/p&gt;

  &lt;p&gt;如果你对字符与Unicode的相关概念还不理解，推荐阅读&lt;a href=&quot;https://mp.weixin.qq.com/s/EYPO3sSjtIstD3RmlRCs9w&quot;&gt;字符与编码&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;前文，我们介绍了&lt;a href=&quot;https://mp.weixin.qq.com/s/96YJGYKLoxENC4qT9tYNoQ&quot;&gt;字符（Character）、字形（Glyph）、字体的区别&lt;/a&gt;，这里我们再来实际分析一个字体文件中到底有什么，这有利于我们后续理解文字排版引擎的工作原理和流程。&lt;/p&gt;

&lt;p&gt;macOS上系统字体路径一般为&lt;code class=&quot;highlighter-rouge&quot;&gt;/System/Library/Fonts/&lt;/code&gt;，可以看到有文件后缀有&lt;code class=&quot;highlighter-rouge&quot;&gt;ttc&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ttf&lt;/code&gt;，二者有什么区别呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）&lt;code class=&quot;highlighter-rouge&quot;&gt;.ttf&lt;/code&gt; (TrueType Font)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ttf&lt;/code&gt;表示这是一个单字体文件，每个 &lt;code class=&quot;highlighter-rouge&quot;&gt;.ttf&lt;/code&gt; 文件通常只对应一个字体样式（例如 &lt;em&gt;Microsoft YaHei Regular&lt;/em&gt;）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）&lt;code class=&quot;highlighter-rouge&quot;&gt;.ttc&lt;/code&gt; (TrueType Collection)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ttc&lt;/code&gt;表示这是一个字体集合文件，内部可以包含多个 TrueType 字体（多个 &lt;code class=&quot;highlighter-rouge&quot;&gt;.ttf&lt;/code&gt; 打包在一起），这些字体通常共享某些表（比如 glyph 轮廓、cmap），减少冗余，提高存储效率，常用于一个 Typeface 的多个变体（Regular, Bold, Italic, Light…）&lt;/p&gt;

&lt;p&gt;上面提到了TrueType，与之对应的还有OpenType，二者其实都是字体类型标准，简单理解就是OpenType是TrueType的扩展，OpenType支持更多的特性，比如：连字、RTL、上下标等。&lt;/p&gt;

&lt;p&gt;OpenType一般以&lt;code class=&quot;highlighter-rouge&quot;&gt;otf&lt;/code&gt;为后缀，但也不能简单的根据文件名后缀区分二者，文件扩展名只是习惯，并不能完全说明内部格式，真正的区别还是要看字体表结构，比如OpenType有GSUB、GPOS、GDEF等扩展表。&lt;/p&gt;

&lt;p&gt;下面，我们来真正解析一个字体文件，看里面有什么，可以通过如下命令行将字体解析成XML。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 对于ttf文件&lt;/span&gt;
ttx NewYork.ttf
&lt;span class=&quot;c&quot;&gt;# ttc文件是个字体集合，需要明确指明要提取哪个index的字体&lt;/span&gt;
ttx &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; 0 Times.ttc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;二font文件解析&quot;&gt;二、Font文件解析&lt;/h1&gt;

&lt;p&gt;我们以NewYork.ttf文件为例，如下是NewYork.ttf中的表&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/一文读懂Font文件/NewYork-ttf.png&quot; alt=&quot;NewYork-ttf&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;21-glyphorder&quot;&gt;2.1 GlyphOrder&lt;/h2&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;GlyphOrder&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;GlyphID&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.notdef&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;GlyphID&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.null&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;GlyphID&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nonmarkingreturn&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;GlyphID&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;space&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;GlyphID&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/GlyphOrder&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;GlyphOrder定义glyphID与glyphName的映射。&lt;/p&gt;

&lt;h2 id=&quot;22-head&quot;&gt;2.2 head&lt;/h2&gt;

&lt;p&gt;Font Header，存储一些全局信息；关注几个值：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;unitsPerEm&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2048&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;1）unitsPerEm&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;字体表里的数值一般都很大（见后文），其单位并不是像素值，而是 &lt;code class=&quot;highlighter-rouge&quot;&gt;em unit&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;unitsPerEm value=&quot;2048&quot;/&amp;gt;&lt;/code&gt;表示&lt;code class=&quot;highlighter-rouge&quot;&gt;2048 units = 1 em = 设计的字高&lt;/code&gt;，比如当字体在屏幕上以 16px 渲染时，1 em = 16px，其他数值可按比例换算&lt;/p&gt;

&lt;h2 id=&quot;23-hhea&quot;&gt;2.3 hhea&lt;/h2&gt;

&lt;p&gt;Horizontal Typesetting Header，横向排版信息，关注几个值&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;hhea&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- MacOS一般使用hhea里的ascent、descent；OS_2表里还有几个ascent、descent，一般在Windows或专业设计上使用 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ascent&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1950&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;descent&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-494&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;lineGap&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;advanceWidthMax&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2818&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;minLeftSideBearing&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-693&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;minRightSideBearing&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-693&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/hhea&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;1）ascent &amp;amp; descent&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;假设字体大小16，unitsPerEm如上为2048，则按比例换算：&lt;code class=&quot;highlighter-rouge&quot;&gt;ascent = 1950/2048 * 16 ≈ 15.2&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;descent ≈ 494/2048 * 16 ≈ 3.8&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;需要注意，OS_2表中也有ascent、descent的定义，这是因为不同平台会读取不同表中的ascent、descent，比如macOS、iOS一般使用hhea中的值，Windows一般使用OS_2表中的usWinAscent、usWinDescent，专业排版软件（如InDesign）一般用OS_2表中的sTypoAscender、sTypoDescender。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q：对于同一个Font，ascent、descent的值是固定的吗？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个问题的答案需要加定语，对于同一个Font，在同一个平台上，ascent、descent是固定的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q：为什么descent值是负数？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;可以理解成规范，TrueType/OpenType的规范里，descent是负数，表示基线（baseline）以下延伸的高度。&lt;/p&gt;

&lt;h2 id=&quot;24-maxp&quot;&gt;2.4 maxp&lt;/h2&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;maxp&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;numGlyphs&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1811&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maxp&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;定义字体里 glyph 的数量，以及一些最大值参数。&lt;/p&gt;

&lt;h2 id=&quot;25-os_2&quot;&gt;2.5 OS_2&lt;/h2&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;OS_2&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 下标的大小和偏移 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ySubscriptXSize&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;650&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ySubscriptYSize&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;600&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ySubscriptXOffset&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ySubscriptYOffset&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;75&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 上标的大小和偏移 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ySuperscriptXSize&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;650&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ySuperscriptYSize&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;600&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ySuperscriptXOffset&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ySuperscriptYOffset&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;350&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 删除线的粗细和垂直位置 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;yStrikeoutSize&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;yStrikeoutPosition&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;620&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 
  ulUnicodeRange表示字体支持的Unicode范围，用ulUnicodeRange1 … ulUnicodeRange4 这 4 个 32 位字段来表示，总共 128 个 bit，对应 128 个 Unicode Block，如果某 bit = 1，表示字体支持该区块中的至少一些字符，
  映射表见：https://learn.microsoft.com/en-us/typography/opentype/spec/os2#ur
  --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ulUnicodeRange1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10100001 00000000 00000010 11111111&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ulUnicodeRange2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;00000010 00000000 00100000 01011110&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ulUnicodeRange3&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;00000000 00000000 00000000 00000000&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ulUnicodeRange4&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;00000000 00000000 00000000 00000000&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 专业排版（比如 InDesign）一般使用sTypoAscender、sTypoDescender --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sTypoAscender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1950&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sTypoDescender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-494&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sTypoLineGap&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Windows一般使用sTypoAscender、sTypoDescender --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;usWinAscent&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1950&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;usWinDescent&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;494&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/OS_2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参见&lt;a href=&quot;https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6OS2.html&quot;&gt;Apple文档&lt;/a&gt;，关注几个值：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）ySubscriptXSize &amp;amp; ySubscriptYSize &amp;amp; ySubscriptXOffset &amp;amp; ySubscriptYOffset&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下标的大小和偏移&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）ySuperscriptXSize &amp;amp; ySuperscriptYSize &amp;amp; ySuperscriptXOffset &amp;amp; ySuperscriptYOffset&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;上标的大小和偏移&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3）yStrikeoutSize &amp;amp; yStrikeoutPosition&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;删除线的粗细和垂直位置&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4）ulUnicodeRange1 &amp;amp; ulUnicodeRange2 &amp;amp; ulUnicodeRange3 &amp;amp; ulUnicodeRange4&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ulUnicodeRange表示该字体支持的Unicode范围，用ulUnicodeRange1 … ulUnicodeRange4 这 4 个 32 位字段来表示，总共 128 个 bit，对应 128 个 Unicode Block，如果某 bit = 1，表示字体支持该区块中的至少一些字符，映射表见：https://learn.microsoft.com/en-us/typography/opentype/spec/os2#ur 。&lt;/p&gt;

&lt;p&gt;Windows系统通常用 ulUnicodeRange 来看一个字体是否支持某Unicode；macOS/iOS系统一般用 cmap 表（精确的字符映射），ulUnicodeRange只作为辅助信息；浏览器排版一般直接查 cmap，但 ulUnicodeRange 有时也用于字体 fallback 策略。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5）sTypoAscender &amp;amp; sTypoDescender &amp;amp; usWinAscent &amp;amp; usWinDescent&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如前文所述，不同系统会取不同的值作为ascent、descent&lt;/p&gt;

&lt;h2 id=&quot;26-hmtx&quot;&gt;2.6 hmtx&lt;/h2&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;hmtx&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;mtx&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.notdef&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2048&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lsb=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;199&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;mtx&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.null&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lsb=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;mtx&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1244&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lsb=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-16&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/hmtx&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Horizontal Metrics，记录每个 glyph 的 advance width 和left side bearing。&lt;/p&gt;

&lt;p&gt;简单理解排版引擎绘制字形的流程是：将字形放在当前点 + lsb 偏移位置进行绘制，画完后，将光标向右移动 &lt;code class=&quot;highlighter-rouge&quot;&gt;advanceWidth&lt;/code&gt;，准备绘制下一个字形。&lt;/p&gt;

&lt;h2 id=&quot;27-cmap&quot;&gt;2.7 cmap&lt;/h2&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;cmap&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tableVersion&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;cmap_format_4&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platformID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platEncID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- A的Unicode code point是0x41 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x41&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- LATIN CAPITAL LETTER A --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x42&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- LATIN CAPITAL LETTER B --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x43&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- LATIN CAPITAL LETTER C --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x44&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- LATIN CAPITAL LETTER D --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x45&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- LATIN CAPITAL LETTER E --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x46&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;F&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- LATIN CAPITAL LETTER F --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x47&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;G&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- LATIN CAPITAL LETTER G --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x48&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;H&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- LATIN CAPITAL LETTER H --&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/cmap_format_4&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/cmap&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Character to Glyph Mapping，定义 Unicode code point → glyph ID 的映射，cmap表中能精确的查到该Font支持哪些Unicode。&lt;/p&gt;

&lt;h2 id=&quot;28-glyf&quot;&gt;2.8 glyf&lt;/h2&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;glyf&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TTGlyph&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xMin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-16&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;yMin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xMax=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1260&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;yMax=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1444&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;contour&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1086&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;213&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1113&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;137&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1161&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;50&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1219&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;9&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1260&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1260&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;793&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;793&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;845&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;7&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;897&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;54&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;899&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;143&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;874&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;213&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;528&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;528&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;220&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;292&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;184&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;186&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;170&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;66&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;224&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;11&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;290&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;290&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-16&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-16&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;27&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;9&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;89&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;59&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;151&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;181&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;193&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;297&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;614&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1444&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;648&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1444&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/contour&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;contour&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;290&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;532&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;294&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;544&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;859&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;544&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pt&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;860&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;532&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/contour&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;instructions/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/TTGlyph&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/glyf&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Glyph Data，真正的字形轮廓（矢量点、轮廓、控制点）；cmap 表负责把 Unicode 字符映射到 glyphID，而 glyf 表告诉渲染系统该 glyph 的具体形状。&lt;/p&gt;

&lt;h2 id=&quot;29-name&quot;&gt;2.9 name&lt;/h2&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;namerecord&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nameID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platformID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platEncID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;langID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x409&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    © 2017-2024 Apple Inc. All rights reserved.
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/namerecord&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;namerecord&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nameID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platformID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platEncID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;langID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x409&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    .New York
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/namerecord&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;namerecord&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nameID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platformID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platEncID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;langID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x409&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    Regular
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/namerecord&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;namerecord&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nameID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platformID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platEncID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;langID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x409&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    .New York; 20.0d1e1; 2024-05-06
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/namerecord&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;namerecord&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nameID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platformID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platEncID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;langID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x409&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    .New York
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/namerecord&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;namerecord&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nameID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platformID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platEncID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;langID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x409&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    20.0d1e1
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/namerecord&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;namerecord&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nameID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platformID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platEncID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;langID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x409&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    .NewYork-Regular
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/namerecord&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;name表中定义的是字体名称、字体家族、PostScript Name、厂商信息等。&lt;/p&gt;

&lt;p&gt;nameID对应的含义如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;nameID&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Copyright notice&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Font Family name（字体家族名，比如 &lt;em&gt;New York&lt;/em&gt;）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Font Subfamily name（字重/样式，比如 &lt;em&gt;Regular&lt;/em&gt;、&lt;em&gt;Bold&lt;/em&gt;）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Unique font identifier（唯一ID，通常包含厂商名+版本号）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Full font name（family + subfamily，比如 &lt;em&gt;New York Regular&lt;/em&gt;）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Version string&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;PostScript name（唯一的、无空格的名字）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这里需要重点介绍下PostScript Name：PostScript Name是字体在一个系统里的&lt;strong&gt;唯一标识&lt;/strong&gt;，是单个字符串，不允许有空格，一般是 FamilyName-StyleName 形式，比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;.NewYork-Regular&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Helvetica-Bold&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;NotoSansCJKsc-Regular&lt;/code&gt;等。&lt;/p&gt;

&lt;p&gt;在CoreText的API里，一般都要求传PostScript Name，比如：&lt;a href=&quot;https://developer.apple.com/documentation/coretext/ctfontcreatewithname(_:_:_:)&quot;&gt;CTFontCreateWithName&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;210-gdef&quot;&gt;2.10 GDEF&lt;/h2&gt;

&lt;p&gt;Glyph Definition Table，简单理解GDEF表就是是GPOS / GSUB的辅助表，比如GPOS和 GSUB需要知道「哪些字形是 mark、哪些能连接、哪些有变体」等信息，这些元数据就是放在GDEF 表里的。&lt;/p&gt;

&lt;h2 id=&quot;211-gpos&quot;&gt;2.11 GPOS&lt;/h2&gt;

&lt;p&gt;Glyph Positioning Table，控制字形的相对位置（如kerning、上下标等），比如「A + V」之间要减少间距，或者音标放在元音正上方等。&lt;/p&gt;

&lt;h2 id=&quot;212-gsub&quot;&gt;2.12 GSUB&lt;/h2&gt;

&lt;p&gt;Glyph Substitution Table，控制字形替换（连字、、阿拉伯文变体、直角引号换弯引号等），比如&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; → &lt;code class=&quot;highlighter-rouge&quot;&gt;ﬁ&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;'quoteleft'&lt;/code&gt; → &lt;code class=&quot;highlighter-rouge&quot;&gt;‘&lt;/code&gt;等。&lt;/p&gt;

&lt;h2 id=&quot;213-hvar--mvar--avar--fvar--gvar&quot;&gt;2.13 HVAR &amp;amp; MVAR &amp;amp; avar &amp;amp; fvar &amp;amp; gvar…&lt;/h2&gt;

&lt;p&gt;这几个表是用于转换可变字体的，可变字体不在本文范围内，不再详述。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;更多精彩内容欢迎关注🌍公众号：非专业程序员Ping&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 17 Sep 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/09/17/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82Font%E6%96%87%E4%BB%B6/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/09/17/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82Font%E6%96%87%E4%BB%B6/</guid>
        
        <category>跨端渲染</category>
        
        <category>Font</category>
        
        
      </item>
    
      <item>
        <title>Typora激活</title>
        <description>&lt;p&gt;参考了网上关于Typora的激活方式，修改&lt;code class=&quot;highlighter-rouge&quot;&gt;hasActivated=&quot;true&quot;==e.hasActivated&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;hasActivated=&quot;true&quot;==&quot;true&quot;&lt;/code&gt;，在新版本（V1.11.7）已经不生效，研究了下发现另外一种规避方式，本文记录下。&lt;/p&gt;

&lt;p&gt;MacOS上找到：&lt;code class=&quot;highlighter-rouge&quot;&gt;/Applications/Typora.app/Contents/Resources/TypeMark/page-dist/static/js/LicenseIndex.180dd4c7.54684560.chunk.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Typora/dir.png&quot; alt=&quot;dir&quot; /&gt;&lt;/p&gt;

&lt;p&gt;文本编辑器打开该文件，修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;quit:function(){window.Setting.invoke(&quot;quit&quot;)}&lt;/code&gt;中的quit为close即可，即：&lt;code class=&quot;highlighter-rouge&quot;&gt;quit:function(){window.Setting.invoke(&quot;close&quot;)}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Typora/quit.png&quot; alt=&quot;quit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;修改完后保存，再次打开Typora，点击退出就不会再退出应用程序了。&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Sep 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/09/14/Typora%E6%BF%80%E6%B4%BB/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/09/14/Typora%E6%BF%80%E6%B4%BB/</guid>
        
        <category>其他</category>
        
        
      </item>
    
      <item>
        <title>一文读懂字符、字形、字体</title>
        <description>&lt;h1 id=&quot;一引言&quot;&gt;一、引言&lt;/h1&gt;

&lt;p&gt;什么是Character？什么是Glyph？Character和Glyph是否一一对应？我们常说的Font又包含哪些东西？如果要自己实现一套文本的分词、测量和布局，又需要理清楚哪些概念？ascent、descent、lineHeight之间的关系是怎么样的？&lt;/p&gt;

&lt;p&gt;本文将尽量以简洁易懂的方式来解释以上问题，也可以提前Mark起来，作为日后的速查手册。&lt;/p&gt;

&lt;h1 id=&quot;二character&quot;&gt;二、Character&lt;/h1&gt;

&lt;p&gt;Character也叫字符，是一个抽象概念，比如字母&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;、中文&lt;code class=&quot;highlighter-rouge&quot;&gt;你&lt;/code&gt;等都可以视为一个字符，它只是一个语义单位，不关心具体长什么样。&lt;/p&gt;

&lt;h1 id=&quot;三glpyh&quot;&gt;三、Glpyh&lt;/h1&gt;

&lt;p&gt;Glpyh也叫字形，表示字符的绘制方式；一个字符可以有多种方式绘制，比如字母A，可以有不同的大小、粗细、斜体、衬线等，但都是同一个字符；这些不同的绘制方式，都叫字形。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/一文读懂字符、字形、字体/glyph_A.png&quot; alt=&quot;glyph_A&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;31-character与glyph的关系&quot;&gt;3.1 Character与Glyph的关系&lt;/h2&gt;

&lt;p&gt;字符与字形并非一一对应关系，一个字符可以由多个字形表示，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;可以是&lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;和重音符号&lt;code class=&quot;highlighter-rouge&quot;&gt;´&lt;/code&gt;的组合，在一些连字情况下，一个字形也可以代表多个字符，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/一文读懂字符、字形、字体/ligatures.png&quot; alt=&quot;ligatures&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;四font&quot;&gt;四、Font&lt;/h1&gt;

&lt;h2 id=&quot;41-typeface&quot;&gt;4.1 Typeface&lt;/h2&gt;

&lt;p&gt;指一套具有统一设计风格的Font集合，它是一种设计概念，而不是具体的文件&lt;/p&gt;

&lt;h2 id=&quot;42-font&quot;&gt;4.2 Font&lt;/h2&gt;

&lt;p&gt;Font可以理解成Typeface的某个具体实现。&lt;/p&gt;

&lt;p&gt;以Helvetica为例：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Typeface：Helvetica&lt;/li&gt;
  &lt;li&gt;Font：
    &lt;ul&gt;
      &lt;li&gt;Helvetica Regular.ttf&lt;/li&gt;
      &lt;li&gt;Helvetica Bold.ttf&lt;/li&gt;
      &lt;li&gt;Helvetica Italic.ttf&lt;/li&gt;
      &lt;li&gt;Helvetica Bold Italic.ttf&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;43-font-family&quot;&gt;4.3 Font Family&lt;/h2&gt;

&lt;p&gt;Font Family是一组属于同一个Typeface的字体（Fonts），它们共享设计风格，只是字重/宽度/样式不同。&lt;/p&gt;

&lt;p&gt;比如：Helvetica是一个Font Family，里面包含字体：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Helvetica Regular&lt;/li&gt;
  &lt;li&gt;Helvetica Bold&lt;/li&gt;
  &lt;li&gt;Helvetica Italic&lt;/li&gt;
  &lt;li&gt;Helvetica Bold Italic&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;44-font-descriptor&quot;&gt;4.4 Font Descriptor&lt;/h2&gt;

&lt;p&gt;Font Descriptor（字体描述符）是一种属性集合（Font Family、Font Weight、样式 (italic/oblique)、大小等），用来描述或查询一个字体；它不是字体文件，而是一个“过滤条件”或“配置对象”，在 CoreText 里对应 &lt;code class=&quot;highlighter-rouge&quot;&gt;CTFontDescriptor&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;Font Descriptor可以用于匹配系统中符合条件的字体，也可以用它来派生一个具体的CTFont，如：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 这里的 descriptor 只是描述条件，真正的字体对象是 font&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;descriptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontDescriptorCreateWithAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;kCTFontFamilyNameAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Microsoft YaHei&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;kCTFontWeightTrait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTFontCreateWithFontDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;45-font-collections&quot;&gt;4.5 Font Collections&lt;/h2&gt;

&lt;p&gt;Font Collections是一组字体的集合，通常用于检索和筛选，在 CoreText 里对应CTFontCollection。&lt;/p&gt;

&lt;p&gt;它可以包含系统中所有可用字体，也可以按条件过滤出子集，主要用途有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;枚举系统安装的字体&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;根据 &lt;code class=&quot;highlighter-rouge&quot;&gt;Font Descriptor&lt;/code&gt; 找到所有匹配的字体&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;做字体选择器 UI（比如 Word 里的字体下拉框）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;46-小结&quot;&gt;4.6 小结&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/一文读懂字符、字形、字体/Font.png&quot; alt=&quot;Font&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;47-glyph与font的关系&quot;&gt;4.7 Glyph与Font的关系&lt;/h2&gt;

&lt;p&gt;简单理解，Font里存储了Glyph的绘制样式，Glyph与Unicode的映射关系等。&lt;/p&gt;

&lt;p&gt;Font里有各种各样的表，存储了Unicode code point与GlyphID的映射关系，每个Glyph绘制时的advance width 和left side bearing等，后续会有单独的文章详细解析Font文件内容，这里先理解二者的概念。&lt;/p&gt;

&lt;h1 id=&quot;五文字排版的基本概念&quot;&gt;五、文字排版的基本概念&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;基本概念&lt;/th&gt;
      &lt;th&gt;解释&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics&lt;/td&gt;
      &lt;td&gt;由字体设计师提供，用于描述每个Glyph周围的间距&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;advance width&lt;/td&gt;
      &lt;td&gt;前进宽度，基线方向到下一个Glyph origin的距离，或者理解为字形绘制完后，光标应该前进多少距离&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;left-side bearing&lt;/td&gt;
      &lt;td&gt;Glyph origin与Glyph左侧的间距&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;right-side bearing&lt;/td&gt;
      &lt;td&gt;Glyph右侧与advance width终点的距离&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ascent&lt;/td&gt;
      &lt;td&gt;Glyph origin到Font中最高Glyph的顶部距离&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;descent&lt;/td&gt;
      &lt;td&gt;Glyph origin到Font中最低Glyph的底部距离&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bounding box&lt;br /&gt;bounding rectangle&lt;/td&gt;
      &lt;td&gt;包含Glyph可视区域（注意非advance width）最小rect&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;kerning&lt;/td&gt;
      &lt;td&gt;通常，Glyph一般按advance width排列，但为了提高可读性，通常会引入kerning来扩大或缩小两个glyph之间的间距，比如W和A：&lt;br /&gt;&lt;img src=&quot;/img/post/一文读懂字符、字形、字体/kerning.png&quot; alt=&quot;kerning&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;leading/linegap&lt;/td&gt;
      &lt;td&gt;line之间的添加的距离&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lineHeight&lt;/td&gt;
      &lt;td&gt;lineHeight = ascent + descent + leading&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;一图胜过千言，贴两张经典的图：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;图一&lt;/th&gt;
      &lt;th&gt;图二&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/一文读懂字符、字形、字体/glyph_1.png&quot; alt=&quot;glyph_1&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/一文读懂字符、字形、字体/glyph_2.png&quot; alt=&quot;glyph_2&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;更多精彩内容欢迎关注🌍公众号：非专业程序员Ping&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 13 Sep 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/09/13/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%E5%AD%97%E7%AC%A6-%E5%AD%97%E5%BD%A2-%E5%AD%97%E4%BD%93/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/09/13/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%E5%AD%97%E7%AC%A6-%E5%AD%97%E5%BD%A2-%E5%AD%97%E4%BD%93/</guid>
        
        <category>跨端渲染</category>
        
        <category>Font</category>
        
        
      </item>
    
      <item>
        <title>第一个Flutter应用</title>
        <description>&lt;h1 id=&quot;一环境搭建&quot;&gt;一、环境搭建&lt;/h1&gt;

&lt;p&gt;添加Flutter镜像：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PUB_HOSTED_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://pub.flutter-io.cn
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FLUTTER_STORAGE_BASE_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://storage.flutter-io.cn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下载Flutter SDK：https://docs.flutter.cn/install/archive&lt;/p&gt;

&lt;p&gt;添加Flutter SDK环境变量：&lt;code class=&quot;highlighter-rouge&quot;&gt;export PATH=&quot;$PWD/flutter/bin:$PATH&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;运行&lt;code class=&quot;highlighter-rouge&quot;&gt;flutter doctor&lt;/code&gt;验证安装是否成功：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Flutter/Flutter Doctor.png&quot; alt=&quot;Flutter Doctor&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我使用的是iOS开发环境，没装Android环境，也OK&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;二构建第一个flutter应用&quot;&gt;二、构建第一个Flutter应用&lt;/h1&gt;

&lt;p&gt;VSCode安装flutter插件，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;command + shift + p&lt;/code&gt;选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Flutter: New Project&lt;/code&gt;，之后按需选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt;（自带一个计数器的App）或者&lt;code class=&quot;highlighter-rouge&quot;&gt;Empty Application&lt;/code&gt;：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;New Project&lt;/th&gt;
      &lt;th&gt;Project Template&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/Flutter/New Project.png&quot; alt=&quot;New Project&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/img/post/Flutter/Project Template.png&quot; alt=&quot;Project Template&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;我这里选的Application，点击main.dart下的run：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Flutter/run.png&quot; alt=&quot;run&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到运行效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Flutter/FlutterDemo.png&quot; alt=&quot;FlutterDemo&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 31 Aug 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/08/31/%E7%AC%AC%E4%B8%80%E4%B8%AAFlutter%E5%BA%94%E7%94%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/08/31/%E7%AC%AC%E4%B8%80%E4%B8%AAFlutter%E5%BA%94%E7%94%A8/</guid>
        
        <category>跨端渲染</category>
        
        <category>Flutter</category>
        
        
      </item>
    
      <item>
        <title>一文读懂字符与编码</title>
        <description>&lt;h1 id=&quot;一字符character&quot;&gt;一、字符/Character&lt;/h1&gt;

&lt;p&gt;对用户可见的“一个字符”，通常是我们在屏幕上看到的一个字母、数字、emoji 或组合字符。&lt;/p&gt;

&lt;p&gt;比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;👨‍👩‍👧‍👦&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;二字符编码标准字符集&quot;&gt;二、字符编码标准/字符集&lt;/h1&gt;

&lt;p&gt;字符编码标准定义的是如何将字符映射到唯一编码，常见的字符编码标准比如&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;GBK&lt;/code&gt;等&lt;/p&gt;

&lt;h2 id=&quot;21-ascii&quot;&gt;2.1 ASCII&lt;/h2&gt;

&lt;p&gt;ASCII（7位）定义了 128 个字符的唯一编码，包括数字0到9、小写字母a到z、大写字母A到Z以及常用标点符号等。&lt;/p&gt;

&lt;h2 id=&quot;22-unicode&quot;&gt;2.2 Unicode&lt;/h2&gt;

&lt;p&gt;Unicode又叫万国码，目标是为所有字符定义唯一编码（Code Point）。为了解决ASCII/GBK不能定义全部字符的问题。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;U+0061&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;👨&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;U+1F468&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;Unicode只负责分配码位（Code Point），并不决定具体的存储形式。&lt;/p&gt;

&lt;p&gt;Unicode的前 128 个码点与ASCII相同。&lt;/p&gt;

&lt;h3 id=&quot;221-code-point&quot;&gt;2.2.1 Code Point&lt;/h3&gt;

&lt;p&gt;Code Point也叫码位，Unicode中为每个字符分配的唯一编码。&lt;/p&gt;

&lt;p&gt;一个字符可以对应一个或多个Code Point，比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0061&lt;/code&gt;，对应 1 个Code Point&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;👨‍👩‍👧‍👦&lt;/code&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;U+1F468 (👨) + U+200D (ZWJ) + U+1F469 (👩) + U+200D (ZWJ) + U+1F467 (👧) + U+200D (ZWJ) + U+1F466 (👦)&lt;/code&gt;对应 7 个Code Point&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;U+00E9&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0065 + U+0301&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;备注：&lt;/p&gt;

  &lt;p&gt;在Unicode中，&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;实际上有两种表示方式：&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;单一字符表示法&lt;/strong&gt;：即直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;U+00E9&lt;/code&gt;这个单独的Unicode码位表示&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;。&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;组合字符表示法&lt;/strong&gt;：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0065&lt;/code&gt;（字母&lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;）和&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0301&lt;/code&gt;（重音符号）两个Unicode码位来表示一个&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;字符。&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;为什么会有这两种表示法？&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;历史原因&lt;/strong&gt;：Unicode设计时考虑到了不同语言的需求，许多语言（如法语、西班牙语等）使用带有重音符号的字符，因此，Unicode同时支持这两种表示方式。&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;兼容性&lt;/strong&gt;：一些旧的系统或字体可能只支持分解字符表示法，因此，Unicode也保留了这种组合字符的方式，以提高兼容性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;222-code-unit&quot;&gt;2.2.2 Code Unit&lt;/h3&gt;

&lt;p&gt;Code Unit也叫码元（代码单元），表示计算机中实际存储Unicode的基本单位，取决于编码方式。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;： &lt;code class=&quot;highlighter-rouge&quot;&gt;Code Unit&lt;/code&gt;是 1 字节（8 Bit）；比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;在UTF-8编码下占 1 个字节，表示为&lt;code class=&quot;highlighter-rouge&quot;&gt;0x61&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-16&lt;/code&gt;： &lt;code class=&quot;highlighter-rouge&quot;&gt;Code Unit&lt;/code&gt;是 2 字节（16 Bit）；比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;在UTF-16编码下占 2 个字节，表示为&lt;code class=&quot;highlighter-rouge&quot;&gt;0x0061&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-32&lt;/code&gt;： &lt;code class=&quot;highlighter-rouge&quot;&gt;Code Unit&lt;/code&gt;是 4 字节（32 Bit）；比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;在UTF-32编码下占 4 个字节，表示为&lt;code class=&quot;highlighter-rouge&quot;&gt;0x00000061&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;三字符编码方式&quot;&gt;三、字符编码方式&lt;/h1&gt;

&lt;p&gt;字符编码方式决定了字符如何存储、传输和解码；常见的编码方式有：UTF-8、UTF-16、UTF-32等&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;：可变长度，用 1 到 4 个字节来存储 Unicode 字符；为了节省存储资源。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-16&lt;/code&gt;：可变长度，用 2 或 4 个字节存储字符。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-32&lt;/code&gt;：固定长度，每个字符始终使用 4 字节存储。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;的Code Point是：&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0065 + U+0301&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当以&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-32&lt;/code&gt;方式编码时，每个Code Point未超过4字节，所以表示为：0x00000065，0x00000301&lt;/p&gt;

&lt;p&gt;当以&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-16&lt;/code&gt;方式编码时，每个Code Point未超过2字节，所以表示为：0x0065，0x0301&lt;/p&gt;

&lt;p&gt;当以&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;方式编码时，0x0301值超过了128，需要按&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;格式拆分为0xCC，0x81，所以表示为：0x65，0xCC，0x81&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Q：&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;编码为什么是按128做比较，按理说1字节（0xFF）表示的最大值是255？&lt;/p&gt;

  &lt;p&gt;A：有两个原因：一是为了与&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;兼容，&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;只支持了128个字符编码，在&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;编码中，前128位与&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;编码相同；二是&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;编码中，会将第一个字节的高位部分用来标识这个字符的编码长度，具体为：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0xxxxxxx&lt;/code&gt;：表示 1 字节字符（&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt; 范围）&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;110xxxxx&lt;/code&gt;：表示 2 字节字符&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1110xxxx&lt;/code&gt;：表示 3 字节字符&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;11110xxx&lt;/code&gt;：表示 4 字节字符&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;img src=&quot;/img/post/Font/UTF-8编码规则.png&quot; alt=&quot;UTF-8编码规则&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 30 Aug 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/08/30/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%E5%AD%97%E7%AC%A6%E4%B8%8E%E7%BC%96%E7%A0%81/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/08/30/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%E5%AD%97%E7%AC%A6%E4%B8%8E%E7%BC%96%E7%A0%81/</guid>
        
        <category>跨端渲染</category>
        
        <category>Font</category>
        
        
      </item>
    
  </channel>
</rss>
