<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>非专业程序员</title>
    <description>Hello-World</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 30 Aug 2025 21:51:05 +0800</pubDate>
    <lastBuildDate>Sat, 30 Aug 2025 21:51:05 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>一文读懂字符与编码</title>
        <description>&lt;h1 id=&quot;一字符character&quot;&gt;一、字符/Character&lt;/h1&gt;

&lt;p&gt;对用户可见的“一个字符”，通常是我们在屏幕上看到的一个字母、数字、emoji 或组合字符。&lt;/p&gt;

&lt;p&gt;比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;👨‍👩‍👧‍👦&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;二字符编码标准字符集&quot;&gt;二、字符编码标准/字符集&lt;/h1&gt;

&lt;p&gt;字符编码标准定义的是如何将字符映射到唯一编码，常见的字符编码标准比如&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;GBK&lt;/code&gt;等&lt;/p&gt;

&lt;h2 id=&quot;21-ascii&quot;&gt;2.1 ASCII&lt;/h2&gt;

&lt;p&gt;ASCII（7位）定义了 128 个字符的唯一编码，包括数字0到9、小写字母a到z、大写字母A到Z以及常用标点符号等。&lt;/p&gt;

&lt;h2 id=&quot;22-unicode&quot;&gt;2.2 Unicode&lt;/h2&gt;

&lt;p&gt;Unicode又叫万国码，目标是为所有字符定义唯一编码（Code Point）。为了解决ASCII/GBK不能定义全部字符的问题。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;U+0061&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;👨&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;U+1F468&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;Unicode只负责分配码位（Code Point），并不决定具体的存储形式。&lt;/p&gt;

&lt;p&gt;Unicode的前 128 个码点与ASCII相同。&lt;/p&gt;

&lt;h3 id=&quot;221-code-point&quot;&gt;2.2.1 Code Point&lt;/h3&gt;

&lt;p&gt;Code Point也叫码位，Unicode中为每个字符分配的唯一编码。&lt;/p&gt;

&lt;p&gt;一个字符可以对应一个或多个Code Point，比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0061&lt;/code&gt;，对应 1 个Code Point&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;👨‍👩‍👧‍👦&lt;/code&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;U+1F468 (👨) + U+200D (ZWJ) + U+1F469 (👩) + U+200D (ZWJ) + U+1F467 (👧) + U+200D (ZWJ) + U+1F466 (👦)&lt;/code&gt;对应 7 个Code Point&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;U+00E9&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0065 + U+0301&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;备注：&lt;/p&gt;

  &lt;p&gt;在Unicode中，&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;实际上有两种表示方式：&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;单一字符表示法&lt;/strong&gt;：即直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;U+00E9&lt;/code&gt;这个单独的Unicode码位表示&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;。&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;组合字符表示法&lt;/strong&gt;：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0065&lt;/code&gt;（字母&lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;）和&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0301&lt;/code&gt;（重音符号）两个Unicode码位来表示一个&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;字符。&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;为什么会有这两种表示法？&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;历史原因&lt;/strong&gt;：Unicode设计时考虑到了不同语言的需求，许多语言（如法语、西班牙语等）使用带有重音符号的字符，因此，Unicode同时支持这两种表示方式。&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;兼容性&lt;/strong&gt;：一些旧的系统或字体可能只支持分解字符表示法，因此，Unicode也保留了这种组合字符的方式，以提高兼容性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;222-code-unit&quot;&gt;2.2.2 Code Unit&lt;/h3&gt;

&lt;p&gt;Code Unit也叫码元（代码单元），表示计算机中实际存储Unicode的基本单位，取决于编码方式。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;： &lt;code class=&quot;highlighter-rouge&quot;&gt;Code Unit&lt;/code&gt;是 1 字节（8 Bit）；比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;在UTF-8编码下占 1 个字节，表示为&lt;code class=&quot;highlighter-rouge&quot;&gt;0x61&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-16&lt;/code&gt;： &lt;code class=&quot;highlighter-rouge&quot;&gt;Code Unit&lt;/code&gt;是 2 字节（16 Bit）；比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;在UTF-16编码下占 2 个字节，表示为&lt;code class=&quot;highlighter-rouge&quot;&gt;0x0061&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-32&lt;/code&gt;： &lt;code class=&quot;highlighter-rouge&quot;&gt;Code Unit&lt;/code&gt;是 4 字节（32 Bit）；比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;在UTF-32编码下占 4 个字节，表示为&lt;code class=&quot;highlighter-rouge&quot;&gt;0x00000061&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;三字符编码方式&quot;&gt;三、字符编码方式&lt;/h1&gt;

&lt;p&gt;字符编码方式决定了字符如何存储、传输和解码；常见的编码方式有：UTF-8、UTF-16、UTF-32等&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;：可变长度，用 1 到 4 个字节来存储 Unicode 字符；为了节省存储资源。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-16&lt;/code&gt;：可变长度，用 2 或 4 个字节存储字符。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-32&lt;/code&gt;：固定长度，每个字符始终使用 4 字节存储。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;é&lt;/code&gt;的Code Point是：&lt;code class=&quot;highlighter-rouge&quot;&gt;U+0065 + U+0301&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当以&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-32&lt;/code&gt;方式编码时，每个Code Point未超过4字节，所以表示为：0x00000065，0x00000301&lt;/p&gt;

&lt;p&gt;当以&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-16&lt;/code&gt;方式编码时，每个Code Point未超过2字节，所以表示为：0x0065，0x0301&lt;/p&gt;

&lt;p&gt;当以&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;方式编码时，0x0301值超过了128，需要按&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;格式拆分为0xCC，0x81，所以表示为：0x65，0xCC，0x81&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Q：&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;编码为什么是按128做比较，按理说1字节（0xFF）表示的最大值是255？&lt;/p&gt;

  &lt;p&gt;A：有两个原因：一是为了与&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;兼容，&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;只支持了128个字符编码，在&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;编码中，前128位与&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;编码相同；二是&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;编码中，会将第一个字节的高位部分用来标识这个字符的编码长度，具体为：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0xxxxxxx&lt;/code&gt;：表示 1 字节字符（&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt; 范围）&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;110xxxxx&lt;/code&gt;：表示 2 字节字符&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1110xxxx&lt;/code&gt;：表示 3 字节字符&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;11110xxx&lt;/code&gt;：表示 4 字节字符&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;img src=&quot;/img/post/Font/UTF-8编码规则.png&quot; alt=&quot;UTF-8编码规则&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 30 Aug 2025 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2025/08/30/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%E5%AD%97%E7%AC%A6%E4%B8%8E%E7%BC%96%E7%A0%81/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/08/30/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%E5%AD%97%E7%AC%A6%E4%B8%8E%E7%BC%96%E7%A0%81/</guid>
        
        <category>Font</category>
        
        
      </item>
    
      <item>
        <title>虚拟内存</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;虚拟内存算是操作系统中比较重要的一部分了，内容也很多，早在看操作系统相关书籍的时候就有想要总结这一部分，但是功力不够，总感觉串不起来；经过秋招这几个月对基础知识的回顾，感觉对虚拟内存这一部分有了自己的一个认识和体系，遂趁这个机会述以成文。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;一-背景&quot;&gt;一. 背景&lt;/h2&gt;

&lt;p&gt;在计算机硬件体系结构中，总有这样一种规律：性能越好，价格越高；为了中和性价比，在计算机硬件体系中多采用逐级缓存的结构，通过软件算法实现访问性能与价格成本的平衡，这在计算机的存储体系中体现的尤为明显。&lt;/p&gt;

&lt;h3 id=&quot;11-dram-vs-sram&quot;&gt;1.1 DRAM vs SRAM&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DRAM&lt;/strong&gt;：动态随机访问存储器；价格低，访问速度较慢，耗电量较大，一般用于做主存。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SRAM&lt;/strong&gt;：静态随机访问存储器；价格高，访问速度快，耗电量低，一般用于做高速缓存。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;12-存储器层次结构&quot;&gt;1.2 存储器层次结构&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/VirtualMemory/存储器层次结构.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图，存储器的层次结构实际上是一个金字塔形状，从上到下，表示价格越来越低，容量越来越大；从上到下依次是：寄存器，L1，L2，L3三级高速缓存，主存，磁盘缓存，网络缓存。存储器的层次结构实际上也是一个逐级缓存的结构，其中，虚拟内存主要作用于主存与磁盘缓存之间，负责主存与磁盘之间的页面交换。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;二-虚拟内存的目的&quot;&gt;二. 虚拟内存的目的&lt;/h2&gt;

&lt;p&gt;虚拟内存有三个目的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将主存视为磁盘的高速缓存，在主存中只保留活动区域，提高主存利用率&lt;/li&gt;
  &lt;li&gt;为进程提供统一的地址空间，简化内存管理&lt;/li&gt;
  &lt;li&gt;保护进程地址空间不被其他进程破坏&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虚拟内存如何达到这三个目的，将在后文讲解。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;三-虚拟内存的原理&quot;&gt;三. 虚拟内存的原理&lt;/h2&gt;

&lt;h3 id=&quot;31-基本概念&quot;&gt;3.1 基本概念&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;页表：可以理解为位于主存中的一个大数组，由页表项组成&lt;/li&gt;
  &lt;li&gt;页表项：页表的基本组成单元，页表项分为两个部分：标志位和地址位&lt;/li&gt;
  &lt;li&gt;虚拟页：主存与磁之间的基本传送单元，磁盘地址空间被视为一个个的虚拟页&lt;/li&gt;
  &lt;li&gt;物理页：缓存在主存中的实际单元&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;32-寻址的基本过程&quot;&gt;3.2 寻址的基本过程&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;因为页表其实也是很占内存空间的，所以实际中会采用多级页表和动态创建页表的方式来减小页表大小，这里为了方便了解寻址的整体过程，就以单级页表为例；另外，页表项的高速缓存这里也没有考虑，高速缓存将在下一节介绍。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;主存中有一个页表，页表由页表项组成，将虚拟页映射到物理页；处理器（CPU）进行一次寻址的过程是：处理器生成一个虚拟地址，交给MMU（地址翻译器）进行地址翻译，MMU将虚拟地址转换为页表索引，然后去主存中查找对应的页表项，如果主存中缓存该虚拟页，则主存将虚拟页对应的页表项传送给MMU，之后MMU从页表项计算出物理地址送给主存，主存将物理地址对应的数据通过数据总线送给处理器；如果主存中没有缓存虚拟页对应的物理页，则触发一次缺页异常，由主存从磁盘换取所需虚拟页之后，再次执行导致缺页的指令。&lt;/p&gt;

&lt;p&gt;如下图所示：摘自《深入理解计算机系统》&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/VirtualMemory/寻址的基本过程.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;33-页表缓存&quot;&gt;3.3 页表缓存&lt;/h3&gt;

&lt;p&gt;上文中提过，相比于 L1，L2，L3 三级高速缓存，主存的访问速度还是很慢的（ DRAM 比 SRAM 要慢约十多倍，磁盘比 DRAM 要慢约十万多倍），所以如果每次进行寻址的时候，都按照上述过程，先去主存查找页表项，然后再去主存取对应的物理页，那么，即使每次页面都命中的情况下，每次寻址也需要两次的 DRAM 访问（主存访问），如果算上缺页异常与主存与磁盘的页面替换，耗费的时间将更多。&lt;/p&gt;

&lt;p&gt;为了加速 MMU 地址翻译的过程，会将页表项缓存到 TLB（TLB 见后补充解释） 和 L1 级高速缓存中，因此上述 MMU 进行地址翻译的过程就变成了：MMU 根据虚拟地址从 TLB 中查找页表项，如果找到，则直接进行后续物理地址生成；如果 TLB 未命中，则 MMU 从 L1 级高速缓存中查找对应的页表项，如果命中，则将该页表项缓存在 TLB 中并进行下一步，否则，继续从主存中查找页表项。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;TLB&lt;/strong&gt;：TLB 是一个在 MMU 中的高速缓存，用于缓存页表项；如果 TLB 命中，那么所有的地址翻译都是在芯片上的 MMU 中完成的，因此非常快。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如下图所示：摘自《深入理解计算机系统》&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/VirtualMemory/地址翻译的基本过程.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;34-地址翻译的细节&quot;&gt;3.4 地址翻译的细节&lt;/h3&gt;

&lt;h4 id=&quot;341-从-tlb-查找页表项&quot;&gt;3.4.1 从 TLB 查找页表项&lt;/h4&gt;

&lt;p&gt;处理器生成的虚拟地址如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/VirtualMemory/虚拟地址用于TLB.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TLB 中每一行都保存着一个由单个页表项组成的块，用于组选择和行匹配的索引和标记字段是从虚拟地址中的虚拟页号（VPN）中提取出来的，如果 TLB 有 &lt;code class=&quot;highlighter-rouge&quot;&gt;T = 2^t&lt;/code&gt;个组，那么 TLB 索引（TLBI）是由 VPN 的 t 个最低位组成的，而 TLB 标记（TLBT）是由 VPN 中剩余的位组成的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;更多关于 TLB 查找页表项的细节可参见： https://www.cnblogs.com/alantu2018/p/9000777.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;342-从主存中查找页表项&quot;&gt;3.4.2 从主存中查找页表项&lt;/h4&gt;

&lt;p&gt;如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/VirtualMemory/虚拟地址用于页表.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;虚拟地址由两部分组成：虚拟页号和虚拟页偏移量；虚拟页号可以简单的视为页表索引，如：根据VPN 0 选择页表项0，根据 VPN 1 选择页表项1，依次类推。&lt;/p&gt;

&lt;h4 id=&quot;343-从页表项生成物理地址&quot;&gt;3.4.3 从页表项生成物理地址&lt;/h4&gt;

&lt;p&gt;仍如上图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/VirtualMemory/虚拟地址用于页表.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看出，物理地址最终由两个部分组成：低位是虚拟地址的另一部分，即虚拟页偏移量，高位是页表项的另一部分（页表项还有一部分是标志位，上文介绍过）。&lt;/p&gt;

&lt;p&gt;另外，根据上图，还可以看出&lt;strong&gt;MMU是如何根据页表项判断虚拟页是否在主存中有对应的物理页的&lt;/strong&gt;：上文中说过，页表项分为两部分，其中一部分是一个标志位（即途中的有效位），上图也说的很清楚了，如果有效位为 0 ，说明虚拟页对应的物理页还为被缓存在主存中（缺页），否则，说明命中。&lt;/p&gt;

&lt;h3 id=&quot;35-页表优化&quot;&gt;3.5 页表优化&lt;/h3&gt;

&lt;p&gt;上文提到过，页表占据的内存空间也是可观的；对于一个 32 位的地址空间，4KB 的页面和一个 4 字节的页表项，即使应用所引用的只是虚拟地址空间中很小的一部分，也总是需要一个 4MB 的页表常驻内存。为了优化页表占用的内存空间，实际中常采用多级页表。&lt;/p&gt;

&lt;p&gt;多级页表的基本思路就是，增大单个页表项所能映射的虚拟页的大小，即进行粒度更大的映射（对于常驻内存的页表来说），如：之前一个页表项只能映射 4KB 的虚拟页，如果一个页表项能映射 4MB 的虚拟页的话，页表的大小也会相应的减小很多。&lt;/p&gt;

&lt;p&gt;另外，多级页表还支持动态创建子级页表，即常驻内存的只有粒度最大的一级页表，二级页表等子级页表不需要常驻内存，在进行地址翻译时动态创建即可。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;四-局部性原理与内存抖动&quot;&gt;四. 局部性原理与内存抖动&lt;/h2&gt;

&lt;p&gt;MMU 进行地址翻译以及缺页时进行页面替换的算法在很大程度上都依赖于局部性原理。程序的局部性原理意思是，程序上次用到的数据和代码，在下次访问时很可能也会用到；因此将下次很可能会用到的数据缓存在访问速度更快的高速缓存中，将比较可观的提升程序性能。&lt;/p&gt;

&lt;p&gt;比较常见的页面替换算法是：LRU 算法，即最近最少使用算法，以及其他更多页面置换算法可参见： https://www.cnblogs.com/dolphin0520/p/3749259.html&lt;/p&gt;

&lt;p&gt;内存抖动的意思是，处理器进行数据访问时，不断产生缺页中断，不断进行页面置换，造成程序运行缓慢。出现内存抖动一般有两个原因：一个是页面置换算法的缺陷，差的页面置换算法通常会导致页面命中率的降低，造成频繁的缺页中断与页面置换；另一个也可能与我们自己写的程序有关。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;五-虚拟内存与进程&quot;&gt;五. 虚拟内存与进程&lt;/h2&gt;

&lt;p&gt;本文开始讲虚拟内存的目的时，提到了虚拟内存对于进程的两个目的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;为进程提供统一的地址空间，简化内存管理：&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;操作系统为进程分配地址空间时，由于是通过虚拟内存进行虚拟页与物理页的映射，所以，对于进程而言，物理内存在地址空间上可以是不连续的（另外，这里还想提一点的是，这种不连续的映射，可以减少内存碎片与不同进程数据的共享，即通过虚拟内存将多个进程映射到同一虚拟页即可实现进程间数据共享）；同时，对于每一个进程而言，其地址空间都是由 0 开始往高地址增长（因为有 MMU 进行地址翻译）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;保护进程地址空间不被其他进程破坏：&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;进程在通过虚拟内存进行数据访问时，虚拟内存可以添加一些权限校验，防止进程间数据相互访问。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;六-参考&quot;&gt;六. 参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;《深入理解计算机系统》&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 02 Nov 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/11/02/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/11/02/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</guid>
        
        <category>操作系统</category>
        
        
      </item>
    
      <item>
        <title>iOS核心动画高级技巧Tips</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;核心动画高级技巧摘要&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;一-图层树&quot;&gt;一. 图层树&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;和UIView最大的不同是CALayer不处理用户的交互；CALayer并不清楚具体的响应链，即使它提供了一些方法来判断是否一个触点在图层的范围之内&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;每一个UIview都有一个CALayer实例的图层属性&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;UIView没有暴露出来的CALayer的功能：
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;阴影，圆角，带颜色的边框&lt;/li&gt;
        &lt;li&gt;3D变换&lt;/li&gt;
        &lt;li&gt;非矩形范围&lt;/li&gt;
        &lt;li&gt;透明遮罩&lt;/li&gt;
        &lt;li&gt;多级非线性动画&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;当满足以下条件的时候，你可能更需要使用CALayer而不是UIView:
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;开发同时可以在Mac OS上运行的跨平台应用&lt;/li&gt;
        &lt;li&gt;使用多种CALayer的子类（见第六章，“特殊的图层“），并且不想创建额外的UIView去包封装它们所有&lt;/li&gt;
        &lt;li&gt;做一些对性能特别挑剔的工作，比如对UIView一些可忽略不计的操作都会引起显著的不同（尽管如此，你可能会直接想使用OpenGL绘图）&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;二-寄宿图&quot;&gt;二. 寄宿图&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;利用CALayer在一个普通的UIView中显示了一张图片。这不是一个UIImageView，它不是我们通常用来展示图片的方法
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UIImage *image = [UIImage imageNamed:@&quot;Snowman.png&quot;];
//add it directly to our view's layer
self.layerView.layer.contents = (__bridge id)image.CGImage;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;如果你不需要寄宿图，那就不要重写drawRect方法，这会造成CPU资源和内存的浪费，这也是为什么苹果建议：如果没有自定义绘制的任务就不要在子类中写一个空的-drawRect:方法(因为如果UIView检测到-drawRect: 方法被调用了，它就会为视图分配一个寄宿图，这个寄宿图的像素尺寸等于视图大小乘以 contentsScale的值)&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;三-图层几何学&quot;&gt;三. 图层几何学&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;UIView有三个比较重要的布局属性：frame，bounds和center，CALayer对应地叫做frame，bounds和position。为了能清楚区分，图层用了“position”，视图用了“center”，但是他们都代表同样的值（frame代表了图层的外部坐标（也就是在父图层上占据的空间），bounds是内部坐标（{0, 0}通常是图层的左上角），center和position都代表了相对于父图层anchorPoint所在的位置）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;视图的frame，bounds和center属性仅仅是存取方法，当操纵视图的frame，实际上是在改变位于视图下方CALayer的frame，不能够独立于图层之外改变视图的frame&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于视图或者图层来说，frame并不是一个非常清晰的属性，它其实是一个虚拟属性，是根据bounds，position和transform计算而来，所以当其中任何一个值发生改变，frame都会变化。相反，改变frame的值同样会影响到他们当中的值&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当旋转时frame属性和bounds的宽高不再一致&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Animation/frame.png&quot; alt=&quot;iOS_Animation&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;认来说，anchorPoint位于图层的中点；视图的anchorPoint没有暴露，但是图层的anchorPoint可以被移动；比如你可以把它置于图层frame的左上角&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Animation/anchorPoint.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;CALayer还有另外两个属性，zPosition和anchorPointZ，二者都是在Z轴上描述图层位置的浮点类型&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CALayer并不关心任何响应链事件，所以不能直接处理触摸事件或者手势。但是它有一系列的方法帮你处理事件：-containsPoint:和-hitTest:&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;-containsPoint:接受一个在本图层坐标系下的CGPoint，如果这个点在图层frame范围内就返回YES&lt;/li&gt;
        &lt;li&gt;-hitTest:方法同样接受一个CGPoint类型参数，而不是BOOL类型，它返回图层本身，或者包含这个坐标点的叶子节点图层。这意味着不再需要像使用-containsPoint:那样，人工地在每个子图层变换或者测试点击的坐标。如果这个点在最外面图层的范围之外，则返回nil(注意当调用图层的-hitTest:方法时，测算的顺序严格依赖于图层树当中的图层顺序（和UIView处理事件类似）。之前提到的zPosition属性可以明显改变屏幕上图层的顺序，但不能改变事件传递的顺序)&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;四-视觉效果&quot;&gt;四. 视觉效果&lt;/h2&gt;

</description>
        <pubDate>Mon, 29 Apr 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/04/29/iOS%E6%A0%B8%E5%BF%83%E5%8A%A8%E7%94%BB%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7Tips/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/29/iOS%E6%A0%B8%E5%BF%83%E5%8A%A8%E7%94%BB%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7Tips/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>AutoLayout总结</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;总结&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;一-布局方式与背景&quot;&gt;一. 布局方式与背景&lt;/h2&gt;

&lt;p&gt;在开始介绍&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;之前，需要先介绍一下&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;中的布局方式；iOS&lt;code class=&quot;highlighter-rouge&quot;&gt;中主流的界面布局方式主要有手写代码布局，&lt;/code&gt;xib&lt;code class=&quot;highlighter-rouge&quot;&gt;布局，&lt;/code&gt;storyboard&lt;code class=&quot;highlighter-rouge&quot;&gt;布局；笔者更喜欢的还是手写代码的方式，一个可能与笔者之前&lt;/code&gt;Android&lt;code class=&quot;highlighter-rouge&quot;&gt;经验相关（因为&lt;/code&gt;Android&lt;code class=&quot;highlighter-rouge&quot;&gt;中多是使用手写&lt;/code&gt;xml`的方式布局，另一个是，对于多人合作而言，手写代码其实更方便（减少冲突）；当然，对于单人的独立项目，其实没有什么优劣可言，选择一种自己更为熟悉与快捷的方式都是因人而异。&lt;/p&gt;

&lt;p&gt;关于&lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt;布局和&lt;code class=&quot;highlighter-rouge&quot;&gt;storyboard&lt;/code&gt;布局方式的区别，其实二者都是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;IB&lt;/code&gt;来进行可视化空间的拖拽与约束，唯一的区别是二者的侧重点不同；一般来说，单个的&lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt;文件对应一个&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;，对于一些自定义&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;，通常也会使用单个&lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt;并从&lt;code class=&quot;highlighter-rouge&quot;&gt;main bundle&lt;/code&gt;进行加载的方式来载入；而&lt;code class=&quot;highlighter-rouge&quot;&gt;storyboard&lt;/code&gt;只能使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;而不能用于单独的&lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;（&lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;只能基于&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;使用，而&lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt;同时支持两者）&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt;实际上是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;xml&lt;/code&gt;文件，通过编译之后就得到&lt;code class=&quot;highlighter-rouge&quot;&gt;nib&lt;/code&gt;文件&lt;/p&gt;

&lt;p&gt;在上面介绍的三种方式中，都可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;的方式来进行布局；&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;的出现，是为了解决不同尺寸屏幕的适配问题；&lt;code class=&quot;highlighter-rouge&quot;&gt;iPhone 5&lt;/code&gt;之前，屏幕都是&lt;code class=&quot;highlighter-rouge&quot;&gt;3.5&lt;/code&gt;寸的（&lt;code class=&quot;highlighter-rouge&quot;&gt;640 x 960&lt;/code&gt;分辨率），这之前，屏幕尺寸相同，不存在适配问题，所有&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;坐标只需要计算好即可，但是&lt;code class=&quot;highlighter-rouge&quot;&gt;2012&lt;/code&gt;年，苹果发布了&lt;code class=&quot;highlighter-rouge&quot;&gt;4.0&lt;/code&gt;寸（&lt;code class=&quot;highlighter-rouge&quot;&gt;640 x 1136&lt;/code&gt;分辨率）的&lt;code class=&quot;highlighter-rouge&quot;&gt;iPhone 5&lt;/code&gt;，这样在&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;平台上就出现了不同尺寸的移动设备，使得原有的&lt;code class=&quot;highlighter-rouge&quot;&gt;frame&lt;/code&gt;布局方式无法进行很好的屏幕适配，所以为了解决这一问题，就出现了&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;二-原理与使用&quot;&gt;二. 原理与使用&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;其实类似于&lt;code class=&quot;highlighter-rouge&quot;&gt;Android&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;RelativeLayout&lt;/code&gt;，采用&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;之间的相对位置来进行布局；我们知道，要确定一个&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的位置，需要知道&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;x，y，width，height&lt;/code&gt;，即&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的起始坐标点，宽度和高度信息；&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;其实是通过解&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;之间建立的线性方程组（&lt;code class=&quot;highlighter-rouge&quot;&gt;y = ax + b&lt;/code&gt;）来确定其信息的（如下图），当然，如果出现约束不完整的情况或者约束冲突的情况，就会出现解的不定性，表现出来即是&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;位置未达到预期&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/AutoLayout/AutoLayout_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可约束的属性参见&lt;a href=&quot;https://developer.apple.com/documentation/uikit/nslayoutattribute&quot;&gt;NSLayoutAttribute&lt;/a&gt;枚举&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;实际上是基于&lt;code class=&quot;highlighter-rouge&quot;&gt;Cassowary&lt;/code&gt;算法的，&lt;code class=&quot;highlighter-rouge&quot;&gt;Cassowary&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;Alan Borning, Kim Marriott, Peter Stuckey&lt;/code&gt;等人在&lt;code class=&quot;highlighter-rouge&quot;&gt;1997&lt;/code&gt;年提出的一个解决布局问题的算法，&lt;code class=&quot;highlighter-rouge&quot;&gt;Cassowary&lt;/code&gt;算法能够有效解决线性等式系统和线性不等式系统，这也是&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;的性能保障&lt;/p&gt;

&lt;p&gt;当使用&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;的时候，&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的默认初始值会被弃用，如下代码，此时&lt;code class=&quot;highlighter-rouge&quot;&gt;UILable&lt;/code&gt;的初始化宽高会失效；这里还需要注意一个&lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt;属性，从名字我们可以看出，该属性是控制是否把&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoresizingMask&lt;/code&gt;变成约束（&lt;code class=&quot;highlighter-rouge&quot;&gt;autoresizing mask&lt;/code&gt;其实就是完全指定视图的尺寸和位置，即是否需要将其转换为线性方程组）；当使用&lt;code class=&quot;highlighter-rouge&quot;&gt;IB（Interface Builder）&lt;/code&gt;布局的时候，即&lt;code class=&quot;highlighter-rouge&quot;&gt;xib，storyboard&lt;/code&gt;方式，如果勾选了&lt;code class=&quot;highlighter-rouge&quot;&gt;Use Autolayout&lt;/code&gt;选项（默认勾选），那么&lt;code class=&quot;highlighter-rouge&quot;&gt;IB&lt;/code&gt;生成的控件的&lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt;属性都会被默认设置&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;；当使用手写代码布局时，&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt;属性默认为&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;，但是&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoresizingMask&lt;/code&gt;属性默认被设置为&lt;code class=&quot;highlighter-rouge&quot;&gt;.None&lt;/code&gt;，也就是说如果我们不去动&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoresizingMask&lt;/code&gt;属性，那么&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoresizingMask&lt;/code&gt;就不会对约束产生影响，所以，这个属性，一般也不需要手动设置（当然，为了保险，也可以手动将&lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt;属性置为&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;）&lt;/p&gt;

&lt;p&gt;当&lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt;属性为&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;时，&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoresizingMask&lt;/code&gt;将会转换为约束，一起参与到&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;的约束计算中，即会对&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;产生影响&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let label = UILabel(frame: CGRect(x: 100, y: 100, width: 100, height: 200))
label.backgroundColor = #colorLiteral(red: 1, green: 0.5763723254, blue: 0, alpha: 1)
view.addSubview(label)
label.translatesAutoresizingMaskIntoConstraints = false
label.snp.makeConstraints { (make) in
            make.width.equalTo(10)
            make.leading.equalToSuperview().offset(40)
            make.top.equalToSuperview().offset(40)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;布局关系不仅限于等于，还可以是大于等于或者小于等于，这种不等关系在处理&lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;UIImageView&lt;/code&gt;等具有自身内容尺寸（&lt;code class=&quot;highlighter-rouge&quot;&gt;Intrinsic Content Size&lt;/code&gt;）的控件时非常有用；比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;的长度会随文字长度而变化，那么我们可以对&lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;控件添加两个约束，即&lt;code class=&quot;highlighter-rouge&quot;&gt;宽度大于等于50&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;宽度小于等于200&lt;/code&gt;，这样，当文字很少时，宽度也至少为&lt;code class=&quot;highlighter-rouge&quot;&gt;50&lt;/code&gt;，当文字很多时，宽度也不会超过&lt;code class=&quot;highlighter-rouge&quot;&gt;200&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;某些用来展现内容的用户控件，例如&lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;UIImageView&lt;/code&gt;等，它们具有自身内容尺寸（&lt;code class=&quot;highlighter-rouge&quot;&gt;Intrinsic Content Size&lt;/code&gt;），此类用户控件会根据自身内容尺寸添加布局约束；也就是说，如果开发者没有显式给出其宽度或者高度约束，则其自身内容约束将会起作用&lt;/p&gt;

&lt;p&gt;具有&lt;code class=&quot;highlighter-rouge&quot;&gt;Intrinsic Content Size&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;参见下图（摘自官网）；具有&lt;code class=&quot;highlighter-rouge&quot;&gt;Intrinsic Content Size&lt;/code&gt;属性的&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;都重写了&lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;-(CGSize)intrinsicContentSize:&lt;/code&gt;方法，并且在需要改变这个值的时候调用&lt;code class=&quot;highlighter-rouge&quot;&gt;invalidateIntrinsicContentSize&lt;/code&gt;方法即可，通知系统这个值改变了；同样，当我们自定义&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的时候，如果想要拥有&lt;code class=&quot;highlighter-rouge&quot;&gt;Intrinsic Content Size&lt;/code&gt;属性，就可以重写该方法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/AutoLayout/AutoLayout_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;中还有两个比较重要的概念，&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Hugging&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Compression Resistance&lt;/code&gt;约束；在讲解这两个属性之前，需要先了解一下&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;中的优先级属性；所谓的优先级，我个人的理解其实是一种减少冲突与弱化约束的作用，即为各约束设置优先级，当出现冲突时&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;优先满足高优先级的约束；关于优先级的使用，可以参见文末参考链接&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Hugging&lt;/code&gt;约束：不想变大约束；即如果组件的此属性优先级比另一个组件此属性优先级高的话，那么这个组件就保持不变，另一个可以在需要拉伸的时候拉伸；可以简单理解为&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Hugging&lt;/code&gt;越大，&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;越难变大；默认值为&lt;code class=&quot;highlighter-rouge&quot;&gt;250&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Compression Resistance&lt;/code&gt;约束：不想变小约束；如果组件的此属性优先级比另一个组件此属性优先级高的话，那么这个组件就保持不变，另一个可以在需要压缩的时候压缩；可以简单理解为&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Compression Resistance&lt;/code&gt;越大，&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;越难变小；默认值为&lt;code class=&quot;highlighter-rouge&quot;&gt;750&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;关于&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Hugging&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Compression Resistance&lt;/code&gt;的应用，可以参见&lt;a href=&quot;https://www.jianshu.com/p/f6bc007b30e5&quot;&gt;博客&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;三-性能分析&quot;&gt;三. 性能分析&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;https://time.geekbang.org/column/article/85332&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.jianshu.com/p/0b964dc17c04&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://xiaozhuanlan.com/topic/5378941206&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://draveness.me/layout-performance&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://juejin.im/post/5bd5a546f265da0af033cee6#heading-3&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;四-参考&quot;&gt;四. 参考&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;https://www.jianshu.com/p/f6bc007b30e5&lt;/li&gt;
  &lt;li&gt;https://blog.csdn.net/hard_man/article/details/50888377&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 23 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/23/AutoLayout%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/23/AutoLayout%E6%80%BB%E7%BB%93/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS疑难点</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;iOS疑难点总结，部分摘自参考链接&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;selfvar还是_var&quot;&gt;self.var还是_var?&lt;/h2&gt;

&lt;p&gt;在iOS中常见到如下写法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@interface Demo ()

@property(nonatomic, strong) NSString *name;

@end

@implementation Demo

- (void)test {
    _name = @&quot;&quot;;
//    self.name = @&quot;&quot;;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在上述写法中，&lt;code class=&quot;highlighter-rouge&quot;&gt;self.name&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;_name&lt;/code&gt;有什么区别呢?&lt;/p&gt;

&lt;p&gt;在解释其区别之前，需要先了解一下OC中的属性和实例变量，实例变量具有私有性，一般仅在类内部使用，为了方便给外界读写这个实例变量，就有了属性（@property）&lt;/p&gt;

&lt;p&gt;在iOS第一版中，需要同时声明属性和底层实例变量，那时，属性是oc语言的一个新的机制，并且要求必须声明与之对应的实例变量；如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// MyViewController.h

@interface MyViewController : UIViewController
{
    UIButton *myButton; // 实例变量
}

@property (nonatomic, retain) UIButton *myButton; // 属性

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;之后，苹果将默认编译器从GCC转换为LLVM(low level virtual machine)，从此不再需要为属性声明实例变量了。如果LLVM发现一个没有匹配实例变量的属性，它将自动创建一个以下划线开头的实例变量（即&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;属性及与其对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;_var&lt;/code&gt;实例变量），如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// MyViewController.h

@interface MyViewController : UIViewController

@property (nonatomic, retain) UIButton *myButton; // 将自动创建一个_myButton实例变量与之对应

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在MyViewController.m中可以直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;_myButton&lt;/code&gt;实例变量，也可以通过self.myButton来访问，二者的区别也是下面要讲解的；&lt;/p&gt;

&lt;p&gt;再来看下面一个例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// MyViewController.h

@interface MyViewController : UIViewController
{
    NSString *name; // 实例变量
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在MyViewController.m文件中，如果通过self.name访问的话，编译器会报错，Xcode会提示使用-&amp;gt;，即使用self-&amp;gt;name，这是因为OC中点表达式表示调用方法，而这里的name是一个实例变量，没有与其对应的name方法&lt;/p&gt;

&lt;p&gt;另外，还有一个与@property合用的@synthesize，通过@synthesize还可以指定与属性对应的实例变量名，如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// MyViewController.h

@interface MyViewController : UIViewController

@property (nonatomic, retain) UIButton * myButton;

@end

// MyViewController.m

@implementation MyViewController

@synthesize myButton = otherButton;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;此时，与属性myButton对应的实例变量名为otherButton了，默认的&lt;code class=&quot;highlighter-rouge&quot;&gt;_myButton&lt;/code&gt;就不能使用了；还需要注意的一点是，如果只是声明了&lt;code class=&quot;highlighter-rouge&quot;&gt;@synthesize myButton;&lt;/code&gt;，那么此时默认与myButton对应的实例变量名为myButton，&lt;code class=&quot;highlighter-rouge&quot;&gt;_myButton&lt;/code&gt;也不能用了&lt;/p&gt;

&lt;p&gt;到这里我们应该知道了使用&lt;code class=&quot;highlighter-rouge&quot;&gt;self.var&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;_var&lt;/code&gt;的区别，即self.var实际上是调用了属性方法，即getter和setter方法，而&lt;code class=&quot;highlighter-rouge&quot;&gt;_var&lt;/code&gt;是直接调用的实例变量，不会走getter和setter方法；因此，这里需要注意的是，当我们要重写getter方法时，在getter方法中必须使用&lt;code class=&quot;highlighter-rouge&quot;&gt;_var&lt;/code&gt;实例变量，否则会造成getter方法的递归调用；同理，重写setter方法时，在setter方法中也只能使用&lt;code class=&quot;highlighter-rouge&quot;&gt;_var&lt;/code&gt;实例变量，否则也会造成settter方法的递归调用；另外，直接访问实例变量的话，就不会调用其setter方法，这样就绕过了为相关属性所定义的内存管理语义。例如：在ARC下直接访问一个语义为copy的属性，那么并不会copy该属性，而仅仅是保留新值并释放旧值&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考链接：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;https://www.jianshu.com/p/48056965ddce&lt;/li&gt;
  &lt;li&gt;http://www.cnblogs.com/crazypebble/archive/2013/11/23/3439261.html&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;property与synthesize&quot;&gt;@property与@synthesize&lt;/h2&gt;

&lt;p&gt;我们知道@property可用于在头文件中声明getter和settter方法，@synthesize方法可用于.m文件中实现getter和setter方法；但是实际情况是，如果我们只是在头文件中使用了@property，而没有在.m文件中使用@synthesize，编译器实际上还是会为我们生成getter和setter方法；这是因为从Xcode 4.4 开始，@synthesize属性是默认声明了的&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考链接：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;https://stackoverflow.com/questions/7496463/objective-c-property-declaration-without-implementation-synthesize&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;扩展extension与分类category&quot;&gt;扩展(extension)与分类(category)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;参考链接：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;https://www.jianshu.com/p/9e827a1708c6&lt;/li&gt;
  &lt;li&gt;https://blog.csdn.net/hherima/article/details/44242469&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;宏定义中的dowhile0使用&quot;&gt;宏定义中的do{}while(0)使用&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;参考链接：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;https://blog.csdn.net/luoweifu/article/details/38563162&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;toolbartab-bar和navigationbar的区别&quot;&gt;Toolbar，Tab Bar和NavigationBar的区别&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Toolbar&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Tab Bar&lt;/code&gt;都是显示在&lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt;的底部，&lt;code class=&quot;highlighter-rouge&quot;&gt;Toolbar&lt;/code&gt;中包含的内容和当前界面相关，比如：添加一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Item&lt;/code&gt;，删除一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Item&lt;/code&gt;，拍照等；&lt;code class=&quot;highlighter-rouge&quot;&gt;Tab Bar&lt;/code&gt;是用于在不同界面之间切换的；需要注意的是，&lt;code class=&quot;highlighter-rouge&quot;&gt;Toolbar&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Tab Bar&lt;/code&gt;不能在同一个界面中使用&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NavigationBar&lt;/code&gt;是顶部的导航栏&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/27/iOS%E7%96%91%E9%9A%BE%E7%82%B9/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/27/iOS%E7%96%91%E9%9A%BE%E7%82%B9/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS多线程与网络</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;iOS多线程编程各种方式总结&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;一-概述&quot;&gt;一. 概述&lt;/h2&gt;

&lt;p&gt;iOS中多线程的实现方式有如下四种：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Thread/多线程实现方案的比较.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;本文主要总结常用的两种方式&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;二-gcd&quot;&gt;二. GCD&lt;/h2&gt;

&lt;h3 id=&quot;21-gcd概述&quot;&gt;2.1 GCD概述&lt;/h3&gt;

&lt;p&gt;GCD即Grand Central Dispatch，是苹果公司为多核的并行运算提出的解决方案，能自动合理地利用多核CPU（比如双核、四核），同时还能自动管理线程的生命周期（创建线程、调度任务、销毁线程），不需要手动管理；由C语言实现&lt;/p&gt;

&lt;h3 id=&quot;22-gcd使用&quot;&gt;2.2 GCD使用&lt;/h3&gt;

&lt;h4 id=&quot;221-主要方法&quot;&gt;2.2.1 主要方法&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)&lt;/code&gt; ：同步&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_async(dispatch_queue_t queue, dispatch_block_t block)&lt;/code&gt; ：异步&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)&lt;/code&gt; ：等待前面的任务执行完成之后才执行，且它后面的任务等它执行完成之后才会执行；这里的 queue 不能是全局的并发队列（可用于解决读写锁的问题；如数据库操作中，读操作可以并行提高效率，写操作需要等待前面的读操作完成之后再执行，写操作执行完之后，之后的读操作又可以实现并行，如下）&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	dispatch_async(queue, ^{
            // reading
        });
        dispatch_async(queue, ^{
            // reading
        });
        dispatch_barrier_sync(queue, ^{
            // writing
        });
        dispatch_async(queue, ^{
            // reading
        });
        dispatch_async(queue, ^{
            // reading
        });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;222-队列&quot;&gt;2.2.2 队列&lt;/h4&gt;

&lt;p&gt;GCD中有两个重要的概念：任务和队列&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;任务有两种执行方式：同步执行和异步执行，他们之间的区别是否会创建新的线程&lt;/li&gt;
    &lt;li&gt;队列：用于存放任务。有两种队列， 串行队列和并行队列；区别如下：&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Thread/串行队列和并行队列.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以通过如下方式获取或者创建队列：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_queue_create&lt;/code&gt; 创建（串行或并行）&lt;/li&gt;
    &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_get_global_queue&lt;/code&gt; 获取全局并发队列（所有应用程序都可用，且区分优先级）&lt;/li&gt;
    &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_get_main_queue&lt;/code&gt; 获得主队列&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 自己创建队列：第一个参数是标识符，用于 DEBUG 的时候标识唯一的队列；
// 第二个参数用来表示创建的队列是串行的还是并行的，传入 DISPATCH_QUEUE_SERIAL 或 NULL 表示创建串行队列。传入 DISPATCH_QUEUE_CONCURRENT 表示创建并行队列

  //串行队列
  dispatch_queue_t queue = dispatch_queue_create(&quot;tk.bourne.testQueue&quot;, NULL);
  dispatch_queue_t queue = dispatch_queue_create(&quot;tk.bourne.testQueue&quot;, DISPATCH_QUEUE_SERIAL);
  //并行队列
  dispatch_queue_t queue = dispatch_queue_create(&quot;tk.bourne.testQueue&quot;, DISPATCH_QUEUE_CONCURRENT);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // 全局并行队列：
  dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;223-队列组dispatch-group&quot;&gt;2.2.3 队列组(Dispatch Group)&lt;/h4&gt;

&lt;p&gt;可用于实现当并行执行block时，监听所有block执行结束&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
        dispatch_group_t group = dispatch_group_create();
        dispatch_group_async(group, queue, ^{
            NSLog(@&quot;Block 1&quot;);
        });
        dispatch_group_async(group, queue, ^{
            NSLog(@&quot;Block 2&quot;);
        });
        dispatch_group_async(group, queue, ^{
            NSLog(@&quot;Block 3&quot;);
        });
        dispatch_group_notify(group, dispatch_get_main_queue(), ^{
            NSLog(@&quot;Done&quot;);
        });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;应用举例：分别执行两个耗时的操作，等两个异步操作都执行完之后，回到主线程执行操作；如果想要高效实现上述需求，可用队列组；如下&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dispatch_group_t group =  dispatch_group_create();
dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    // 执行1个耗时的异步操作
});
dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    // 执行1个耗时的异步操作
});
dispatch_group_notify(group, dispatch_get_main_queue(), ^{
    // 等前面的异步操作都执行完毕后，回到主线程...
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;224-其他&quot;&gt;2.2.4 其他&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;延迟执行：通过&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_walltime&lt;/code&gt;生成绝对时间&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dispatch_time_t time = dispatch_time(DISPATCH_TIME_NOW, 3ull * NSEC_PER_SEC); // ull表示：unsigned long long 
        dispatch_after(time, dispatch_get_main_queue(), ^{
            
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;dipatch_apply：相当于dipatch_sync和dispatch group的关联API，该函数将指定的block追加到指定的queue中，并等待全部处理执行结束；其也会阻塞直到执行完毕，可用其替代for循环
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
dispatch_apply(10, queue, ^(size_t index) { // index表示当前索引，自动增加
  NSLog(@&quot;%zu&quot;, index);
});
NSLog(@&quot;Done&quot;); // 最后执行
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;dispatch_suspend / dispatch_resume：用于挂起和恢复queue&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dispatch Semaphore：计数为0时等待，计数为1或大于1时，减1而不是等待&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;dispatch_once：保证在应用程序中只执行一次指定处理的API&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Dispatch IO：当读取大文件时，将文件分成合适的大小并使用Global Queue读取的话，会快很多，如果想尝试提高文件读取速度，可以使用Dispatch IO&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;225-备注&quot;&gt;2.2.5 备注&lt;/h4&gt;

&lt;p&gt;在iOS6.0之前，在GCD中每当使用带creat单词的函数创建对象之后，都应该对其进行一次release操作。在iOS6.0之后，GCD被纳入到了ARC的内存管理机制中，在使用GCD的时候我们就像对待普通OC对象一样对待GCD,因此不再需要我们调用release方法&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;三-nsoperation&quot;&gt;三. NSOperation&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;本身是个抽象类，需要使用其子类：NSInvocationOperation，NSBlockOperation，或自定义子类&lt;/li&gt;
    &lt;li&gt;默认情况下，调用 NSInvocationOperation 的 start 方法并不会开一条新线程去执行，而是在当前线程执行；需要把 NSOperation 放到一个 NSOperationQueue 中才会执行异步操作&lt;/li&gt;
    &lt;li&gt;NSBlockOperation：只要 NSBlockOperation 封装的操作数 &amp;gt; 1，就会异步执行操作&lt;/li&gt;
    &lt;li&gt;支持取消，暂停和恢复，还可以设置依赖来保证执行顺序，如 &lt;code class=&quot;highlighter-rouge&quot;&gt;[operationB addDependency:operationA]; // 操作B依赖于操作A&lt;/code&gt;；还可以在不同 queue 的 NSOperation 之间创建依赖关系&lt;/li&gt;
    &lt;li&gt;支持监听一个操作的执行完毕：通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;completionBlock&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;setCompletionBlock&lt;/code&gt; 实现&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;四-网络请求&quot;&gt;四. 网络请求&lt;/h2&gt;

&lt;p&gt;网络请求常用类：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;NSURL：请求地址&lt;/li&gt;
    &lt;li&gt;NSURLRequest：一个NSURLRequest对象就代表一个请求，它包含的信息有：一个 NSURL 对象，请求方法，请求头，请求体，请求超时等&lt;/li&gt;
    &lt;li&gt;NSMutableURLRequest：NSURLRequest的子类&lt;/li&gt;
    &lt;li&gt;NSURLConnection：负责发送请求；支持发送同步请求（sendSynchronousRequest）和异步请求（sendAsynchronousRequest）；还可以设置代理监听网络请求过程（开始响应，接收数据，结束响应，请求出错）&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;第三方框架：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;ASIHttpRequest&lt;/li&gt;
    &lt;li&gt;AFNetworking&lt;/li&gt;
    &lt;li&gt;MKNetworkKit&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;iOS中发送 HTTP 请求的方案：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;苹果原生
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;NSURLConnection：用法简单，坑较多&lt;/li&gt;
        &lt;li&gt;NSURLSession：功能比 NSURLConnection 强大，苹果推荐使用(但是NSURLSessionTask是一个抽象类，本身不能使用，只能使用它的子类：NSURLSessionDataTask\NSURLSessionUploadTask\NSURLSessionDownloadTask)&lt;/li&gt;
        &lt;li&gt;CFNetwork：NSURL*的底层实现，纯C语言&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;两种为NSURLConnection设置代理方式的区别：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    //第一种设置方式：
    //通过该方法设置代理，会自动的发送请求
    // [[NSURLConnection alloc]initWithRequest:request delegate:self];

    //第二种设置方式：
    //设置代理，startImmediately为NO的时候，该方法不会自动发送请求
    NSURLConnection *connect = [[NSURLConnection alloc]initWithRequest:request delegate:self startImmediately:NO];
    //手动通过代码的方式来发送请求
    //注意该方法内部会自动的把connect添加到当前线程的RunLoop中在默认模式下执行
    [connect start];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;五-数据解析&quot;&gt;五. 数据解析&lt;/h2&gt;

&lt;p&gt;Json解析（转OC数据类型）：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;第三方框架：JSONKit、SBJson、TouchJSON（性能从左到右，越差）&lt;/li&gt;
    &lt;li&gt;苹果原生：NSJSONSerialization（性能最好）&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Thread/Json转OC数据类型.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;XML解析：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;解析方式有两种：
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;DOM：一次性将整个XML文档加载进内存，比较适合解析小文件&lt;/li&gt;
        &lt;li&gt;SAX：从根元素开始，按顺序一个元素一个元素往下解析，比较适合解析大文件&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;解析API：
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;官方原生：NSXMLParser，SAX方式解析&lt;/li&gt;
        &lt;li&gt;libxml2：纯C语言，默认包含在iOS SDK中，同时支持DOM和SAX方式解析&lt;/li&gt;
        &lt;li&gt;GDataXML：DOM方式解析，由Google开发，基于libxml2&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;六-runloop&quot;&gt;六. RunLoop&lt;/h2&gt;

&lt;p&gt;RunLoop是iOS中比较重要的一点，较短篇幅无法讲完，后面有机会再另起新篇总结&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;七-参考博客&quot;&gt;七. 参考博客&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;https://www.jianshu.com/p/0b0d9b1f1f19&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 24 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/24/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/24/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>常用算法思想</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;常见算法及其思想与对应题目总结&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;一-分治算法&quot;&gt;一. 分治算法&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;11-基本思想与适用场景&quot;&gt;1.1 基本思想与适用场景&lt;/h3&gt;

&lt;p&gt;分治法，顾名思义，即分而治之，适用于当一个问题很复杂，难以解决，但是可以分解为许多容易解决的相似子问题，且子问题解合并起来即为原复杂问题解时的情况&lt;/p&gt;

&lt;p&gt;从上面的描述中我们可以提取出分治法适用的几个&lt;strong&gt;要点&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;原问题可分解为许多&lt;strong&gt;相似&lt;/strong&gt;子问题&lt;/li&gt;
    &lt;li&gt;子问题&lt;strong&gt;解可合&lt;/strong&gt;并为原问题解&lt;/li&gt;
    &lt;li&gt;子问题独立，即子问题之间无公共子问题（非必须，涉及到分治法效率问题，若子问题之间不独立，分治法效率较低，一般使用动态规划）&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面的要点&lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;是适用分治法的关键，也是判断一个问题是否可以使用分治法解决的关键，如果一个问题不满足第二条，可以考虑使用贪心或者动态规划；从其特征可以看出，分治法通常伴随着递归（因为有相似子问题，明显的递归解决思路），递归也是我们通常解决此类问题的常用手段&lt;/p&gt;

&lt;h3 id=&quot;12-应用举例&quot;&gt;1.2 应用举例&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;二分搜索&lt;/li&gt;
    &lt;li&gt;大整数乘法&lt;/li&gt;
    &lt;li&gt;Strassen矩阵乘法&lt;/li&gt;
    &lt;li&gt;棋盘覆盖&lt;/li&gt;
    &lt;li&gt;合并排序&lt;/li&gt;
    &lt;li&gt;快速排序&lt;/li&gt;
    &lt;li&gt;线性时间选择&lt;/li&gt;
    &lt;li&gt;最接近点对问题&lt;/li&gt;
    &lt;li&gt;循环赛日程表&lt;/li&gt;
    &lt;li&gt;汉诺塔&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;13-参考链接&quot;&gt;1.3 参考链接&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;https://www.cnblogs.com/steven_oyj/archive/2010/05/22/1741370.html&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;二-动态规划&quot;&gt;二. 动态规划&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;11-基本思想与适用场景-1&quot;&gt;1.1 基本思想与适用场景&lt;/h3&gt;

&lt;p&gt;动态算法的核心是记住已经求过的解，在已知解的基础上继续求解；记住求解的方式有两种：一是&lt;strong&gt;自顶向下的备忘录法&lt;/strong&gt;，二是&lt;strong&gt;自底向上&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;自顶向下一般涉及到递归，通常需要传递一个容器来存储结果，在分治算法中也提到了，当子问题不独立时，此时可以考虑使用动态规划（效率问题，用空间换取时间），该容器存储的结果实际上就是用于结束重复的递归计算&lt;/p&gt;

&lt;p&gt;自底向上即最开始就从子问题计算起，逐步往上，相当于递归的拆解（循环）&lt;/p&gt;

&lt;p&gt;参见&lt;a href=&quot;https://www.zhihu.com/question/23995189&quot;&gt;动态规划的意义&lt;/a&gt;，将动态规划视为状态的转移来进行理解和区别&lt;/p&gt;

&lt;p&gt;特征：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;每个阶段的最优状态可以从之前某个阶段的某个或某些状态直接得到–最优子结构&lt;/li&gt;
    &lt;li&gt;不管之前这个状态是如何得到的–无后效性&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;12-应用举例-1&quot;&gt;1.2 应用举例&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Fibonacci数列问题&lt;/li&gt;
    &lt;li&gt;钢条切割问题&lt;/li&gt;
    &lt;li&gt;小朋友过桥问题&lt;/li&gt;
    &lt;li&gt;背包模型&lt;/li&gt;
    &lt;li&gt;最长单调子序列&lt;/li&gt;
    &lt;li&gt;最大M子段和&lt;/li&gt;
    &lt;li&gt;线性模型&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;13-参考链接-1&quot;&gt;1.3 参考链接&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;https://blog.csdn.net/u013309870/article/details/75193592&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.zhihu.com/question/23995189&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;三-贪心算法&quot;&gt;三. 贪心算法&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;四-回溯法&quot;&gt;四. 回溯法&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;五-分支限界法&quot;&gt;五. 分支限界法&lt;/h2&gt;
</description>
        <pubDate>Sat, 16 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/16/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/16/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/</guid>
        
        <category>Algorithm</category>
        
        
      </item>
    
      <item>
        <title>iOS读书笔记</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;iOS 各类书籍读书笔记&lt;/p&gt;

&lt;p&gt;摘要各本书中重难点&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;objective-c-编程之道ios-设计模式&quot;&gt;Objective-C 编程之道：iOS 设计模式&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;中介者模式是至用一个对象来封装一组对象之间的交互逻辑，中介者通过避免对象间显示的相互引用来增进不同对象间的松耦合&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;备忘录模式允许对象按其想要的任何（或者任意复杂的）方式将自己的壮状态保存为一个对象，根据此模式这个对象被称为备忘录对象，然后某个其他对象，比如看管人对象，将备忘录对象保管在某处，通常是文件系统或内存中；看管人对象不知道有关备忘录对象的任何细节的格式，一段时间之后，接收到请求时，看管人对象将备忘录对象传回给原来的对象，让他根据在备忘录对象中保存的信息恢复其状态&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;代理模式的一个特点是同归虚拟代理，在接到请求时实现重型资源的懒加载&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;软件设计的黄金法则：变动需要抽象&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;桥接模式的目的是把抽象层次结构从其实现中分离出来，使其能够独立变更；抽象层定义了供客户端使用的上层抽象接口；可以&lt;a href=&quot;https://www.jianshu.com/p/e986af029490&quot;&gt;参见博客&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;外观模式为子系统中一组不同的接口提供统一的接口呢，外观模式定义了上层接口，通过降低复杂度和隐藏子系统间的通信及依存关系，让子系统更易于使用（其实就是对一系列复杂操作再次进行封装，隐藏调用或者实现细节）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;中介者模式用于定义一个集中的场所，对象间的交互可以在一个中介者对象中处理；其他对象不必彼此交互，因此减少了它们之间的依存关系&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;观察者模式：iOS 中观察者模式可以通过通知和键值观察(KVO)来实现&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;迭代器模式：迭代器（Iterator）提供了一种顺序访问聚合对象(集合)中元素的方法，而无需暴露结构的底层表示和细节&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;装饰模式：即动态的为一个对象添加额外的指责，是继承的替代方案，属于结构型模式（继承是编译时静态绑定，装饰模式是可以在运行是动态绑定，即定义一个接口，然后动态的注入不同的实现类）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;责任链模式：即如果一个对象不知道如何处理一个请求，则将该请求传递给另一个对象，这样继续传递下去&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;策略模式：提取公共接口，不同实现&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;命令模式：将请求封装为一个对象，从而可用不同的请求对客户进行参数化，对请求排队或者记录请求日志，以及支持可撤销的操作&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;享元模式：实现享元模式需要两个关键组件，通常是可共享的享元对象和保存他们的池&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;代理模式：代理是一种替代或占位，它控制对另一些对象的访问，而这些对象可能是远程对象，创建的开销较大的对象，或者是对安全性有要求的对象（NSProxy）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;uicollectionview解析&quot;&gt;UICollectionView解析&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;UICollectionViewCell 的层级结构见下图；UICollectionViewCell 有三个子 View ，下图中黑色矩形是 CollectioView Cell 自身，绿色矩形是 contentView，我们应该在contentView上面添加子 View，中间的两层 selectedBackgroundView 和 backgroundView 是可选的，并且可以在任何时候进行设置（当 backgroundView 被设置的时候，将会永远显示；selectedBackgroundView 在 Cell 被选中的时候设置，在 Cell 取消选中的时候移除，并且还可以为其设置动画）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Read_Note/UICollectionViewCell_Hierarchy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;ios-drawing-practical-uikit-solution&quot;&gt;iOS Drawing: Practical UIKit Solution&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Context：包含了绘图的上下文环境；主要使用的有两种：
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;Bitmap Context：使用像素数据来绘制&lt;/li&gt;
        &lt;li&gt;PDF Contexta：矢量数据，以矢量的形式来绘制&lt;/li&gt;
        &lt;li&gt;Core Image Context：帮助进行图像处理，如数字图像处理和计算机视觉等，通过GPU加速&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;iOS绘图程序主要基于UIKit和QuartzCore框架(QuertzCore框架通常被称作Quartz或者Quartz 2D)，它由新的Objective-C界面（UIKit提供）和老旧一些的C语言方法和核心基础类（QuartzCore）组成&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;在绘制图像的时候，有一个很重要的概念是上下文（Context），其实类似于一个大的状态机，每次改变都会改变其当前状态，可以通过 CGContextSaveGState 来暂存当前状态，之后通过 CGContextRestoreCState 来恢复状态；可以改变 Context 的属性如下图：&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Read_Note/Context_State.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;需要注意的是 UIKit 中坐标系原点为屏幕坐上点，在Quartz中，原点位于左下点，如下图；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Read_Note/坐标系.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Quartz 和 UIKit 绘图方法都是线程安全的&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;以CG开头Ref结尾的类型是指，指向对象的指针&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;坐标系转换，即把一个点从视图坐标系转换到它的父视图的坐标系中：CGPoint convertedPoint = [fahterView convertPoint:samplePoint fromView:childView]; 如果要反向转换，可以使用：转换回来，使用convertRect：toView：；前提是这些视图必须在同一个 UIWindow 中&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CGAffineTransform 可以用于进行旋转，缩放，位移变换（其实也是一个变换矩阵，如下图）；一般都不使用 CGAffineTransformMake 方法来构建，通常使用 CGAffineTransformMakeScale（），CGAffineTransformMakeRotate（）或是CGAffineTransformMakeTranslation（）来分别构造缩放，旋转，位移矩阵；可以通过 UIKit 的 NSStringFromCGAffineTransform 方法打印处转换后的矩阵值；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Read_Note/CGAffineTransform.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CGPoint，CGRect，CGSize，CGAffineTransform等几何元素并不是对象，如果要存储或者更加直观的打印这些几何元素，OC 也提供了对应的方法，如：
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;转换为 strings&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Read_Note/To_Strings.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;转换为字典&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Read_Note/To_Dictionary.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;转换为值类型&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Read_Note/To_Value.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;几何测试方法&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/iOS_Read_Note/Graph_Test.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;swift文档&quot;&gt;Swift文档&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://www.swift51.com/swift4.0/chapter2/10_Properties.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;结构体和枚举是值类型，这意味着它们的实例，以及实例中所包含的任何值类型属性，在代码中传递的时候都会被复制；值类型被赋予给一个变量、常量或者被传递给一个函数的时候，其值会被拷贝；在 Swift 中，所有的基本类型：整数（Integer）、浮点数（floating-point）、布尔值（Boolean）、字符串（string)、数组（array）和字典（dictionary），都是值类型，并且在底层都是以结构体的形式所实现&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;类是引用类型；可以使用恒等运算符（&lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;!==&lt;/code&gt;）来判断两个常量或变量是否引用同一个类实例；Objective-C 中NSString，NSArray和NSDictionary类型均以类的形式实现，而并非结构体&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;存储属性存储常量或变量作为实例的一部分（&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;），而计算属性计算（不是存储）一个值。计算属性可以用于类、结构体和枚举，存储属性只能用于类和结构体；一个存储属性就是存储在特定类或结构体实例里的一个常量或变量；计算属性不直接存储值，而是提供一个 getter 和一个可选的 setter，来间接获取和设置其他属性或变量的值&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;延迟存储属性（&lt;code class=&quot;highlighter-rouge&quot;&gt;lazy&lt;/code&gt;），即第一次使用的时候才会计算其值；必须将延迟存储属性声明成变量（使用 var 关键字），因为属性的初始值可能在实例构造完成之后才会得到。而常量属性在构造过程完成之前必须要有初始值，因此无法声明成延迟属性（如果一个被标记为 lazy 的属性在没有初始化时就同时被多个线程访问，则无法保证该属性只会被初始化一次）；全局的常量或变量都是延迟计算的，跟延迟存储属性相似，不同的地方在于，全局的常量或变量不需要标记lazy修饰符（全局变量是在函数、方法、闭包或任何类型之外定义的变量）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;属性观察器：willSet 在新的值被设置之前调用；didSet 在新的值被设置之后立即调用；父类的属性在子类的构造器中被赋值时，它在父类中的 willSet 和 didSet 观察器会被调用，随后才会调用子类的观察器。在父类初始化方法调用之前，子类给属性赋值时，观察器不会被调用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;类型属性：即与类相关的属性（而非与特定实例相关）；使用关键字 static 来定义类型属性；在方法的func关键字之前加上关键字static，来指定类型方法（类还可以用关键字class来允许子类重写父类的方法实现）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;结构体和枚举能够定义方法是 Swift 与 C/Objective-C 的主要区别之一（在 Objective-C 中，类是唯一能定义方法的类型）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下标：下标可以定义在类、结构体和枚举中；一个类型可以定义多个下标，通过不同索引类型进行重载。下标不限于一维，你可以定义具有多个入参的下标满足自定义类型的需求；定义下标使用subscript关键字&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以通过把方法，属性或下标标记为final来防止它们被重写，只需要在声明关键字前加上final修饰符即可；也可以将类标记为&lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;的，那么此时该类不可被继承&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;指定构造器：指定构造器是类中最主要的构造器；每一个类都必须拥有至少一个指定构造器，在某些情况下，许多类通过继承了父类中的指定构造器而满足了这个条件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;便利构造器：类中比较次要的、辅助型的构造器（在&lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;关键字之前放置&lt;code class=&quot;highlighter-rouge&quot;&gt;convenience&lt;/code&gt;关键字）。你可以定义便利构造器来调用同一个类中的指定构造器，并为其参数提供默认值。你也可以定义便利构造器来创建一个特殊用途或特定输入值的实例（应当只在必要的时候为类提供便利构造器）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在类的定义中，每个类最多只能有一个析构器，而且析构器不带任何参数&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt;通过引用计数来实现内存管理，引用计数仅仅应用于类的实例。结构体和枚举类型是值类型，不是引用类型，也不是通过引用的方式存储和传递；Swift 提供了两种办法用来解决你在使用类的属性时所遇到的循环强引用问题：弱引用（weak reference）和无主引用（unowned reference）（弱引用和无主引用允许循环引用中的一个实例引用而另外一个实例不保持强引用。这样实例能够互相引用而不产生循环强引用）
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;弱引用（&lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt;）：当其他的实例有更短的生命周期时，使用弱引用；当实例被销毁后置为&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;无主引用（&lt;code class=&quot;highlighter-rouge&quot;&gt;unowned&lt;/code&gt;）：当其他实例有相同的或者更长生命周期时，使用无主引用；当实例被销毁后不会被置&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;（无主引用通常都被期望拥有值，使用无主引用，你必须确保引用始终指向一个未销毁的实例，如果你试图在实例被销毁后，访问该实例的无主引用，会触发运行时错误）&lt;/li&gt;
        &lt;li&gt;隐式解析可选属性&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;闭包也是引用类型，当闭包和类混用时需要注意不要引起引用循环，可以使用如下功能解决：&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lazy var someClosure: (Int, String) -&amp;gt; String = {
    [unowned self, weak delegate = self.delegate!] (index: Int, stringToProcess: String) -&amp;gt; String in
    // 这里是闭包的函数体
}

lazy var someClosure: Void -&amp;gt; String = {
    [unowned self, weak delegate = self.delegate!] in
    // 这里是闭包的函数体
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt;会自动调用父类的初始化方法（在子类初始化方法的末尾（而不是开始））&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;autolayout文档&quot;&gt;AutoLayout文档&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/AnatomyofaConstraint.html&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoLayout&lt;/code&gt;实际上是解一个线性方程组；可以设置每一个约束的优先级&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 15 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/15/iOS%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/15/iOS%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>Jira插件开发总结</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;最近接到个需求开发Jira插件，陆陆续续还是踩了很多坑，在此记录一下&lt;/p&gt;

&lt;p&gt;Jira是比较常用的项目管理工具，由Java编写；Jira插件其实就是一个Jar包，借助于官方提供的SDK，可以很方便的获取各种数据和进行各种操作；但是有一个比较麻烦的是不同版本的Jira SDK的可用API不同，网上资料也较少，需要多看文档和摸索&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;一-环境搭建&quot;&gt;一. 环境搭建&lt;/h2&gt;

&lt;p&gt;首先我们需要搭建一个能在本地测试的环境，不然频繁的导出Jar包到线上环境将极大降低效率；这里有一个坑是：Jira SDK对Java版本要求比较严格，当时笔者用的Jira SDK 8.0，Java版本是Java 11，但是始终跑不起来，出现问题如下图；查了比较久，最终将Java版本改到Java 8得以解决；&lt;a href=&quot;https://confluence.atlassian.com/adminjiraserver073/supported-platforms-861253018.html&quot;&gt;Jira与Java版本对应关系&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/Java_Jira/Jira.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后可以按照&lt;a href=&quot;https://developer.atlassian.com/server/jira/platform/role-members-jql-function-tutorial/&quot;&gt;官方教程&lt;/a&gt;写一个Hello World的Demo，先跑起来，熟悉一下开发流程；再推荐一篇&lt;a href=&quot;https://www.cnblogs.com/DevilMayCry-Samsara/p/6052286.html&quot;&gt;中文博客&lt;/a&gt;也比较详细&lt;/p&gt;

&lt;p&gt;本地访问链接是：http://localhost:2990/jira&lt;/p&gt;

&lt;p&gt;其实本地的Jira插件测试环境实际上是跑起来的一个Tomcat；这里记录几个有用的命令:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;atlas-run&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;atlas-debug&lt;/code&gt;：启动Tomcat，加载插件&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;atlas-mvn package&lt;/code&gt;：热更新，即如果代码有改动，那么可以运行此命令而不必重启Tomcat&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;atlas-clean&lt;/code&gt;：清除缓存，如果运行失败且无他法时，可以尝试用此命令清除一下缓存&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;二-定制插件&quot;&gt;二. 定制插件&lt;/h2&gt;

&lt;p&gt;再编写插件之前，需要先了解一下相关概念，即Jira Function，参见&lt;a href=&quot;https://developer.atlassian.com/server/jira/platform/jql-function/&quot;&gt;官方文档&lt;/a&gt;；一般来说我们定制Jira插件都需要继承自&lt;code class=&quot;highlighter-rouge&quot;&gt;AbstractJqlFunction&lt;/code&gt;这个类，比较重要的有如下几个方法（注意：不同的SDK版本方法参数等可能有差异）&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public MessageSet validate(ApplicationUser searcher, FunctionOperand operand, TerminalClause terminalClause)&lt;/code&gt;：该方法再构造函数之后调用，用于进行参数验证，用户访问权限验证等&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public List&amp;lt;QueryLiteral&amp;gt; getValues(QueryCreationContext queryCreationContext, FunctionOperand operand, TerminalClause terminalClause)&lt;/code&gt;：该方法用于返回待展示的Item列表，我们的主要工作也在这个方法中&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public int getMinimumNumberOfExpectedArguments()&lt;/code&gt;：返回接收的最少参数个数&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;前面也说了，不同版本的Jira SDK的可用API差异较大，这里举一个根据传入参数查询Issue列表的示例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	final ApplicationUser applicationUser = queryCreationContext.getApplicationUser();
        final List&amp;lt;String&amp;gt; args = operand.getArgs();
        final List&amp;lt;QueryLiteral&amp;gt; queryLiterals = new LinkedList&amp;lt;&amp;gt;();
        JqlQueryParser parser = ComponentAccessor.getComponent(JqlQueryParser.class);
        try {
            Query query = parser.parseQuery(args.get(0));
	    // private final SearchService searchService;
            SearchResults searchResult = searchService.search(applicationUser, query, PagerFilter.getUnlimitedFilter());
            List&amp;lt;Issue&amp;gt; issues = searchResult.getIssues();
            for (Issue issue : issues) {
                queryLiterals.add(new QueryLiteral(operand, issue.getId()));
            }
        } catch (Exception e) {
            log.error(&quot;Error search: &quot;, e);
	 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;三-参考链接&quot;&gt;三. 参考链接&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pemcconnell/jira-jql-membersInRole&quot;&gt;Jira插件Demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/matthewlmcclure/jira-rankof-jql-function&quot;&gt;Jira插件Demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kevshine/jira-opensource-jql-functions&quot;&gt;Jira插件Demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mailru/jira-plugins-groovy&quot;&gt;Jira插件Demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.atlassian.com/software/jira/docs/api/8.0.0/allclasses-noframe.html&quot;&gt;Jira SDK API&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 14 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/14/Jira%E6%8F%92%E4%BB%B6/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/14/Jira%E6%8F%92%E4%BB%B6/</guid>
        
        <category>Java</category>
        
        
      </item>
    
      <item>
        <title>Objective-C入门要点</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;近日开始入坑iOS，正所谓工欲善其事，必先利其器；iOS的两大基础利器莫过于OC和Swift这两门语言了；笔者先接触的是OC，时至今日也近一月，以此总结，记录OC的一些要点和难点&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;一-面向对象&quot;&gt;一. 面向对象&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;OC是C的一个扩展集，在C的基础上添加了面向对象和消息传递等机制；作为一门面向对象的语言，自然需要探讨面向对象三大特性在OC上的体现&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;11-封装&quot;&gt;1.1 封装&lt;/h3&gt;

&lt;p&gt;笔者认为，封装更多的是体现在类或者说类的设计上面，有点带设计模式那个层次，如果真要从语法层面去讲解的话，更契合的还是类，方法，成员变量的访问修饰符&lt;/p&gt;

&lt;p&gt;OC中类没有访问修饰符，OC中也没有package的概念&lt;/p&gt;

&lt;p&gt;OC中方法也没有权限修饰符一说，在头文件中声明的方法都相当于是public的，如果要定义私有方法，则只需在.m文件中实现，但不需要在.h文件声明&lt;/p&gt;

&lt;p&gt;成员变量权限访问修饰方法主要有如下三种；除了以下三种外，还有一个是@package，它修饰属性的时候，只能在当前框架中才能呗访问，用的比较少&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;修饰符&lt;/th&gt;
      &lt;th&gt;类内部&lt;/th&gt;
      &lt;th&gt;子类&lt;/th&gt;
      &lt;th&gt;任何地方&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;private&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;protected（默认）&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;public&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;12-继承&quot;&gt;1.2 继承&lt;/h3&gt;

&lt;p&gt;OC只支持单继承，如果要实现多继承，可以采用如下三种方式：&lt;/p&gt;

&lt;h4 id=&quot;121-通过组合实现&quot;&gt;1.2.1 通过组合实现&lt;/h4&gt;

&lt;p&gt;组合实际上就是说如果一个类无法实现某个功能，那么就将该需求转接到另一个类实现，比较简单，就是将能实现该功能的类作为自己的一个成员变量&lt;/p&gt;

&lt;h4 id=&quot;122-通过协议实现&quot;&gt;1.2.2 通过协议实现&lt;/h4&gt;

&lt;p&gt;协议类似于Java中的接口，但是也有所不同，参见下面对协议的讲解；OC中只能继承一个类，但是可以实现多个协议&lt;/p&gt;

&lt;h4 id=&quot;123-通过category实现&quot;&gt;1.2.3 通过Category实现&lt;/h4&gt;

&lt;p&gt;Category可以实现在不继承类的基础上实现对类的扩展；这里使用Category实现多继承举例如下：Child已经继承了Father，想要再对Child扩展方法，可以使用Category扩展&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 文件：Child.h
@interface Child : Father

- (void)showChild;

@end

// 文件：Child+Hello.h
@interface Child(Hello)

- (void)hello;

@end

// 文件：Child+Hello.m
@implementation Child(Hello)

- (void)hello {
    
}

@end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;13-多态&quot;&gt;1.3 多态&lt;/h3&gt;

&lt;p&gt;Java中多态的实现依赖于重写，重载和向上转型（动态链接）；但是OC中方法不能重载，可以重写，其余的和普通Java多态的概念和用法基本相同；另外，Java中多态还有一个重要的点就是接口，依赖于接口达到的运行时动态绑定，与之对应的，在OC中可以使用协议实现&lt;/p&gt;

&lt;p&gt;这里还需要注意的是，重新认识OC中的方法签名，OC的语法比较冗余，举例如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 函数原型如下，方法签名为：addNumber1:andNumber2:
- (NSInteger)addNumber1:(NSInteger)number1 andNumber2:(NSInteger)number2;

// 函数原型如下，方法签名为：add::
- (NSInteger)add:(NSInteger)number1 :(NSInteger)number2;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;二-协议&quot;&gt;二. 协议&lt;/h2&gt;

&lt;p&gt;OC中的协议相当于Java中的接口，很多设计模式都依赖于协议；但是OC中的协议于Java中的接口也有一些细微的差别；&lt;/p&gt;

&lt;p&gt;一般而言，协议应该与对应的类声明在同一个头文件中，与Java中接口不同的是，协议的中的方法不是必须都实现的，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;@optional&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;@required&lt;/code&gt;来声明方法，但是使用@required修饰的协议方法也不是必须实现的，如果没有实现，编译会报警告；但是如果调用了一个没有实现的协议方法的话，运行时会崩溃&lt;/p&gt;

&lt;p&gt;协议中不能有默认方法实现，这点与Java中的接口相同，但是OC的协议中不能定义变量；协议可以被class，struct，enum实现&lt;/p&gt;

&lt;p&gt;协议的使用场景：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;需要由别的类实现的方法&lt;/li&gt;
    &lt;li&gt;声明未知类的接口&lt;/li&gt;
    &lt;li&gt;两个类之间的通信&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;三-define宏定义&quot;&gt;三. define：宏定义&lt;/h2&gt;

&lt;p&gt;OC中的宏定义是非常强大的，合理使用可以极大的简化和优雅代码&lt;/p&gt;

&lt;h3 id=&quot;31-defineconstenum定义常量&quot;&gt;3.1 define，const，enum定义常量&lt;/h3&gt;

&lt;p&gt;define宏：只是在预处理器里进行文本替换，没有类型，不做任何类型检查，编译器可以对相同的字符串进行优化。只保存一份到 .rodata 段。甚至有相同后缀的字符串也可以优化，你可以用GCC 编译测试，”Hello world” 与 “world” 两个字符串，只存储前面一个。取的时候只需要给前面和中间的地址，如果是整形、浮点型会有多份拷贝，但这些数写在指令中。占的只是代码段而已，大量用宏会导致二进制文件变大&lt;/p&gt;

&lt;p&gt;const常量：共享一块内存空间，就算项目中N处用到，也不会分配N块内存空间，可以根据const修饰的位置设定能否修改，在编译阶段会执行类型检查&lt;/p&gt;

&lt;p&gt;enum枚举：只能定义int类型&lt;/p&gt;

&lt;p&gt;推荐使用const常量&lt;/p&gt;

&lt;p&gt;部分摘自&lt;a href=&quot;https://www.jianshu.com/p/f83335e036b5&quot;&gt;博客&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;32-宏定义&quot;&gt;3.2 宏定义&lt;/h3&gt;

&lt;p&gt;使用宏定义可以将一些冗杂的语句简化，使得调用简明；常用宏可以参见&lt;a href=&quot;https://my.oschina.net/leejan97/blog/354904&quot;&gt;博客&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;四-property修饰符&quot;&gt;四. @property修饰符&lt;/h2&gt;

&lt;p&gt;本来@property是和@synthesize共用来实现自动生成set和get方法的，但是Xcode4.4之后，@property得到了增强，只使用@property即可生成set和get方法，同时还会自动生成一个带下划线的同名私有变量（需要注意的是，当我们自己写了对应的set和get方法时，该带下划线的同名变量将不可用，解决办法参见&lt;a href=&quot;https://www.jianshu.com/p/baef6d5a41d3&quot;&gt;博客&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;但是@property的使用难点在于理解其修饰符，关于@property修饰符的使用涉及到内存管理，也是比较复杂的一部分，这里暂时搁置，找机会和内存管理一起讲解&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;五-xcode与模拟器快捷键&quot;&gt;五. Xcode与模拟器快捷键&lt;/h2&gt;

&lt;p&gt;说实话，刚从Android Studio转到Xcode实际上是很不习惯的，很明显的一个就是IDE写代码不顺手，AS各种快捷键与插件写起代码来简直上天～&lt;/p&gt;

&lt;p&gt;但既已入坑，还是自己去适应呗&lt;/p&gt;

&lt;p&gt;Xcode常用快捷键：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmd + shift + o      快速打开文件
cmd + 1              切换成 Project Navigator (cmd + 2~7 也可以做相应切换，不过不常用）
cmd + ctrl + 上     在 .h 和 .m 文件之间切换
cmd + enter          切换成 standard editor
cmd + opt + enter    切换成 assistant editor
cmd + shift + y      切换 Console View 的显示或隐藏
cmd + 0              隐藏左边的导航 (Navigator) 区
cmd + opt + 0        隐藏右边的工具 (Utility) 区
ctrl  + 6            列出当前文件中所有的方法，可以输入关键词来过滤。这个相当赞，可以快速定位到想编辑的方法。
                     我直接把这个快键盘改成了 ctrl+o，这样按起来更顺手。
cmd + ctrl + 左 / 右   到上 / 下一次编辑的位置，在 2 个编辑位置跳转的时候很方便。
cmd + opt + j        跳转到文件过滤区
cmd + shift + f      在工程中查找
cmd + r              运行，如果选上直接 kill 掉上次进程的话，每次直接一按就可以重新运行了
cmd + b              编译工程
cmd + shift + k      清空编译好的文件
cmd + .              结束本次调试
ESC                  调出代码补全
cmd + 单击           查看该方法的实现
opt + 单击           查看该方法的文档
cmd + t              新建一个 tab 栏
cmd + shift + [      在 tab 栏之间切换
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;模拟器常用快捷键：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SHIFT+CMD+H	回到桌面
CMD+Q		退出模拟器
CMD+S		模拟器截屏(所截图片都在桌面上)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;六-内存管理&quot;&gt;六. 内存管理&lt;/h2&gt;

&lt;p&gt;内存管理是一个比较难的点，东西也很多，并非三言两语就能阐述清楚，后面有机会再另起新篇&lt;/p&gt;

&lt;p&gt;————-分割线——————&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Draft：暂存&lt;/strong&gt;
@property修饰符，常见的几组如下：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;atomic, nonatomic：是否线程安全；默认为atomic，线程安全，但是会影响性能，一般使用nonatomic&lt;/li&gt;
    &lt;li&gt;retain, copy, assign：默认为assign，该修饰符对属性只是简单的赋值，不更改引用计数，常用于基本数据类型，如：int，short等；retain一般用于修饰指针，会持有对象，增加引用计数&lt;/li&gt;
    &lt;li&gt;readonly, readwrite&lt;/li&gt;
    &lt;li&gt;strong, getter=method, setter=method, unsafe_unretained&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;weak和assign的区别：weak和assign的区别主要是体现在两者修饰OC对象时的差异。上面也介绍过，assign通常用来修饰基本数据类型，如int、float、BOOL等，weak用来修饰OC对象，如UIButton、UIView等；weak不能修饰基本数据类型&lt;/p&gt;

&lt;p&gt;相关博客推荐：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;https://hk.saowen.com/a/1bdf81decab39874080a44833b2fc47eb8a59355e9ae2b997565552d63991f4d&lt;/li&gt;
    &lt;li&gt;https://hk.saowen.com/a/7b29e511436f99243478a22570615137266de714cbcda782e798ab04a4611d5e  及其后文链接&lt;/li&gt;
    &lt;li&gt;https://hk.saowen.com/a/e7b69dbe7dfea4e5a00ebd4ef4a73a61403c8351d319eb901a05388d38513dbf  及其后文链接&lt;/li&gt;
    &lt;li&gt;https://stackoverflow.com/questions/2255861/property-retain-assign-copy-nonatomic-in-objective-c&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 23 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/01/23/Objective-C%E5%85%A5%E9%97%A8%E8%A6%81%E7%82%B9/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/23/Objective-C%E5%85%A5%E9%97%A8%E8%A6%81%E7%82%B9/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
  </channel>
</rss>
